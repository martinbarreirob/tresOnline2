{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    this.entityMetadata = options.entityMetadata;\n    this.target = options.args.target;\n    this.propertyName = options.args.propertyName;\n    this.relationNameOrFactory = options.args.relation;\n    this.alias = options.args.alias;\n    this.queryBuilderFactory = options.args.queryBuilderFactory;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Sets relation id value from the given entity.\n   *\n   * todo: make it to work in embeds as well.\n   */\n  setValue(entity) {\n    const inverseEntity = this.relation.getEntityValue(entity);\n    if (Array.isArray(inverseEntity)) {\n      entity[this.propertyName] = inverseEntity.map(item => {\n        return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n      }).filter(item => item !== null && item !== undefined);\n    } else {\n      const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n      if (value !== undefined) entity[this.propertyName] = value;\n    }\n  }\n  // ---------------------------------------------------------------------\n  // Public Builder Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend relation id properties.\n   * This builder method should be used only after entity metadata, its properties map and all relations are build.\n   */\n  build() {\n    const propertyPath = typeof this.relationNameOrFactory === \"function\" ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n    const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n    if (!relation) throw new TypeORMError(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n    this.relation = relation;\n  }\n}","map":{"version":3,"names":["TypeORMError","RelationIdMetadata","constructor","options","entityMetadata","target","args","propertyName","relationNameOrFactory","relation","alias","queryBuilderFactory","setValue","entity","inverseEntity","getEntityValue","Array","isArray","map","item","inverseEntityMetadata","getEntityIdMixedMap","filter","undefined","value","build","propertyPath","propertiesMap","findRelationWithPropertyPath"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata/RelationIdMetadata.js"],"sourcesContent":["import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's relation count.\n */\nexport class RelationIdMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    setValue(entity) {\n        const inverseEntity = this.relation.getEntityValue(entity);\n        if (Array.isArray(inverseEntity)) {\n            entity[this.propertyName] = inverseEntity\n                .map((item) => {\n                return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n            })\n                .filter((item) => item !== null && item !== undefined);\n        }\n        else {\n            const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n            if (value !== undefined)\n                entity[this.propertyName] = value;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    build() {\n        const propertyPath = typeof this.relationNameOrFactory === \"function\"\n            ? this.relationNameOrFactory(this.entityMetadata.propertiesMap)\n            : this.relationNameOrFactory;\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new TypeORMError(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\n        this.relation = relation;\n    }\n}\n\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,UAAU;AACvC;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAC5B;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;IAC5C,IAAI,CAACC,MAAM,GAAGF,OAAO,CAACG,IAAI,CAACD,MAAM;IACjC,IAAI,CAACE,YAAY,GAAGJ,OAAO,CAACG,IAAI,CAACC,YAAY;IAC7C,IAAI,CAACC,qBAAqB,GAAGL,OAAO,CAACG,IAAI,CAACG,QAAQ;IAClD,IAAI,CAACC,KAAK,GAAGP,OAAO,CAACG,IAAI,CAACI,KAAK;IAC/B,IAAI,CAACC,mBAAmB,GAAGR,OAAO,CAACG,IAAI,CAACK,mBAAmB;EAC/D;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAACC,MAAM,EAAE;IACb,MAAMC,aAAa,GAAG,IAAI,CAACL,QAAQ,CAACM,cAAc,CAACF,MAAM,CAAC;IAC1D,IAAIG,KAAK,CAACC,OAAO,CAACH,aAAa,CAAC,EAAE;MAC9BD,MAAM,CAAC,IAAI,CAACN,YAAY,CAAC,GAAGO,aAAa,CACpCI,GAAG,CAAEC,IAAI,IAAK;QACf,OAAO,IAAI,CAACV,QAAQ,CAACW,qBAAqB,CAACC,mBAAmB,CAACF,IAAI,CAAC;MACxE,CAAC,CAAC,CACGG,MAAM,CAAEH,IAAI,IAAKA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKI,SAAS,CAAC;IAC9D,CAAC,MACI;MACD,MAAMC,KAAK,GAAG,IAAI,CAACf,QAAQ,CAACW,qBAAqB,CAACC,mBAAmB,CAACP,aAAa,CAAC;MACpF,IAAIU,KAAK,KAAKD,SAAS,EACnBV,MAAM,CAAC,IAAI,CAACN,YAAY,CAAC,GAAGiB,KAAK;IACzC;EACJ;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,MAAMC,YAAY,GAAG,OAAO,IAAI,CAAClB,qBAAqB,KAAK,UAAU,GAC/D,IAAI,CAACA,qBAAqB,CAAC,IAAI,CAACJ,cAAc,CAACuB,aAAa,CAAC,GAC7D,IAAI,CAACnB,qBAAqB;IAChC,MAAMC,QAAQ,GAAG,IAAI,CAACL,cAAc,CAACwB,4BAA4B,CAACF,YAAY,CAAC;IAC/E,IAAI,CAACjB,QAAQ,EACT,MAAM,IAAIT,YAAY,CAAE,wBAAuB0B,YAAa,uDAAsD,CAAC;IACvH,IAAI,CAACjB,QAAQ,GAAGA,QAAQ;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}