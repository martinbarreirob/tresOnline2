{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {\n  // normalize parameters\n  const options = {};\n  let strategy;\n  if (strategyOrOptions) {\n    if (typeof strategyOrOptions === \"string\") strategy = strategyOrOptions;\n    if (ObjectUtils.isObject(strategyOrOptions)) {\n      strategy = \"increment\";\n      Object.assign(options, strategyOrOptions);\n    }\n  } else {\n    strategy = \"increment\";\n  }\n  if (ObjectUtils.isObject(maybeOptions)) Object.assign(options, maybeOptions);\n  return function (object, propertyName) {\n    // if column type is not explicitly set then determine it based on generation strategy\n    if (!options.type) {\n      if (strategy === \"increment\" || strategy === \"identity\") {\n        options.type = Number;\n      } else if (strategy === \"uuid\") {\n        options.type = \"uuid\";\n      } else if (strategy === \"rowid\") {\n        options.type = \"int\";\n      }\n    }\n    // explicitly set a primary and generated to column options\n    options.primary = true;\n    // register column metadata args\n    getMetadataArgsStorage().columns.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      mode: \"regular\",\n      options: options\n    });\n    // register generated metadata args\n    getMetadataArgsStorage().generations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      strategy: strategy\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","PrimaryGeneratedColumn","strategyOrOptions","maybeOptions","options","strategy","isObject","Object","assign","object","propertyName","type","Number","primary","columns","push","target","constructor","mode","generations"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {\n    // normalize parameters\n    const options = {};\n    let strategy;\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions;\n        if (ObjectUtils.isObject(strategyOrOptions)) {\n            strategy = \"increment\";\n            Object.assign(options, strategyOrOptions);\n        }\n    }\n    else {\n        strategy = \"increment\";\n    }\n    if (ObjectUtils.isObject(maybeOptions))\n        Object.assign(options, maybeOptions);\n    return function (object, propertyName) {\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\" || strategy === \"identity\") {\n                options.type = Number;\n            }\n            else if (strategy === \"uuid\") {\n                options.type = \"uuid\";\n            }\n            else if (strategy === \"rowid\") {\n                options.type = \"int\";\n            }\n        }\n        // explicitly set a primary and generated to column options\n        options.primary = true;\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options,\n        });\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD,SAASC,WAAW,QAAQ,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,iBAAiB,EAAEC,YAAY,EAAE;EACpE;EACA,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,IAAIC,QAAQ;EACZ,IAAIH,iBAAiB,EAAE;IACnB,IAAI,OAAOA,iBAAiB,KAAK,QAAQ,EACrCG,QAAQ,GAAGH,iBAAiB;IAChC,IAAIF,WAAW,CAACM,QAAQ,CAACJ,iBAAiB,CAAC,EAAE;MACzCG,QAAQ,GAAG,WAAW;MACtBE,MAAM,CAACC,MAAM,CAACJ,OAAO,EAAEF,iBAAiB,CAAC;IAC7C;EACJ,CAAC,MACI;IACDG,QAAQ,GAAG,WAAW;EAC1B;EACA,IAAIL,WAAW,CAACM,QAAQ,CAACH,YAAY,CAAC,EAClCI,MAAM,CAACC,MAAM,CAACJ,OAAO,EAAED,YAAY,CAAC;EACxC,OAAO,UAAUM,MAAM,EAAEC,YAAY,EAAE;IACnC;IACA,IAAI,CAACN,OAAO,CAACO,IAAI,EAAE;MACf,IAAIN,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,UAAU,EAAE;QACrDD,OAAO,CAACO,IAAI,GAAGC,MAAM;MACzB,CAAC,MACI,IAAIP,QAAQ,KAAK,MAAM,EAAE;QAC1BD,OAAO,CAACO,IAAI,GAAG,MAAM;MACzB,CAAC,MACI,IAAIN,QAAQ,KAAK,OAAO,EAAE;QAC3BD,OAAO,CAACO,IAAI,GAAG,KAAK;MACxB;IACJ;IACA;IACAP,OAAO,CAACS,OAAO,GAAG,IAAI;IACtB;IACAd,sBAAsB,CAAC,CAAC,CAACe,OAAO,CAACC,IAAI,CAAC;MAClCC,MAAM,EAAEP,MAAM,CAACQ,WAAW;MAC1BP,YAAY,EAAEA,YAAY;MAC1BQ,IAAI,EAAE,SAAS;MACfd,OAAO,EAAEA;IACb,CAAC,CAAC;IACF;IACAL,sBAAsB,CAAC,CAAC,CAACoB,WAAW,CAACJ,IAAI,CAAC;MACtCC,MAAM,EAAEP,MAAM,CAACQ,WAAW;MAC1BP,YAAY,EAAEA,YAAY;MAC1BL,QAAQ,EAAEA;IACd,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}