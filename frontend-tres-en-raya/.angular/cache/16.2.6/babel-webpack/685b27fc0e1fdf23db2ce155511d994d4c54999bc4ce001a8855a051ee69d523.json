{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Indicates if this index must be unique.\n     */\n    this.isUnique = false;\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    this.isSpatial = false;\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    this.isFulltext = false;\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    this.isNullFiltered = false;\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    this.synchronize = true;\n    /**\n     * Indexed columns.\n     */\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n    if (options.args) {\n      this.target = options.args.target;\n      if (options.args.synchronize !== null && options.args.synchronize !== undefined) this.synchronize = options.args.synchronize;\n      this.isUnique = !!options.args.unique;\n      this.isSpatial = !!options.args.spatial;\n      this.isFulltext = !!options.args.fulltext;\n      this.isNullFiltered = !!options.args.nullFiltered;\n      this.parser = options.args.parser;\n      this.where = options.args.where;\n      this.isSparse = options.args.sparse;\n      this.isBackground = options.args.background;\n      this.expireAfterSeconds = options.args.expireAfterSeconds;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n    }\n  }\n  // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend index properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n  build(namingStrategy) {\n    if (this.synchronize === false) {\n      this.name = this.givenName;\n      return this;\n    }\n    const map = {};\n    // if columns already an array of string then simply return it\n    if (this.givenColumnNames) {\n      let columnPropertyPaths = [];\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(columnName => {\n          if (this.embeddedMetadata) return this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n      } else {\n        // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n        if (Array.isArray(columnsFnResult)) {\n          columnPropertyPaths = columnsFnResult.map(i => String(i));\n          columnPropertyPaths.forEach(name => map[name] = 1);\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult).map(i => String(i));\n          Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n        }\n      }\n      this.columns = columnPropertyPaths.map(propertyPath => {\n        const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n        const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n        const indexName = this.givenName ? '\"' + this.givenName + '\" ' : \"\";\n        const entityName = this.entityMetadata.targetName;\n        throw new TypeORMError(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);\n      }).reduce((a, b) => a.concat(b));\n    }\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n      const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tableName, this.columns.map(column => column.databaseName), this.where);\n    return this;\n  }\n}","map":{"version":3,"names":["TypeORMError","IndexMetadata","constructor","options","isUnique","isSpatial","isFulltext","isNullFiltered","synchronize","columns","columnNamesWithOrderingMap","entityMetadata","embeddedMetadata","args","target","undefined","unique","spatial","fulltext","nullFiltered","parser","where","isSparse","sparse","isBackground","background","expireAfterSeconds","givenName","name","givenColumnNames","build","namingStrategy","map","columnPropertyPaths","Array","isArray","columnName","propertyPath","trim","forEach","columnsFnResult","propertiesMap","i","String","Object","keys","columnWithSameName","find","column","relationWithSameName","relations","relation","isWithJoinColumn","propertyName","joinColumns","indexName","entityName","targetName","reduce","a","b","concat","updatedMap","key","databasePath","tableName","databaseName"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata/IndexMetadata.js"],"sourcesContent":["import { TypeORMError } from \"../error\";\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Indicates if this index must be unique.\n         */\n        this.isUnique = false;\n        /**\n         * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n         * Works only in MySQL.\n         */\n        this.isSpatial = false;\n        /**\n         * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n         * Works only in MySQL.\n         */\n        this.isFulltext = false;\n        /**\n         * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n         * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n         * a normal index that includes NULL values.\n         *\n         * Works only in Spanner.\n         */\n        this.isNullFiltered = false;\n        /**\n         * Indicates if this index must synchronize with database index.\n         */\n        this.synchronize = true;\n        /**\n         * Indexed columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null &&\n                options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.isNullFiltered = !!options.args.nullFiltered;\n            this.parser = options.args.parser;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.isBackground = options.args.background;\n            this.expireAfterSeconds = options.args.expireAfterSeconds;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy) {\n        if (this.synchronize === false) {\n            this.name = this.givenName;\n            return this;\n        }\n        const map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map((columnName) => {\n                    if (this.embeddedMetadata)\n                        return (this.embeddedMetadata.propertyPath +\n                            \".\" +\n                            columnName);\n                    return columnName.trim();\n                });\n                columnPropertyPaths.forEach((propertyPath) => (map[propertyPath] = 1));\n            }\n            else {\n                // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i) => String(i));\n                    columnPropertyPaths.forEach((name) => (map[name] = 1));\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i) => String(i));\n                    Object.keys(columnsFnResult).forEach((columnName) => (map[columnName] = columnsFnResult[columnName]));\n                }\n            }\n            this.columns = columnPropertyPaths\n                .map((propertyPath) => {\n                const columnWithSameName = this.entityMetadata.columns.find((column) => column.propertyPath === propertyPath);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find((relation) => relation.isWithJoinColumn &&\n                    relation.propertyName === propertyPath);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName\n                    ? '\"' + this.givenName + '\" '\n                    : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new TypeORMError(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                    propertyPath);\n            })\n                .reduce((a, b) => a.concat(b));\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find((column) => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.indexName(this.entityMetadata.tableName, this.columns.map((column) => column.databaseName), this.where);\n        return this;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}