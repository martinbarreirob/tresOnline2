{"ast":null,"code":"/**\n * View in the database represented in this class.\n */\nexport class View {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"View\");\n    this.indices = [];\n    if (options) {\n      this.database = options.database;\n      this.schema = options.schema;\n      this.name = options.name;\n      this.expression = options.expression;\n      this.materialized = !!options.materialized;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n  clone() {\n    return new View({\n      database: this.database,\n      schema: this.schema,\n      name: this.name,\n      expression: this.expression,\n      materialized: this.materialized\n    });\n  }\n  /**\n   * Add index\n   */\n  addIndex(index) {\n    this.indices.push(index);\n  }\n  /**\n   * Remove index\n   */\n  removeIndex(viewIndex) {\n    const index = this.indices.find(index => index.name === viewIndex.name);\n    if (index) {\n      this.indices.splice(this.indices.indexOf(index), 1);\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates view from a given entity metadata.\n   */\n  static create(entityMetadata, driver) {\n    const options = {\n      database: entityMetadata.database,\n      schema: entityMetadata.schema,\n      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n      expression: entityMetadata.expression,\n      materialized: entityMetadata.tableMetadataArgs.materialized\n    };\n    return new View(options);\n  }\n}","map":{"version":3,"names":["View","constructor","options","Symbol","for","indices","database","schema","name","expression","materialized","clone","addIndex","index","push","removeIndex","viewIndex","find","splice","indexOf","create","entityMetadata","driver","buildTableName","tableName","tableMetadataArgs"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/schema-builder/view/View.js"],"sourcesContent":["/**\n * View in the database represented in this class.\n */\nexport class View {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"View\");\n        this.indices = [];\n        if (options) {\n            this.database = options.database;\n            this.schema = options.schema;\n            this.name = options.name;\n            this.expression = options.expression;\n            this.materialized = !!options.materialized;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone() {\n        return new View({\n            database: this.database,\n            schema: this.schema,\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        });\n    }\n    /**\n     * Add index\n     */\n    addIndex(index) {\n        this.indices.push(index);\n    }\n    /**\n     * Remove index\n     */\n    removeIndex(viewIndex) {\n        const index = this.indices.find((index) => index.name === viewIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata, driver) {\n        const options = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            expression: entityMetadata.expression,\n            materialized: entityMetadata.tableMetadataArgs.materialized,\n        };\n        return new View(options);\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,IAAI,CAAC;EACd;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC,aAAa,CAAC,GAAGC,MAAM,CAACC,GAAG,CAAC,MAAM,CAAC;IACxC,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAIH,OAAO,EAAE;MACT,IAAI,CAACI,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;MAChC,IAAI,CAACC,MAAM,GAAGL,OAAO,CAACK,MAAM;MAC5B,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACM,IAAI;MACxB,IAAI,CAACC,UAAU,GAAGP,OAAO,CAACO,UAAU;MACpC,IAAI,CAACC,YAAY,GAAG,CAAC,CAACR,OAAO,CAACQ,YAAY;IAC9C;EACJ;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAIX,IAAI,CAAC;MACZM,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,YAAY,EAAE,IAAI,CAACA;IACvB,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIE,QAAQA,CAACC,KAAK,EAAE;IACZ,IAAI,CAACR,OAAO,CAACS,IAAI,CAACD,KAAK,CAAC;EAC5B;EACA;AACJ;AACA;EACIE,WAAWA,CAACC,SAAS,EAAE;IACnB,MAAMH,KAAK,GAAG,IAAI,CAACR,OAAO,CAACY,IAAI,CAAEJ,KAAK,IAAKA,KAAK,CAACL,IAAI,KAAKQ,SAAS,CAACR,IAAI,CAAC;IACzE,IAAIK,KAAK,EAAE;MACP,IAAI,CAACR,OAAO,CAACa,MAAM,CAAC,IAAI,CAACb,OAAO,CAACc,OAAO,CAACN,KAAK,CAAC,EAAE,CAAC,CAAC;IACvD;EACJ;EACA;EACA;EACA;EACA;AACJ;AACA;EACI,OAAOO,MAAMA,CAACC,cAAc,EAAEC,MAAM,EAAE;IAClC,MAAMpB,OAAO,GAAG;MACZI,QAAQ,EAAEe,cAAc,CAACf,QAAQ;MACjCC,MAAM,EAAEc,cAAc,CAACd,MAAM;MAC7BC,IAAI,EAAEc,MAAM,CAACC,cAAc,CAACF,cAAc,CAACG,SAAS,EAAEH,cAAc,CAACd,MAAM,EAAEc,cAAc,CAACf,QAAQ,CAAC;MACrGG,UAAU,EAAEY,cAAc,CAACZ,UAAU;MACrCC,YAAY,EAAEW,cAAc,CAACI,iBAAiB,CAACf;IACnD,CAAC;IACD,OAAO,IAAIV,IAAI,CAACE,OAAO,CAAC;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}