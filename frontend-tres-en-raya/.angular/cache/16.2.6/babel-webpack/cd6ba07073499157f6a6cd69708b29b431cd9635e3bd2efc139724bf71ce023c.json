{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n  constructor(driver, mode) {\n    super(driver, mode);\n  }\n}\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraPostgresQueryRunner extends PostgresQueryRunnerWrapper {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver, client, mode) {\n    super(driver, mode);\n    this.client = client;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n  connect() {\n    if (this.databaseConnection) return Promise.resolve(this.databaseConnection);\n    if (this.databaseConnectionPromise) return this.databaseConnectionPromise;\n    if (this.mode === \"slave\" && this.driver.isReplicated) {\n      this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]) => {\n        this.driver.connectedQueryRunners.push(this);\n        this.databaseConnection = connection;\n        this.releaseCallback = release;\n        return this.databaseConnection;\n      });\n    } else {\n      // master\n      this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]) => {\n        this.driver.connectedQueryRunners.push(this);\n        this.databaseConnection = connection;\n        this.releaseCallback = release;\n        return this.databaseConnection;\n      });\n    }\n    return this.databaseConnectionPromise;\n  }\n  /**\n   * Starts transaction on the current connection.\n   */\n  startTransaction(isolationLevel) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.isTransactionActive = true;\n      try {\n        yield _this.broadcaster.broadcast(\"BeforeTransactionStart\");\n      } catch (err) {\n        _this.isTransactionActive = false;\n        throw err;\n      }\n      if (_this.transactionDepth === 0) {\n        yield _this.client.startTransaction();\n      } else {\n        yield _this.query(`SAVEPOINT typeorm_${_this.transactionDepth}`);\n      }\n      _this.transactionDepth += 1;\n      yield _this.broadcaster.broadcast(\"AfterTransactionStart\");\n    })();\n  }\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  commitTransaction() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.isTransactionActive) throw new TransactionNotStartedError();\n      yield _this2.broadcaster.broadcast(\"BeforeTransactionCommit\");\n      if (_this2.transactionDepth > 1) {\n        yield _this2.query(`RELEASE SAVEPOINT typeorm_${_this2.transactionDepth - 1}`);\n      } else {\n        yield _this2.client.commitTransaction();\n        _this2.isTransactionActive = false;\n      }\n      _this2.transactionDepth -= 1;\n      yield _this2.broadcaster.broadcast(\"AfterTransactionCommit\");\n    })();\n  }\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  rollbackTransaction() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.isTransactionActive) throw new TransactionNotStartedError();\n      yield _this3.broadcaster.broadcast(\"BeforeTransactionRollback\");\n      if (_this3.transactionDepth > 1) {\n        yield _this3.query(`ROLLBACK TO SAVEPOINT typeorm_${_this3.transactionDepth - 1}`);\n      } else {\n        yield _this3.client.rollbackTransaction();\n        _this3.isTransactionActive = false;\n      }\n      _this3.transactionDepth -= 1;\n      yield _this3.broadcaster.broadcast(\"AfterTransactionRollback\");\n    })();\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  query(query, parameters, useStructuredResult = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.isReleased) throw new QueryRunnerAlreadyReleasedError();\n      const raw = yield _this4.client.query(query, parameters);\n      const result = new QueryResult();\n      result.raw = raw;\n      if ((raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"records\")) && Array.isArray(raw.records)) {\n        result.records = raw.records;\n      }\n      if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n        result.affected = raw.numberOfRecordsUpdated;\n      }\n      if (!useStructuredResult) {\n        return result.raw;\n      }\n      return result;\n    })();\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","TransactionNotStartedError","PostgresQueryRunner","QueryResult","PostgresQueryRunnerWrapper","constructor","driver","mode","AuroraPostgresQueryRunner","client","connect","databaseConnection","Promise","resolve","databaseConnectionPromise","isReplicated","obtainSlaveConnection","then","connection","release","connectedQueryRunners","push","releaseCallback","obtainMasterConnection","startTransaction","isolationLevel","_this","_asyncToGenerator","isTransactionActive","broadcaster","broadcast","err","transactionDepth","query","commitTransaction","_this2","rollbackTransaction","_this3","parameters","useStructuredResult","_this4","isReleased","raw","result","hasOwnProperty","Array","isArray","records","affected","numberOfRecordsUpdated"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresQueryRunner.js"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n    constructor(driver, mode) {\n        super(driver, mode);\n    }\n}\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraPostgresQueryRunner extends PostgresQueryRunnerWrapper {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver, client, mode) {\n        super(driver, mode);\n        this.client = client;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect() {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then(([connection, release]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n        else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then(([connection, release]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n        return this.databaseConnectionPromise;\n    }\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel) {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        if (this.transactionDepth === 0) {\n            await this.client.startTransaction();\n        }\n        else {\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        this.transactionDepth += 1;\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        if (this.transactionDepth > 1) {\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        else {\n            await this.client.commitTransaction();\n            this.isTransactionActive = false;\n        }\n        this.transactionDepth -= 1;\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        if (this.transactionDepth > 1) {\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        else {\n            await this.client.rollbackTransaction();\n            this.isTransactionActive = false;\n        }\n        this.transactionDepth -= 1;\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const raw = await this.client.query(query, parameters);\n        const result = new QueryResult();\n        result.raw = raw;\n        if ((raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"records\")) && Array.isArray(raw.records)) {\n            result.records = raw.records;\n        }\n        if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated;\n        }\n        if (!useStructuredResult) {\n            return result.raw;\n        }\n        return result;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}