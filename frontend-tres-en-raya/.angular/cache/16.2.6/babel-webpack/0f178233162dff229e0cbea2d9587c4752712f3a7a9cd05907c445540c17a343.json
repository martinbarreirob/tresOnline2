{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../socket.service\";\nimport * as i3 from \"@angular/common\";\nfunction GameComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"div\")(2, \"p\");\n    i0.ɵɵtext(3, \"Waiting For Opponent\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(4, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.winner);\n  }\n}\nfunction GameComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_1_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.emitRestartGame());\n    });\n    i0.ɵɵtemplate(2, GameComponent_div_1_div_2_Template, 2, 1, \"div\", 13);\n    i0.ɵɵelementStart(3, \"div\", 14);\n    i0.ɵɵtext(4, \"click for restart\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.gameOver);\n  }\n}\nfunction GameComponent_div_4_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \"TU TURNO\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, GameComponent_div_4_div_5_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.player.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.game.winX);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.currentPlayer === (ctx_r2.game == null ? null : ctx_r2.game.turn));\n  }\n}\nfunction GameComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.opponent == null ? null : ctx_r3.opponent.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.game.winX);\n  }\n}\nfunction GameComponent_div_7_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1, \"TU TURNO\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction GameComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, GameComponent_div_7_div_5_Template, 2, 0, \"div\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.player.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.game.winO);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.currentPlayer === (ctx_r4.game == null ? null : ctx_r4.game.turn));\n  }\n}\nfunction GameComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"div\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.opponent == null ? null : ctx_r5.opponent.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.game.winO);\n  }\n}\nfunction GameComponent_tr_11_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 21);\n    i0.ɵɵlistener(\"click\", function GameComponent_tr_11_td_1_Template_td_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const col_r14 = restoredCtx.$implicit;\n      const row_r12 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.makeMove(row_r12, col_r14));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r14 = ctx.$implicit;\n    const row_r12 = i0.ɵɵnextContext().$implicit;\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.board[row_r12][col_r14], \" \");\n  }\n}\nconst _c0 = function () {\n  return [0, 1, 2];\n};\nfunction GameComponent_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, GameComponent_tr_11_td_1_Template, 2, 1, \"td\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"degradadoX\": a0\n  };\n};\nconst _c2 = function (a0) {\n  return {\n    \"degradadoY\": a0\n  };\n};\nexport let GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor(http, socketService) {\n      this.http = http;\n      this.socketService = socketService;\n      this.baseUrl = 'http://192.168.0.42:3000/';\n      this.board = [['', '', ''], ['', '', ''], ['', '', '']]; //X\n      this.gameOver = false;\n      this.winner = null;\n      this.playerReadyRestart = false;\n      this.opponentReadyRestart = false;\n    }\n    ngOnInit() {\n      let playerLocalStorage = localStorage.getItem('player');\n      if (playerLocalStorage) {\n        this.player = JSON.parse(playerLocalStorage);\n      }\n      // Carga el juego en funcion del usuario que se acaba de registrar con el local storage\n      this.http.get(`${this.baseUrl}game/playerGame/${this.player.id}`).subscribe(game => {\n        this.game = game;\n        this.board = JSON.parse(game.board);\n        //Comprobar si Somos X o O\n        if (this.game.playerXid === this.player.id) {\n          this.currentPlayer = 'X';\n        } else if (this.game.playerOid === this.player.id) {\n          this.currentPlayer = 'O';\n          this.http.get(`${this.baseUrl}player/${this.game.playerXid}`).subscribe(playerX => {\n            this.opponent = playerX;\n          });\n        }\n      });\n      this.setupSocketListeners();\n    }\n    setupSocketListeners() {\n      this.socketService.listen('player-connected').subscribe(newPlayer => {\n        this.opponent = newPlayer;\n      });\n      this.socketService.listen('winner-updated').subscribe(game => {\n        this.game = game;\n        this.game.turn = null;\n      });\n      this.socketService.listen('game-updated').subscribe(game => {\n        this.game = game;\n        this.board = JSON.parse(this.game.board);\n        this.winner = this.checkWinner();\n        //Con esta condición solo lanzo el update winner en el cliente que gana y este emite un evento para que se lance en el otro usuario\n        if (this.winner === 'X' && this.game.playerXid === this.player.id) {\n          this.updateWinner(this.winner);\n        } else if (this.winner === 'O' && this.game.playerOid === this.player.id) {\n          this.updateWinner(this.winner);\n        }\n      });\n      this.socketService.listen('restart-game').subscribe(game => {\n        this.opponentReadyRestart = true;\n        if (this.opponentReadyRestart && this.playerReadyRestart === true) {\n          this.restartGame();\n          this.socketService.emit('restart-game', this.player);\n        }\n      });\n    }\n    makeMove(row, col) {\n      //Compruebo si hay oponente\n      if (!this.opponent) {\n        return;\n      }\n      //Compruebo si el juego está terminado\n      if (this.gameOver) {\n        return;\n      }\n      //Compruebo si la celda está vacia\n      if (this.board[row][col] !== '') {\n        return;\n      }\n      //Compruebo si es mi turno sindo X\n      if (this.game.turn === 'O' && this.game.playerXid === this.player.id) {\n        return;\n      }\n      //Compruebo si es mi turno sindo O\n      if (this.game.turn === 'X' && this.game.playerOid === this.player.id) {\n        return;\n      }\n      if (this.game.turn === 'X' && this.game.playerXid === this.player.id) {\n        this.board[row][col] = 'X';\n      } else if (this.game.turn === 'O' && this.game.playerOid === this.player.id) {\n        this.board[row][col] = 'O';\n      }\n      //Actualización del tablero\n      let boardString = JSON.stringify(this.board);\n      let nextTurn = this.game.turn === 'X' ? 'O' : 'X';\n      this.updateBoard(boardString, nextTurn);\n    }\n    checkWinner() {\n      // Comprobar filas, columnas y diagonales\n      const winningCombinations = [\n      // Filas\n      [this.board[0][0], this.board[0][1], this.board[0][2]], [this.board[1][0], this.board[1][1], this.board[1][2]], [this.board[2][0], this.board[2][1], this.board[2][2]],\n      // Columnas\n      [this.board[0][0], this.board[1][0], this.board[2][0]], [this.board[0][1], this.board[1][1], this.board[2][1]], [this.board[0][2], this.board[1][2], this.board[2][2]],\n      // Diagonales\n      [this.board[0][0], this.board[1][1], this.board[2][2]], [this.board[0][2], this.board[1][1], this.board[2][0]]];\n      for (let combination of winningCombinations) {\n        if (combination[0] && combination[0] === combination[1] && combination[1] === combination[2]) {\n          this.gameOver = true;\n          return combination[0];\n        }\n      }\n      // Comprobar empate\n      const isDraw = this.board.flat().every(cell => cell !== '');\n      if (isDraw) {\n        this.gameOver = true;\n      }\n      return null;\n    }\n    updateWinner(winner) {\n      let gameData;\n      if (winner === 'X') {\n        gameData = {\n          winX: ++this.game.winX\n        };\n      } else if (winner === 'O') {\n        gameData = {\n          winO: ++this.game.winO\n        };\n      }\n      this.http.put(`${this.baseUrl}game/${this.game.id}`, gameData).subscribe(game => {\n        this.socketService.emit('winner-updated', game);\n      });\n    }\n    updateBoard(board, turn) {\n      const gameData = {\n        board: board,\n        turn: turn\n      };\n      this.http.put(`${this.baseUrl}game/${this.game.id}`, gameData).subscribe(updateGame => {\n        this.socketService.emit(\"game-updated\", updateGame);\n      }, error => {\n        console.error('Error al actualizar el juego:', error);\n      });\n    }\n    emitRestartGame() {\n      this.playerReadyRestart = true;\n      this.socketService.emit('restart-game', this.player);\n    }\n    restartGame() {\n      let tableroLimpio = [['', '', ''], ['', '', ''], ['', '', '']];\n      let turno = Math.random() < 0.5 ? 'X' : 'O';\n      this.gameOver = false;\n      this.winner = null;\n      this.playerReadyRestart = false;\n      this.opponentReadyRestart = false;\n      this.updateBoard(JSON.stringify(tableroLimpio), turno);\n    }\n    static #_ = this.ɵfac = function GameComponent_Factory(t) {\n      return new (t || GameComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SocketService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GameComponent,\n      selectors: [[\"app-game\"]],\n      decls: 12,\n      vars: 14,\n      consts: [[\"class\", \"waiting text-center\", 4, \"ngIf\"], [\"class\", \"alert\", 4, \"ngIf\"], [1, \"game-container\"], [1, \"player-section\", \"bg-blue\", \"d-flex\", \"justify-content-center\", 3, \"ngClass\"], [\"class\", \"text-center mt-5\", 4, \"ngIf\"], [1, \"player-section\", \"bg-purple\", \"d-flex\", \"justify-content-center\", 3, \"ngClass\"], [1, \"board-container\"], [1, \"tres-en-raya\"], [4, \"ngFor\", \"ngForOf\"], [1, \"waiting\", \"text-center\"], [1, \"loader\"], [1, \"alert\"], [\"type\", \"button\", 1, \"alert-win\", \"text-center\", 3, \"click\"], [\"class\", \"alert-msg\", 4, \"ngIf\"], [1, \"alert-span\"], [1, \"alert-msg\"], [1, \"text-center\", \"mt-5\"], [1, \"playerName\"], [\"class\", \"turno\", 4, \"ngIf\"], [1, \"turno\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n      template: function GameComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, GameComponent_div_0_Template, 5, 0, \"div\", 0);\n          i0.ɵɵtemplate(1, GameComponent_div_1_Template, 5, 1, \"div\", 1);\n          i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n          i0.ɵɵtemplate(4, GameComponent_div_4_Template, 6, 3, \"div\", 4);\n          i0.ɵɵtemplate(5, GameComponent_div_5_Template, 5, 2, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 5);\n          i0.ɵɵtemplate(7, GameComponent_div_7_Template, 6, 3, \"div\", 4);\n          i0.ɵɵtemplate(8, GameComponent_div_8_Template, 5, 2, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"table\", 7);\n          i0.ɵɵtemplate(11, GameComponent_tr_11_Template, 2, 2, \"tr\", 8);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", (ctx.currentPlayer !== (ctx.game == null ? null : ctx.game.turn) || !ctx.opponent) && ctx.gameOver != true || ctx.playerReadyRestart);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.gameOver === true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c1, (ctx.game == null ? null : ctx.game.turn) === \"X\" || ctx.gameOver === true));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentPlayer === \"X\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentPlayer === \"O\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c2, (ctx.game == null ? null : ctx.game.turn) === \"O\" || ctx.gameOver === true));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentPlayer === \"O\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentPlayer === \"X\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(13, _c0));\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf],\n      styles: [\".game-container[_ngcontent-%COMP%]{position:relative;display:flex;height:100vh;overflow:hidden}.player-section[_ngcontent-%COMP%]{flex:1;font-size:2em}.playerName[_ngcontent-%COMP%]{font-size:10vw;font-weight:600}.turno[_ngcontent-%COMP%]{font-weight:200}.bg-blue[_ngcontent-%COMP%]{background-color:#3598ee;box-shadow:inset -11px 0 20px -12px #000000bf}.bg-purple[_ngcontent-%COMP%]{background-color:#ff9d41;box-shadow:inset 11px 0 20px -12px #000000bf}.waiting[_ngcontent-%COMP%]{position:absolute;top:0%;left:0%;width:100%;height:100%;background-color:#000000a1;z-index:9999;display:flex;align-items:center;justify-content:center}.waiting[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:2em;color:#fff;font-weight:700}.alert-win[_ngcontent-%COMP%]{background-color:#fff;padding:.1em 1em .3em;border-radius:1.2rem;box-shadow:#00000057 0 .1em 1em;text-decoration:none;position:relative;top:-15%;max-width:300px;width:90vmin;transition:transform .5s ease 0s}.alert-win[_ngcontent-%COMP%]:hover{transform:scale(1.05)}.alert[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;background-color:#0000001c;z-index:9999;display:flex;align-items:center;justify-content:center}.alert-msg[_ngcontent-%COMP%]{font-size:3em;font-weight:700}.alert-span[_ngcontent-%COMP%]{font-size:1em}.board-container[_ngcontent-%COMP%]{position:absolute;top:70%;left:50%;max-width:500px;max-height:500px;width:90vmin;height:90vmin;transform:translate(-50%,-50%);background-color:#fff;border-radius:10px;padding:20px;box-shadow:0 0 25px #3e3e3e80}.tres-en-raya[_ngcontent-%COMP%]{width:100%;height:100%;border-collapse:collapse}.tres-en-raya[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:.1em solid rgb(62,62,62);width:33.33%;height:33.33%;text-align:center;font-size:3em;font-weight:600}.tres-en-raya[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:first-child   td[_ngcontent-%COMP%]{border-top:none}.tres-en-raya[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:last-child   td[_ngcontent-%COMP%]{border-bottom:none}.tres-en-raya[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child{border-left:none}.tres-en-raya[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child{border-right:none}.degradadoX[_ngcontent-%COMP%]{background:rgb(0,212,255);background:radial-gradient(circle,rgb(113,227,250) 0%,rgb(30,128,213) 45%,rgb(18,1,206) 100%);background-size:400% 400%;animation:_ngcontent-%COMP%_gradient 2s ease infinite}.degradadoY[_ngcontent-%COMP%]{background:rgb(255,194,87);background:radial-gradient(circle,rgba(255,194,87,1) 0%,rgba(255,117,0,1) 68%,rgb(179,30,0) 100%);background-size:400% 400%;animation:_ngcontent-%COMP%_gradient 2s ease infinite}@keyframes _ngcontent-%COMP%_gradient{0%{background-position:0% 50%}50%{background-position:100% 50%}to{background-position:0% 50%}}.loader[_ngcontent-%COMP%]{width:48px;height:48px;border:5px solid #FFF;border-bottom-color:transparent;border-radius:50%;display:inline-block;box-sizing:border-box;animation:_ngcontent-%COMP%_rotation 1s linear infinite;position:absolute;top:55%}@keyframes _ngcontent-%COMP%_rotation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"]\n    });\n  }\n  return GameComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}