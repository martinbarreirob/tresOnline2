{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder extends QueryBuilder {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connectionOrQueryBuilder, queryRunner) {\n    super(connectionOrQueryBuilder, queryRunner);\n    this[\"@instanceof\"] = Symbol.for(\"DeleteQueryBuilder\");\n    this.expressionMap.aliasNamePrefixingEnabled = false;\n  }\n  // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets generated SQL query without parameters being replaced.\n   */\n  getQuery() {\n    let sql = this.createComment();\n    sql += this.createCteExpression();\n    sql += this.createDeleteExpression();\n    return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n  }\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n  execute() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const [sql, parameters] = _this.getQueryAndParameters();\n      const queryRunner = _this.obtainQueryRunner();\n      let transactionStartedByUs = false;\n      try {\n        // start transaction if it was enabled\n        if (_this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n          yield queryRunner.startTransaction();\n          transactionStartedByUs = true;\n        }\n        // call before deletion methods in listeners and subscribers\n        if (_this.expressionMap.callListeners === true && _this.expressionMap.mainAlias.hasMetadata) {\n          yield queryRunner.broadcaster.broadcast(\"BeforeRemove\", _this.expressionMap.mainAlias.metadata);\n        }\n        // execute query\n        const queryResult = yield queryRunner.query(sql, parameters, true);\n        const deleteResult = DeleteResult.from(queryResult);\n        // call after deletion methods in listeners and subscribers\n        if (_this.expressionMap.callListeners === true && _this.expressionMap.mainAlias.hasMetadata) {\n          yield queryRunner.broadcaster.broadcast(\"AfterRemove\", _this.expressionMap.mainAlias.metadata);\n        }\n        // close transaction if we started it\n        if (transactionStartedByUs) yield queryRunner.commitTransaction();\n        return deleteResult;\n      } catch (error) {\n        // rollback transaction if we started it\n        if (transactionStartedByUs) {\n          try {\n            yield queryRunner.rollbackTransaction();\n          } catch (rollbackError) {}\n        }\n        throw error;\n      } finally {\n        if (queryRunner !== _this.queryRunner) {\n          // means we created our own query runner\n          yield queryRunner.release();\n        }\n      }\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Specifies FROM which entity's table select/update/delete will be executed.\n   * Also sets a main string alias of the selection data.\n   */\n  from(entityTarget, aliasName) {\n    entityTarget = InstanceChecker.isEntitySchema(entityTarget) ? entityTarget.options.name : entityTarget;\n    const mainAlias = this.createFromAlias(entityTarget, aliasName);\n    this.expressionMap.setMainAlias(mainAlias);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   * Additionally you can add parameters used in where expression.\n   */\n  where(where, parameters) {\n    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n    const condition = this.getWhereCondition(where);\n    if (condition) this.expressionMap.wheres = [{\n      type: \"simple\",\n      condition: condition\n    }];\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new AND WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n  andWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"and\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new OR WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n  orWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"or\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder with a condition for the given ids.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   */\n  whereInIds(ids) {\n    return this.where(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n  andWhereInIds(ids) {\n    return this.andWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new OR WHERE with conditions for the given ids.\n   */\n  orWhereInIds(ids) {\n    return this.orWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  output(output) {\n    return this.returning(output);\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  returning(returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n      throw new ReturningStatementNotSupportedError();\n    }\n    this.expressionMap.returning = returning;\n    return this;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates DELETE express used to perform query.\n   */\n  createDeleteExpression() {\n    const tableName = this.getTableName(this.getMainTableName());\n    const whereExpression = this.createWhereExpression();\n    const returningExpression = this.createReturningExpression(\"delete\");\n    if (returningExpression === \"\") {\n      return `DELETE FROM ${tableName}${whereExpression}`;\n    }\n    if (this.connection.driver.options.type === \"mssql\") {\n      return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n    }\n    return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n  }\n}","map":{"version":3,"names":["QueryBuilder","DeleteResult","ReturningStatementNotSupportedError","InstanceChecker","DeleteQueryBuilder","constructor","connectionOrQueryBuilder","queryRunner","Symbol","for","expressionMap","aliasNamePrefixingEnabled","getQuery","sql","createComment","createCteExpression","createDeleteExpression","replacePropertyNamesForTheWholeQuery","trim","execute","_this","_asyncToGenerator","parameters","getQueryAndParameters","obtainQueryRunner","transactionStartedByUs","useTransaction","isTransactionActive","startTransaction","callListeners","mainAlias","hasMetadata","broadcaster","broadcast","metadata","queryResult","query","deleteResult","from","commitTransaction","error","rollbackTransaction","rollbackError","release","entityTarget","aliasName","isEntitySchema","options","name","createFromAlias","setMainAlias","where","wheres","condition","getWhereCondition","type","setParameters","andWhere","push","orWhere","whereInIds","ids","getWhereInIdsCondition","andWhereInIds","orWhereInIds","output","returning","connection","driver","isReturningSqlSupported","tableName","getTableName","getMainTableName","whereExpression","createWhereExpression","returningExpression","createReturningExpression"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js"],"sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder extends QueryBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connectionOrQueryBuilder, queryRunner) {\n        super(connectionOrQueryBuilder, queryRunner);\n        this[\"@instanceof\"] = Symbol.for(\"DeleteQueryBuilder\");\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createComment();\n        sql += this.createCteExpression();\n        sql += this.createDeleteExpression();\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            // call before deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"BeforeRemove\", this.expressionMap.mainAlias.metadata);\n            }\n            // execute query\n            const queryResult = await queryRunner.query(sql, parameters, true);\n            const deleteResult = DeleteResult.from(queryResult);\n            // call after deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                await queryRunner.broadcaster.broadcast(\"AfterRemove\", this.expressionMap.mainAlias.metadata);\n            }\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n            return deleteResult;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from(entityTarget, aliasName) {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where);\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder with a condition for the given ids.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     */\n    whereInIds(ids) {\n        return this.where(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids) {\n        return this.andWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids) {\n        return this.orWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    output(output) {\n        return this.returning(output);\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n            throw new ReturningStatementNotSupportedError();\n        }\n        this.expressionMap.returning = returning;\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression(\"delete\");\n        if (returningExpression === \"\") {\n            return `DELETE FROM ${tableName}${whereExpression}`;\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n        }\n        return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}