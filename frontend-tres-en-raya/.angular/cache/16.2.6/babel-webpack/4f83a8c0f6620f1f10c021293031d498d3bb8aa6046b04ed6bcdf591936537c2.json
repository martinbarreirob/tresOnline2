{"ast":null,"code":"import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { DefaultNamingStrategy } from \"./DefaultNamingStrategy\";\nimport { TypeORMError } from \"../error\";\n/**\n * Naming strategy for legacy Oracle database with 30 bytes identifier limit.\n *\n * Currently, only column name must be shorten in order to avoid ORA-00972.\n * Issues with other identifiers were fixed.\n */\nexport class LegacyOracleNamingStrategy extends DefaultNamingStrategy {\n  constructor(shortenStrategy = \"hash\") {\n    super();\n    this.IDENTIFIER_MAX_SIZE = 30;\n    this.DEFAULT_COLUMN_PREFIX = \"COL_\";\n    this.shortenStrategy = shortenStrategy;\n  }\n  columnName(propertyName, customName, embeddedPrefixes) {\n    const longName = super.columnName(propertyName, customName, embeddedPrefixes);\n    if (this.shortenStrategy === \"truncate\") {\n      return this.truncateIdentifier(longName);\n    } else if (this.shortenStrategy === \"hash\") {\n      return this.hashIdentifier(longName, this.DEFAULT_COLUMN_PREFIX);\n    } else {\n      throw new TypeORMError(`Invalid shortenStrategy`);\n    }\n  }\n  hashIdentifier(input, prefix) {\n    if (prefix.length >= this.IDENTIFIER_MAX_SIZE) {\n      throw new TypeORMError(`Prefix must be shorter than IDENTIFIER_MAX_SIZE`);\n    }\n    return prefix + RandomGenerator.sha1(input).substring(0, this.IDENTIFIER_MAX_SIZE - prefix.length);\n  }\n  truncateIdentifier(input) {\n    if (input.length > this.IDENTIFIER_MAX_SIZE) {\n      return input.substring(0, this.IDENTIFIER_MAX_SIZE);\n    } else {\n      return input;\n    }\n  }\n}","map":{"version":3,"names":["RandomGenerator","DefaultNamingStrategy","TypeORMError","LegacyOracleNamingStrategy","constructor","shortenStrategy","IDENTIFIER_MAX_SIZE","DEFAULT_COLUMN_PREFIX","columnName","propertyName","customName","embeddedPrefixes","longName","truncateIdentifier","hashIdentifier","input","prefix","length","sha1","substring"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/naming-strategy/LegacyOracleNamingStrategy.js"],"sourcesContent":["import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { DefaultNamingStrategy } from \"./DefaultNamingStrategy\";\nimport { TypeORMError } from \"../error\";\n/**\n * Naming strategy for legacy Oracle database with 30 bytes identifier limit.\n *\n * Currently, only column name must be shorten in order to avoid ORA-00972.\n * Issues with other identifiers were fixed.\n */\nexport class LegacyOracleNamingStrategy extends DefaultNamingStrategy {\n    constructor(shortenStrategy = \"hash\") {\n        super();\n        this.IDENTIFIER_MAX_SIZE = 30;\n        this.DEFAULT_COLUMN_PREFIX = \"COL_\";\n        this.shortenStrategy = shortenStrategy;\n    }\n    columnName(propertyName, customName, embeddedPrefixes) {\n        const longName = super.columnName(propertyName, customName, embeddedPrefixes);\n        if (this.shortenStrategy === \"truncate\") {\n            return this.truncateIdentifier(longName);\n        }\n        else if (this.shortenStrategy === \"hash\") {\n            return this.hashIdentifier(longName, this.DEFAULT_COLUMN_PREFIX);\n        }\n        else {\n            throw new TypeORMError(`Invalid shortenStrategy`);\n        }\n    }\n    hashIdentifier(input, prefix) {\n        if (prefix.length >= this.IDENTIFIER_MAX_SIZE) {\n            throw new TypeORMError(`Prefix must be shorter than IDENTIFIER_MAX_SIZE`);\n        }\n        return (prefix +\n            RandomGenerator.sha1(input).substring(0, this.IDENTIFIER_MAX_SIZE - prefix.length));\n    }\n    truncateIdentifier(input) {\n        if (input.length > this.IDENTIFIER_MAX_SIZE) {\n            return input.substring(0, this.IDENTIFIER_MAX_SIZE);\n        }\n        else {\n            return input;\n        }\n    }\n}\n\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,yBAAyB;AACzD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,YAAY,QAAQ,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASF,qBAAqB,CAAC;EAClEG,WAAWA,CAACC,eAAe,GAAG,MAAM,EAAE;IAClC,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,qBAAqB,GAAG,MAAM;IACnC,IAAI,CAACF,eAAe,GAAGA,eAAe;EAC1C;EACAG,UAAUA,CAACC,YAAY,EAAEC,UAAU,EAAEC,gBAAgB,EAAE;IACnD,MAAMC,QAAQ,GAAG,KAAK,CAACJ,UAAU,CAACC,YAAY,EAAEC,UAAU,EAAEC,gBAAgB,CAAC;IAC7E,IAAI,IAAI,CAACN,eAAe,KAAK,UAAU,EAAE;MACrC,OAAO,IAAI,CAACQ,kBAAkB,CAACD,QAAQ,CAAC;IAC5C,CAAC,MACI,IAAI,IAAI,CAACP,eAAe,KAAK,MAAM,EAAE;MACtC,OAAO,IAAI,CAACS,cAAc,CAACF,QAAQ,EAAE,IAAI,CAACL,qBAAqB,CAAC;IACpE,CAAC,MACI;MACD,MAAM,IAAIL,YAAY,CAAE,yBAAwB,CAAC;IACrD;EACJ;EACAY,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC1B,IAAIA,MAAM,CAACC,MAAM,IAAI,IAAI,CAACX,mBAAmB,EAAE;MAC3C,MAAM,IAAIJ,YAAY,CAAE,iDAAgD,CAAC;IAC7E;IACA,OAAQc,MAAM,GACVhB,eAAe,CAACkB,IAAI,CAACH,KAAK,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,IAAI,CAACb,mBAAmB,GAAGU,MAAM,CAACC,MAAM,CAAC;EAC1F;EACAJ,kBAAkBA,CAACE,KAAK,EAAE;IACtB,IAAIA,KAAK,CAACE,MAAM,GAAG,IAAI,CAACX,mBAAmB,EAAE;MACzC,OAAOS,KAAK,CAACI,SAAS,CAAC,CAAC,EAAE,IAAI,CAACb,mBAAmB,CAAC;IACvD,CAAC,MACI;MACD,OAAOS,KAAK;IAChB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}