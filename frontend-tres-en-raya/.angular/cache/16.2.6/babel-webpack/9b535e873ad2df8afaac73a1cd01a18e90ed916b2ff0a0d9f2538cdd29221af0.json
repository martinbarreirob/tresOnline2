{"ast":null,"code":"import { MissingDriverError } from \"../error/MissingDriverError\";\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\";\nimport { MongoDriver } from \"./mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\";\nimport { CordovaDriver } from \"./cordova/CordovaDriver\";\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\";\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\";\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"./mysql/MysqlDriver\";\nimport { PostgresDriver } from \"./postgres/PostgresDriver\";\nimport { ExpoDriver } from \"./expo/ExpoDriver\";\nimport { AuroraMysqlDriver } from \"./aurora-mysql/AuroraMysqlDriver\";\nimport { AuroraPostgresDriver } from \"./aurora-postgres/AuroraPostgresDriver\";\nimport { SapDriver } from \"./sap/SapDriver\";\nimport { BetterSqlite3Driver } from \"./better-sqlite3/BetterSqlite3Driver\";\nimport { CapacitorDriver } from \"./capacitor/CapacitorDriver\";\nimport { SpannerDriver } from \"./spanner/SpannerDriver\";\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n  /**\n   * Creates a new driver depend on a given connection's driver type.\n   */\n  create(connection) {\n    const {\n      type\n    } = connection.options;\n    switch (type) {\n      case \"mysql\":\n        return new MysqlDriver(connection);\n      case \"postgres\":\n        return new PostgresDriver(connection);\n      case \"cockroachdb\":\n        return new CockroachDriver(connection);\n      case \"sap\":\n        return new SapDriver(connection);\n      case \"mariadb\":\n        return new MysqlDriver(connection);\n      case \"sqlite\":\n        return new SqliteDriver(connection);\n      case \"better-sqlite3\":\n        return new BetterSqlite3Driver(connection);\n      case \"cordova\":\n        return new CordovaDriver(connection);\n      case \"nativescript\":\n        return new NativescriptDriver(connection);\n      case \"react-native\":\n        return new ReactNativeDriver(connection);\n      case \"sqljs\":\n        return new SqljsDriver(connection);\n      case \"oracle\":\n        return new OracleDriver(connection);\n      case \"mssql\":\n        return new SqlServerDriver(connection);\n      case \"mongodb\":\n        return new MongoDriver(connection);\n      case \"expo\":\n        return new ExpoDriver(connection);\n      case \"aurora-mysql\":\n        return new AuroraMysqlDriver(connection);\n      case \"aurora-postgres\":\n        return new AuroraPostgresDriver(connection);\n      case \"capacitor\":\n        return new CapacitorDriver(connection);\n      case \"spanner\":\n        return new SpannerDriver(connection);\n      default:\n        throw new MissingDriverError(type, [\"aurora-mysql\", \"aurora-postgres\", \"better-sqlite3\", \"capacitor\", \"cockroachdb\", \"cordova\", \"expo\", \"mariadb\", \"mongodb\", \"mssql\", \"mysql\", \"nativescript\", \"oracle\", \"postgres\", \"react-native\", \"sap\", \"sqlite\", \"sqljs\", \"spanner\"]);\n    }\n  }\n}","map":{"version":3,"names":["MissingDriverError","CockroachDriver","MongoDriver","SqlServerDriver","OracleDriver","SqliteDriver","CordovaDriver","ReactNativeDriver","NativescriptDriver","SqljsDriver","MysqlDriver","PostgresDriver","ExpoDriver","AuroraMysqlDriver","AuroraPostgresDriver","SapDriver","BetterSqlite3Driver","CapacitorDriver","SpannerDriver","DriverFactory","create","connection","type","options"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/DriverFactory.js"],"sourcesContent":["import { MissingDriverError } from \"../error/MissingDriverError\";\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\";\nimport { MongoDriver } from \"./mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\";\nimport { CordovaDriver } from \"./cordova/CordovaDriver\";\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\";\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\";\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"./mysql/MysqlDriver\";\nimport { PostgresDriver } from \"./postgres/PostgresDriver\";\nimport { ExpoDriver } from \"./expo/ExpoDriver\";\nimport { AuroraMysqlDriver } from \"./aurora-mysql/AuroraMysqlDriver\";\nimport { AuroraPostgresDriver } from \"./aurora-postgres/AuroraPostgresDriver\";\nimport { SapDriver } from \"./sap/SapDriver\";\nimport { BetterSqlite3Driver } from \"./better-sqlite3/BetterSqlite3Driver\";\nimport { CapacitorDriver } from \"./capacitor/CapacitorDriver\";\nimport { SpannerDriver } from \"./spanner/SpannerDriver\";\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection) {\n        const { type } = connection.options;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"sap\":\n                return new SapDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"better-sqlite3\":\n                return new BetterSqlite3Driver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            case \"aurora-mysql\":\n                return new AuroraMysqlDriver(connection);\n            case \"aurora-postgres\":\n                return new AuroraPostgresDriver(connection);\n            case \"capacitor\":\n                return new CapacitorDriver(connection);\n            case \"spanner\":\n                return new SpannerDriver(connection);\n            default:\n                throw new MissingDriverError(type, [\n                    \"aurora-mysql\",\n                    \"aurora-postgres\",\n                    \"better-sqlite3\",\n                    \"capacitor\",\n                    \"cockroachdb\",\n                    \"cordova\",\n                    \"expo\",\n                    \"mariadb\",\n                    \"mongodb\",\n                    \"mssql\",\n                    \"mysql\",\n                    \"nativescript\",\n                    \"oracle\",\n                    \"postgres\",\n                    \"react-native\",\n                    \"sap\",\n                    \"sqlite\",\n                    \"sqljs\",\n                    \"spanner\",\n                ]);\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}