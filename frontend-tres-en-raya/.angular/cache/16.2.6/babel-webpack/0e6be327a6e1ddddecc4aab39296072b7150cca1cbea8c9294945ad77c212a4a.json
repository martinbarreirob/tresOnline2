{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GameService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/game'; // Asume que tu backend corre en el puerto 3000\n  }\n\n  getGames() {\n    return this.http.get(this.baseUrl);\n  }\n  getGame(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["GameService","constructor","http","baseUrl","getGames","get","getGame","id","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\game.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n\n  private baseUrl = 'http://localhost:3000/game'; // Asume que tu backend corre en el puerto 3000\n\n  constructor(private http: HttpClient) { }\n\n  getGames(): Observable<any> {\n    return this.http.get(this.baseUrl);\n  }\n\n  getGame(id: number): Observable<any> {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  // ... otros métodos para POST, PUT, DELETE, etc.\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,4BAA4B,CAAC,CAAC;EAER;;EAExCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,OAAO,CAAC;EACpC;EAEAG,OAAOA,CAACC,EAAU;IAChB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,IAAII,EAAE,EAAE,CAAC;EAC/C;EAAC,QAAAC,CAAA,G;qBAZUR,WAAW,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXb,WAAW;IAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}