{"ast":null,"code":"/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n  /**\n   * Gets given's entity all inherited classes.\n   * Gives in order from parents to children.\n   * For example Post extends ContentModel which extends Unit it will give\n   * [Unit, ContentModel, Post]\n   */\n  static getInheritanceTree(entity) {\n    const tree = [entity];\n    const getPrototypeOf = object => {\n      const proto = Object.getPrototypeOf(object);\n      if (proto && proto.name) {\n        tree.push(proto);\n        getPrototypeOf(proto);\n      }\n    };\n    getPrototypeOf(entity);\n    return tree;\n  }\n  /**\n   * Checks if this table is inherited from another table.\n   */\n  static isInherited(target1, target2) {\n    return target1.prototype instanceof target2;\n  }\n  /**\n   * Filters given array of targets by a given classes.\n   * If classes are not given, then it returns array itself.\n   */\n  static filterByTarget(array, classes) {\n    if (!classes) return array;\n    return array.filter(item => item.target && classes.indexOf(item.target) !== -1);\n  }\n}","map":{"version":3,"names":["MetadataUtils","getInheritanceTree","entity","tree","getPrototypeOf","object","proto","Object","name","push","isInherited","target1","target2","prototype","filterByTarget","array","classes","filter","item","target","indexOf"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata-builder/MetadataUtils.js"],"sourcesContent":["/**\n * Metadata args utility functions.\n */\nexport class MetadataUtils {\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    static getInheritanceTree(entity) {\n        const tree = [entity];\n        const getPrototypeOf = (object) => {\n            const proto = Object.getPrototypeOf(object);\n            if (proto && proto.name) {\n                tree.push(proto);\n                getPrototypeOf(proto);\n            }\n        };\n        getPrototypeOf(entity);\n        return tree;\n    }\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    static isInherited(target1, target2) {\n        return target1.prototype instanceof target2;\n    }\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    static filterByTarget(array, classes) {\n        if (!classes)\n            return array;\n        return array.filter((item) => item.target && classes.indexOf(item.target) !== -1);\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,CAAC;EACvB;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,kBAAkBA,CAACC,MAAM,EAAE;IAC9B,MAAMC,IAAI,GAAG,CAACD,MAAM,CAAC;IACrB,MAAME,cAAc,GAAIC,MAAM,IAAK;MAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACH,cAAc,CAACC,MAAM,CAAC;MAC3C,IAAIC,KAAK,IAAIA,KAAK,CAACE,IAAI,EAAE;QACrBL,IAAI,CAACM,IAAI,CAACH,KAAK,CAAC;QAChBF,cAAc,CAACE,KAAK,CAAC;MACzB;IACJ,CAAC;IACDF,cAAc,CAACF,MAAM,CAAC;IACtB,OAAOC,IAAI;EACf;EACA;AACJ;AACA;EACI,OAAOO,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACjC,OAAOD,OAAO,CAACE,SAAS,YAAYD,OAAO;EAC/C;EACA;AACJ;AACA;AACA;EACI,OAAOE,cAAcA,CAACC,KAAK,EAAEC,OAAO,EAAE;IAClC,IAAI,CAACA,OAAO,EACR,OAAOD,KAAK;IAChB,OAAOA,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,MAAM,IAAIH,OAAO,CAACI,OAAO,CAACF,IAAI,CAACC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;EACrF;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}