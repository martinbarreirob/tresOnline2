{"ast":null,"code":"/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n  /**\n   * Checks if given value is a string representation of alias property,\n   * e.g. \"post.category\" or \"post.id\".\n   */\n  static isAliasProperty(str) {\n    // alias property must be a string and must have a dot separator\n    if (typeof str !== \"string\" || str.indexOf(\".\") === -1) return false;\n    // extra alias and its property relation\n    const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n    if (!aliasName || !propertyName) return false;\n    // alias and property must be represented in a special format\n    // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n    // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n    //     return false;\n    // make sure string is not a subquery\n    if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1) return false;\n    return true;\n  }\n}","map":{"version":3,"names":["QueryBuilderUtils","isAliasProperty","str","indexOf","aliasName","propertyName","split"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js"],"sourcesContent":["/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str) {\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n        // extra alias and its property relation\n        const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n        if (!aliasName || !propertyName)\n            return false;\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1)\n            return false;\n        return true;\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,CAAC;EAC3B;AACJ;AACA;AACA;EACI,OAAOC,eAAeA,CAACC,GAAG,EAAE;IACxB;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAClD,OAAO,KAAK;IAChB;IACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,IAAI,CAACF,SAAS,IAAI,CAACC,YAAY,EAC3B,OAAO,KAAK;IAChB;IACA;IACA;IACA;IACA;IACA,IAAIH,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAID,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAClD,OAAO,KAAK;IAChB,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}