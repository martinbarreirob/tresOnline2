{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TypeORMError } from \"../../error\";\nimport { MetadataTableType } from \"../types/MetadataTableType\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class AuroraMysqlQueryRunner extends BaseQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver, client) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.client = client;\n    this.broadcaster = new Broadcaster(this);\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n  connect() {\n    return _asyncToGenerator(function* () {\n      return {};\n    })();\n  }\n  /**\n   * Releases used database connection.\n   * You cannot use query runner methods once its released.\n   */\n  release() {\n    this.isReleased = true;\n    if (this.databaseConnection) this.databaseConnection.release();\n    return Promise.resolve();\n  }\n  /**\n   * Starts transaction on the current connection.\n   */\n  startTransaction(isolationLevel) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.isTransactionActive = true;\n      try {\n        yield _this.broadcaster.broadcast(\"BeforeTransactionStart\");\n      } catch (err) {\n        _this.isTransactionActive = false;\n        throw err;\n      }\n      if (_this.transactionDepth === 0) {\n        yield _this.client.startTransaction();\n      } else {\n        yield _this.query(`SAVEPOINT typeorm_${_this.transactionDepth}`);\n      }\n      _this.transactionDepth += 1;\n      yield _this.broadcaster.broadcast(\"AfterTransactionStart\");\n    })();\n  }\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  commitTransaction() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.isTransactionActive) throw new TransactionNotStartedError();\n      yield _this2.broadcaster.broadcast(\"BeforeTransactionCommit\");\n      if (_this2.transactionDepth > 1) {\n        yield _this2.query(`RELEASE SAVEPOINT typeorm_${_this2.transactionDepth - 1}`);\n      } else {\n        yield _this2.client.commitTransaction();\n        _this2.isTransactionActive = false;\n      }\n      _this2.transactionDepth -= 1;\n      yield _this2.broadcaster.broadcast(\"AfterTransactionCommit\");\n    })();\n  }\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  rollbackTransaction() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.isTransactionActive) throw new TransactionNotStartedError();\n      yield _this3.broadcaster.broadcast(\"BeforeTransactionRollback\");\n      if (_this3.transactionDepth > 1) {\n        yield _this3.query(`ROLLBACK TO SAVEPOINT typeorm_${_this3.transactionDepth - 1}`);\n      } else {\n        yield _this3.client.rollbackTransaction();\n        _this3.isTransactionActive = false;\n      }\n      _this3.transactionDepth -= 1;\n      yield _this3.broadcaster.broadcast(\"AfterTransactionRollback\");\n    })();\n  }\n  /**\n   * Executes a raw SQL query.\n   */\n  query(query, parameters, useStructuredResult = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.isReleased) throw new QueryRunnerAlreadyReleasedError();\n      const raw = yield _this4.client.query(query, parameters);\n      const result = new QueryResult();\n      result.raw = raw;\n      if ((raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"records\")) && Array.isArray(raw.records)) {\n        result.records = raw.records;\n      }\n      if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n        result.affected = raw.numberOfRecordsUpdated;\n      }\n      if (!useStructuredResult) {\n        return result.raw;\n      }\n      return result;\n    })();\n  }\n  /**\n   * Returns raw data stream.\n   */\n  stream(query, parameters, onEnd, onError) {\n    var _this5 = this;\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (ok, fail) {\n        try {\n          const databaseConnection = yield _this5.connect();\n          const stream = databaseConnection.query(query, parameters);\n          if (onEnd) stream.on(\"end\", onEnd);\n          if (onError) stream.on(\"error\", onError);\n          ok(stream);\n        } catch (err) {\n          fail(err);\n        }\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Returns all available database names including system databases.\n   */\n  getDatabases() {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve([]);\n    })();\n  }\n  /**\n   * Returns all available schema names including system schemas.\n   * If database parameter specified, returns schemas of that database.\n   */\n  getSchemas(database) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql driver does not support table schemas`);\n    })();\n  }\n  /**\n   * Checks if database with the given name exist.\n   */\n  hasDatabase(database) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const result = yield _this6.query(`SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\` WHERE \\`SCHEMA_NAME\\` = '${database}'`);\n      return result.length ? true : false;\n    })();\n  }\n  /**\n   * Loads currently using database\n   */\n  getCurrentDatabase() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const query = yield _this7.query(`SELECT DATABASE() AS \\`db_name\\``);\n      return query[0][\"db_name\"];\n    })();\n  }\n  /**\n   * Checks if schema with the given name exist.\n   */\n  hasSchema(schema) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql driver does not support table schemas`);\n    })();\n  }\n  /**\n   * Loads currently using database schema\n   */\n  getCurrentSchema() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const query = yield _this8.query(`SELECT SCHEMA() AS \\`schema_name\\``);\n      return query[0][\"schema_name\"];\n    })();\n  }\n  /**\n   * Checks if table with the given name exist in the database.\n   */\n  hasTable(tableOrName) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const parsedTableName = _this9.driver.parseTableName(tableOrName);\n      const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}'`;\n      const result = yield _this9.query(sql);\n      return result.length ? true : false;\n    })();\n  }\n  /**\n   * Checks if column with the given name exist in the given table.\n   */\n  hasColumn(tableOrName, column) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const parsedTableName = _this10.driver.parseTableName(tableOrName);\n      const columnName = InstanceChecker.isTableColumn(column) ? column.name : column;\n      const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`;\n      const result = yield _this10.query(sql);\n      return result.length ? true : false;\n    })();\n  }\n  /**\n   * Creates a new database.\n   */\n  createDatabase(database, ifNotExist) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const up = ifNotExist ? `CREATE DATABASE IF NOT EXISTS \\`${database}\\`` : `CREATE DATABASE \\`${database}\\``;\n      const down = `DROP DATABASE \\`${database}\\``;\n      yield _this11.executeQueries(new Query(up), new Query(down));\n    })();\n  }\n  /**\n   * Drops database.\n   */\n  dropDatabase(database, ifExist) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const up = ifExist ? `DROP DATABASE IF EXISTS \\`${database}\\`` : `DROP DATABASE \\`${database}\\``;\n      const down = `CREATE DATABASE \\`${database}\\``;\n      yield _this12.executeQueries(new Query(up), new Query(down));\n    })();\n  }\n  /**\n   * Creates a new table schema.\n   */\n  createSchema(schemaPath, ifNotExist) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`Schema create queries are not supported by MySql driver.`);\n    })();\n  }\n  /**\n   * Drops table schema.\n   */\n  dropSchema(schemaPath, ifExist) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`Schema drop queries are not supported by MySql driver.`);\n    })();\n  }\n  /**\n   * Creates a new table.\n   */\n  createTable(table, ifNotExist = false, createForeignKeys = true) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      if (ifNotExist) {\n        const isTableExist = yield _this13.hasTable(table);\n        if (isTableExist) return Promise.resolve();\n      }\n      const upQueries = [];\n      const downQueries = [];\n      upQueries.push(_this13.createTableSql(table, createForeignKeys));\n      downQueries.push(_this13.dropTableSql(table));\n      // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order\n      // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index\n      // if it related to the foreign key.\n      // createTable does not need separate method to create indices, because it create indices in the same query with table creation.\n      table.indices.forEach(index => downQueries.push(_this13.dropIndexSql(table, index)));\n      // if createForeignKeys is true, we must drop created foreign keys in down query.\n      // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n      if (createForeignKeys) table.foreignKeys.forEach(foreignKey => downQueries.push(_this13.dropForeignKeySql(table, foreignKey)));\n      return _this13.executeQueries(upQueries, downQueries);\n    })();\n  }\n  /**\n   * Drop the table.\n   */\n  dropTable(target, ifExist, dropForeignKeys = true) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n      // to perform drop queries for foreign keys and indices.\n      if (ifExist) {\n        const isTableExist = yield _this14.hasTable(target);\n        if (!isTableExist) return Promise.resolve();\n      }\n      // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n      const createForeignKeys = dropForeignKeys;\n      const tablePath = _this14.getTablePath(target);\n      const table = yield _this14.getCachedTable(tablePath);\n      const upQueries = [];\n      const downQueries = [];\n      if (dropForeignKeys) table.foreignKeys.forEach(foreignKey => upQueries.push(_this14.dropForeignKeySql(table, foreignKey)));\n      table.indices.forEach(index => upQueries.push(_this14.dropIndexSql(table, index)));\n      upQueries.push(_this14.dropTableSql(table));\n      downQueries.push(_this14.createTableSql(table, createForeignKeys));\n      yield _this14.executeQueries(upQueries, downQueries);\n    })();\n  }\n  /**\n   * Creates a new view.\n   */\n  createView(view, syncWithMetadata = false) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      const upQueries = [];\n      const downQueries = [];\n      upQueries.push(_this15.createViewSql(view));\n      if (syncWithMetadata) upQueries.push(yield _this15.insertViewDefinitionSql(view));\n      downQueries.push(_this15.dropViewSql(view));\n      if (syncWithMetadata) downQueries.push(yield _this15.deleteViewDefinitionSql(view));\n      yield _this15.executeQueries(upQueries, downQueries);\n    })();\n  }\n  /**\n   * Drops the view.\n   */\n  dropView(target) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const viewName = InstanceChecker.isView(target) ? target.name : target;\n      const view = yield _this16.getCachedView(viewName);\n      const upQueries = [];\n      const downQueries = [];\n      upQueries.push(yield _this16.deleteViewDefinitionSql(view));\n      upQueries.push(_this16.dropViewSql(view));\n      downQueries.push(yield _this16.insertViewDefinitionSql(view));\n      downQueries.push(_this16.createViewSql(view));\n      yield _this16.executeQueries(upQueries, downQueries);\n    })();\n  }\n  /**\n   * Renames a table.\n   */\n  renameTable(oldTableOrName, newTableName) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const upQueries = [];\n      const downQueries = [];\n      const oldTable = InstanceChecker.isTable(oldTableOrName) ? oldTableOrName : yield _this17.getCachedTable(oldTableOrName);\n      const newTable = oldTable.clone();\n      const {\n        database\n      } = _this17.driver.parseTableName(oldTable);\n      newTable.name = database ? `${database}.${newTableName}` : newTableName;\n      // rename table\n      upQueries.push(new Query(`RENAME TABLE ${_this17.escapePath(oldTable)} TO ${_this17.escapePath(newTable)}`));\n      downQueries.push(new Query(`RENAME TABLE ${_this17.escapePath(newTable)} TO ${_this17.escapePath(oldTable)}`));\n      // rename index constraints\n      newTable.indices.forEach(index => {\n        // build new constraint name\n        const columnNames = index.columnNames.map(column => `\\`${column}\\``).join(\", \");\n        const newIndexName = _this17.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n        // build queries\n        let indexType = \"\";\n        if (index.isUnique) indexType += \"UNIQUE \";\n        if (index.isSpatial) indexType += \"SPATIAL \";\n        if (index.isFulltext) indexType += \"FULLTEXT \";\n        upQueries.push(new Query(`ALTER TABLE ${_this17.escapePath(newTable)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`));\n        downQueries.push(new Query(`ALTER TABLE ${_this17.escapePath(newTable)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`));\n        // replace constraint name\n        index.name = newIndexName;\n      });\n      // rename foreign key constraint\n      newTable.foreignKeys.forEach(foreignKey => {\n        // build new constraint name\n        const columnNames = foreignKey.columnNames.map(column => `\\`${column}\\``).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\\`${column}\\``).join(\",\");\n        const newForeignKeyName = _this17.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n        // build queries\n        let up = `ALTER TABLE ${_this17.escapePath(newTable)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` + `REFERENCES ${_this17.escapePath(_this17.getTablePath(foreignKey))}(${referencedColumnNames})`;\n        if (foreignKey.onDelete) up += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate) up += ` ON UPDATE ${foreignKey.onUpdate}`;\n        let down = `ALTER TABLE ${_this17.escapePath(newTable)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` + `REFERENCES ${_this17.escapePath(_this17.getTablePath(foreignKey))}(${referencedColumnNames})`;\n        if (foreignKey.onDelete) down += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate) down += ` ON UPDATE ${foreignKey.onUpdate}`;\n        upQueries.push(new Query(up));\n        downQueries.push(new Query(down));\n        // replace constraint name\n        foreignKey.name = newForeignKeyName;\n      });\n      yield _this17.executeQueries(upQueries, downQueries);\n      // rename old table and replace it in cached tabled;\n      oldTable.name = newTable.name;\n      _this17.replaceCachedTable(oldTable, newTable);\n    })();\n  }\n  /**\n   * Creates a new column from the column in the table.\n   */\n  addColumn(tableOrName, column) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this18.getCachedTable(tableOrName);\n      const clonedTable = table.clone();\n      const upQueries = [];\n      const downQueries = [];\n      const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;\n      upQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} ADD ${_this18.buildCreateColumnSql(column, skipColumnLevelPrimary, false)}`));\n      downQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} DROP COLUMN \\`${column.name}\\``));\n      // create or update primary key constraint\n      if (column.isPrimary && skipColumnLevelPrimary) {\n        // if we already have generated column, we must temporary drop AUTO_INCREMENT property.\n        const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n        if (generatedColumn) {\n          const nonGeneratedColumn = generatedColumn.clone();\n          nonGeneratedColumn.isGenerated = false;\n          nonGeneratedColumn.generationStrategy = undefined;\n          upQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} CHANGE \\`${column.name}\\` ${_this18.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n          downQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this18.buildCreateColumnSql(column, true)}`));\n        }\n        const primaryColumns = clonedTable.primaryColumns;\n        let columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} DROP PRIMARY KEY`));\n        downQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n        primaryColumns.push(column);\n        columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n        downQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} DROP PRIMARY KEY`));\n        // if we previously dropped AUTO_INCREMENT property, we must bring it back\n        if (generatedColumn) {\n          const nonGeneratedColumn = generatedColumn.clone();\n          nonGeneratedColumn.isGenerated = false;\n          nonGeneratedColumn.generationStrategy = undefined;\n          upQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this18.buildCreateColumnSql(column, true)}`));\n          downQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} CHANGE \\`${column.name}\\` ${_this18.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n        }\n      }\n      // create column index\n      const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n      if (columnIndex) {\n        upQueries.push(_this18.createIndexSql(table, columnIndex));\n        downQueries.push(_this18.dropIndexSql(table, columnIndex));\n      } else if (column.isUnique) {\n        const uniqueIndex = new TableIndex({\n          name: _this18.connection.namingStrategy.indexName(table, [column.name]),\n          columnNames: [column.name],\n          isUnique: true\n        });\n        clonedTable.indices.push(uniqueIndex);\n        clonedTable.uniques.push(new TableUnique({\n          name: uniqueIndex.name,\n          columnNames: uniqueIndex.columnNames\n        }));\n        upQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${column.name}\\`)`));\n        downQueries.push(new Query(`ALTER TABLE ${_this18.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n      }\n      yield _this18.executeQueries(upQueries, downQueries);\n      clonedTable.addColumn(column);\n      _this18.replaceCachedTable(table, clonedTable);\n    })();\n  }\n  /**\n   * Creates a new columns from the column in the table.\n   */\n  addColumns(tableOrName, columns) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      for (const column of columns) {\n        yield _this19.addColumn(tableOrName, column);\n      }\n    })();\n  }\n  /**\n   * Renames column in the given table.\n   */\n  renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this20.getCachedTable(tableOrName);\n      const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName) ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n      if (!oldColumn) throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n      let newColumn = undefined;\n      if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n        newColumn = newTableColumnOrName;\n      } else {\n        newColumn = oldColumn.clone();\n        newColumn.name = newTableColumnOrName;\n      }\n      yield _this20.changeColumn(table, oldColumn, newColumn);\n    })();\n  }\n  /**\n   * Changes a column in the table.\n   */\n  changeColumn(tableOrName, oldColumnOrName, newColumn) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this21.getCachedTable(tableOrName);\n      let clonedTable = table.clone();\n      const upQueries = [];\n      const downQueries = [];\n      const oldColumn = InstanceChecker.isTableColumn(oldColumnOrName) ? oldColumnOrName : table.columns.find(column => column.name === oldColumnOrName);\n      if (!oldColumn) throw new TypeORMError(`Column \"${oldColumnOrName}\" was not found in the \"${table.name}\" table.`);\n      if (newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\" || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length || oldColumn.generatedType !== newColumn.generatedType) {\n        yield _this21.dropColumn(table, oldColumn);\n        yield _this21.addColumn(table, newColumn);\n        // update cloned table\n        clonedTable = table.clone();\n      } else {\n        if (newColumn.name !== oldColumn.name) {\n          // We don't change any column properties, just rename it.\n          upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${oldColumn.name}\\` \\`${newColumn.name}\\` ${_this21.buildCreateColumnSql(oldColumn, true, true)}`));\n          downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${newColumn.name}\\` \\`${oldColumn.name}\\` ${_this21.buildCreateColumnSql(oldColumn, true, true)}`));\n          // rename index constraints\n          clonedTable.findColumnIndices(oldColumn).forEach(index => {\n            // build new constraint name\n            index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n            index.columnNames.push(newColumn.name);\n            const columnNames = index.columnNames.map(column => `\\`${column}\\``).join(\", \");\n            const newIndexName = _this21.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n            // build queries\n            let indexType = \"\";\n            if (index.isUnique) indexType += \"UNIQUE \";\n            if (index.isSpatial) indexType += \"SPATIAL \";\n            if (index.isFulltext) indexType += \"FULLTEXT \";\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`));\n            // replace constraint name\n            index.name = newIndexName;\n          });\n          // rename foreign key constraints\n          clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n            // build new constraint name\n            foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n            foreignKey.columnNames.push(newColumn.name);\n            const columnNames = foreignKey.columnNames.map(column => `\\`${column}\\``).join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\\`${column}\\``).join(\",\");\n            const newForeignKeyName = _this21.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n            // build queries\n            let up = `ALTER TABLE ${_this21.escapePath(table)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` + `REFERENCES ${_this21.escapePath(_this21.getTablePath(foreignKey))}(${referencedColumnNames})`;\n            if (foreignKey.onDelete) up += ` ON DELETE ${foreignKey.onDelete}`;\n            if (foreignKey.onUpdate) up += ` ON UPDATE ${foreignKey.onUpdate}`;\n            let down = `ALTER TABLE ${_this21.escapePath(table)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` + `REFERENCES ${_this21.escapePath(_this21.getTablePath(foreignKey))}(${referencedColumnNames})`;\n            if (foreignKey.onDelete) down += ` ON DELETE ${foreignKey.onDelete}`;\n            if (foreignKey.onUpdate) down += ` ON UPDATE ${foreignKey.onUpdate}`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n          });\n          // rename old column in the Table object\n          const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n          clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n          oldColumn.name = newColumn.name;\n        }\n        if (_this21.isColumnChanged(oldColumn, newColumn, true)) {\n          upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${oldColumn.name}\\` ${_this21.buildCreateColumnSql(newColumn, true)}`));\n          downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${newColumn.name}\\` ${_this21.buildCreateColumnSql(oldColumn, true)}`));\n        }\n        if (newColumn.isPrimary !== oldColumn.isPrimary) {\n          // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n          const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n          if (generatedColumn) {\n            const nonGeneratedColumn = generatedColumn.clone();\n            nonGeneratedColumn.isGenerated = false;\n            nonGeneratedColumn.generationStrategy = undefined;\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${_this21.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this21.buildCreateColumnSql(generatedColumn, true)}`));\n          }\n          const primaryColumns = clonedTable.primaryColumns;\n          // if primary column state changed, we must always drop existed constraint.\n          if (primaryColumns.length > 0) {\n            const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n          }\n          if (newColumn.isPrimary === true) {\n            primaryColumns.push(newColumn);\n            // update column in table\n            const column = clonedTable.columns.find(column => column.name === newColumn.name);\n            column.isPrimary = true;\n            const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP PRIMARY KEY`));\n          } else {\n            const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n            primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n            // update column in table\n            const column = clonedTable.columns.find(column => column.name === newColumn.name);\n            column.isPrimary = false;\n            // if we have another primary keys, we must recreate constraint.\n            if (primaryColumns.length > 0) {\n              const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n              upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n              downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP PRIMARY KEY`));\n            }\n          }\n          // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back\n          if (generatedColumn) {\n            const nonGeneratedColumn = generatedColumn.clone();\n            nonGeneratedColumn.isGenerated = false;\n            nonGeneratedColumn.generationStrategy = undefined;\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this21.buildCreateColumnSql(generatedColumn, true)}`));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${_this21.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n          }\n        }\n        if (newColumn.isUnique !== oldColumn.isUnique) {\n          if (newColumn.isUnique === true) {\n            const uniqueIndex = new TableIndex({\n              name: _this21.connection.namingStrategy.indexName(table, [newColumn.name]),\n              columnNames: [newColumn.name],\n              isUnique: true\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n              name: uniqueIndex.name,\n              columnNames: uniqueIndex.columnNames\n            }));\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n          } else {\n            const uniqueIndex = clonedTable.indices.find(index => {\n              return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);\n            });\n            clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);\n            const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex.name);\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);\n            upQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n            downQueries.push(new Query(`ALTER TABLE ${_this21.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`));\n          }\n        }\n      }\n      yield _this21.executeQueries(upQueries, downQueries);\n      _this21.replaceCachedTable(table, clonedTable);\n    })();\n  }\n  /**\n   * Changes a column in the table.\n   */\n  changeColumns(tableOrName, changedColumns) {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      for (const {\n        oldColumn,\n        newColumn\n      } of changedColumns) {\n        yield _this22.changeColumn(tableOrName, oldColumn, newColumn);\n      }\n    })();\n  }\n  /**\n   * Drops column in the table.\n   */\n  dropColumn(tableOrName, columnOrName) {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this23.getCachedTable(tableOrName);\n      const column = InstanceChecker.isTableColumn(columnOrName) ? columnOrName : table.findColumnByName(columnOrName);\n      if (!column) throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n      const clonedTable = table.clone();\n      const upQueries = [];\n      const downQueries = [];\n      // drop primary key constraint\n      if (column.isPrimary) {\n        // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n        const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n        if (generatedColumn) {\n          const nonGeneratedColumn = generatedColumn.clone();\n          nonGeneratedColumn.isGenerated = false;\n          nonGeneratedColumn.generationStrategy = undefined;\n          upQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${_this23.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n          downQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this23.buildCreateColumnSql(generatedColumn, true)}`));\n        }\n        // dropping primary key constraint\n        const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\\`${primaryColumn.name}\\``).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(clonedTable)} DROP PRIMARY KEY`));\n        downQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));\n        // update column in table\n        const tableColumn = clonedTable.findColumnByName(column.name);\n        tableColumn.isPrimary = false;\n        // if primary key have multiple columns, we must recreate it without dropped column\n        if (clonedTable.primaryColumns.length > 0) {\n          const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\\`${primaryColumn.name}\\``).join(\", \");\n          upQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));\n          downQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(clonedTable)} DROP PRIMARY KEY`));\n        }\n        // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back\n        if (generatedColumn && generatedColumn.name !== column.name) {\n          const nonGeneratedColumn = generatedColumn.clone();\n          nonGeneratedColumn.isGenerated = false;\n          nonGeneratedColumn.generationStrategy = undefined;\n          upQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this23.buildCreateColumnSql(generatedColumn, true)}`));\n          downQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${_this23.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n        }\n      }\n      // drop column index\n      const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n      if (columnIndex) {\n        clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n        upQueries.push(_this23.dropIndexSql(table, columnIndex));\n        downQueries.push(_this23.createIndexSql(table, columnIndex));\n      } else if (column.isUnique) {\n        // we splice constraints both from table uniques and indices.\n        const uniqueName = _this23.connection.namingStrategy.uniqueConstraintName(table, [column.name]);\n        const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);\n        if (foundUnique) clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n        const indexName = _this23.connection.namingStrategy.indexName(table, [column.name]);\n        const foundIndex = clonedTable.indices.find(index => index.name === indexName);\n        if (foundIndex) clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n        upQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} DROP INDEX \\`${indexName}\\``));\n        downQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} ADD UNIQUE INDEX \\`${indexName}\\` (\\`${column.name}\\`)`));\n      }\n      upQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} DROP COLUMN \\`${column.name}\\``));\n      downQueries.push(new Query(`ALTER TABLE ${_this23.escapePath(table)} ADD ${_this23.buildCreateColumnSql(column, true)}`));\n      yield _this23.executeQueries(upQueries, downQueries);\n      clonedTable.removeColumn(column);\n      _this23.replaceCachedTable(table, clonedTable);\n    })();\n  }\n  /**\n   * Drops the columns in the table.\n   */\n  dropColumns(tableOrName, columns) {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      for (const column of columns) {\n        yield _this24.dropColumn(tableOrName, column);\n      }\n    })();\n  }\n  /**\n   * Creates a new primary key.\n   */\n  createPrimaryKey(tableOrName, columnNames) {\n    var _this25 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this25.getCachedTable(tableOrName);\n      const clonedTable = table.clone();\n      const up = _this25.createPrimaryKeySql(table, columnNames);\n      const down = _this25.dropPrimaryKeySql(table);\n      yield _this25.executeQueries(up, down);\n      clonedTable.columns.forEach(column => {\n        if (columnNames.find(columnName => columnName === column.name)) column.isPrimary = true;\n      });\n      _this25.replaceCachedTable(table, clonedTable);\n    })();\n  }\n  /**\n   * Updates composite primary keys.\n   */\n  updatePrimaryKeys(tableOrName, columns) {\n    var _this26 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this26.getCachedTable(tableOrName);\n      const clonedTable = table.clone();\n      const columnNames = columns.map(column => column.name);\n      const upQueries = [];\n      const downQueries = [];\n      // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n      const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n      if (generatedColumn) {\n        const nonGeneratedColumn = generatedColumn.clone();\n        nonGeneratedColumn.isGenerated = false;\n        nonGeneratedColumn.generationStrategy = undefined;\n        upQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${_this26.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n        downQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this26.buildCreateColumnSql(generatedColumn, true)}`));\n      }\n      // if table already have primary columns, we must drop them.\n      const primaryColumns = clonedTable.primaryColumns;\n      if (primaryColumns.length > 0) {\n        const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} DROP PRIMARY KEY`));\n        downQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n      }\n      // update columns in table.\n      clonedTable.columns.filter(column => columnNames.indexOf(column.name) !== -1).forEach(column => column.isPrimary = true);\n      const columnNamesString = columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\n      upQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`));\n      downQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} DROP PRIMARY KEY`));\n      // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back\n      const newOrExistGeneratedColumn = generatedColumn ? generatedColumn : columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\n      if (newOrExistGeneratedColumn) {\n        const nonGeneratedColumn = newOrExistGeneratedColumn.clone();\n        nonGeneratedColumn.isGenerated = false;\n        nonGeneratedColumn.generationStrategy = undefined;\n        upQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${_this26.buildCreateColumnSql(newOrExistGeneratedColumn, true)}`));\n        downQueries.push(new Query(`ALTER TABLE ${_this26.escapePath(table)} CHANGE \\`${newOrExistGeneratedColumn.name}\\` ${_this26.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n        // if column changed to generated, we must update it in table\n        const changedGeneratedColumn = clonedTable.columns.find(column => column.name === newOrExistGeneratedColumn.name);\n        changedGeneratedColumn.isGenerated = true;\n        changedGeneratedColumn.generationStrategy = \"increment\";\n      }\n      yield _this26.executeQueries(upQueries, downQueries);\n      _this26.replaceCachedTable(table, clonedTable);\n    })();\n  }\n  /**\n   * Drops a primary key.\n   */\n  dropPrimaryKey(tableOrName) {\n    var _this27 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this27.getCachedTable(tableOrName);\n      const up = _this27.dropPrimaryKeySql(table);\n      const down = _this27.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n      yield _this27.executeQueries(up, down);\n      table.primaryColumns.forEach(column => {\n        column.isPrimary = false;\n      });\n    })();\n  }\n  /**\n   * Creates a new unique constraint.\n   */\n  createUniqueConstraint(tableOrName, uniqueConstraint) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    })();\n  }\n  /**\n   * Creates a new unique constraints.\n   */\n  createUniqueConstraints(tableOrName, uniqueConstraints) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    })();\n  }\n  /**\n   * Drops an unique constraint.\n   */\n  dropUniqueConstraint(tableOrName, uniqueOrName) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    })();\n  }\n  /**\n   * Drops an unique constraints.\n   */\n  dropUniqueConstraints(tableOrName, uniqueConstraints) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    })();\n  }\n  /**\n   * Creates a new check constraint.\n   */\n  createCheckConstraint(tableOrName, checkConstraint) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support check constraints.`);\n    })();\n  }\n  /**\n   * Creates a new check constraints.\n   */\n  createCheckConstraints(tableOrName, checkConstraints) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support check constraints.`);\n    })();\n  }\n  /**\n   * Drops check constraint.\n   */\n  dropCheckConstraint(tableOrName, checkOrName) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support check constraints.`);\n    })();\n  }\n  /**\n   * Drops check constraints.\n   */\n  dropCheckConstraints(tableOrName, checkConstraints) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support check constraints.`);\n    })();\n  }\n  /**\n   * Creates a new exclusion constraint.\n   */\n  createExclusionConstraint(tableOrName, exclusionConstraint) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    })();\n  }\n  /**\n   * Creates a new exclusion constraints.\n   */\n  createExclusionConstraints(tableOrName, exclusionConstraints) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    })();\n  }\n  /**\n   * Drops exclusion constraint.\n   */\n  dropExclusionConstraint(tableOrName, exclusionOrName) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    })();\n  }\n  /**\n   * Drops exclusion constraints.\n   */\n  dropExclusionConstraints(tableOrName, exclusionConstraints) {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    })();\n  }\n  /**\n   * Creates a new foreign key.\n   */\n  createForeignKey(tableOrName, foreignKey) {\n    var _this28 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this28.getCachedTable(tableOrName);\n      // new FK may be passed without name. In this case we generate FK name manually.\n      if (!foreignKey.name) foreignKey.name = _this28.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames);\n      const up = _this28.createForeignKeySql(table, foreignKey);\n      const down = _this28.dropForeignKeySql(table, foreignKey);\n      yield _this28.executeQueries(up, down);\n      table.addForeignKey(foreignKey);\n    })();\n  }\n  /**\n   * Creates a new foreign keys.\n   */\n  createForeignKeys(tableOrName, foreignKeys) {\n    var _this29 = this;\n    return _asyncToGenerator(function* () {\n      const promises = foreignKeys.map(foreignKey => _this29.createForeignKey(tableOrName, foreignKey));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Drops a foreign key.\n   */\n  dropForeignKey(tableOrName, foreignKeyOrName) {\n    var _this30 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this30.getCachedTable(tableOrName);\n      const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName) ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n      if (!foreignKey) throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n      const up = _this30.dropForeignKeySql(table, foreignKey);\n      const down = _this30.createForeignKeySql(table, foreignKey);\n      yield _this30.executeQueries(up, down);\n      table.removeForeignKey(foreignKey);\n    })();\n  }\n  /**\n   * Drops a foreign keys from the table.\n   */\n  dropForeignKeys(tableOrName, foreignKeys) {\n    var _this31 = this;\n    return _asyncToGenerator(function* () {\n      const promises = foreignKeys.map(foreignKey => _this31.dropForeignKey(tableOrName, foreignKey));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Creates a new index.\n   */\n  createIndex(tableOrName, index) {\n    var _this32 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this32.getCachedTable(tableOrName);\n      // new index may be passed without name. In this case we generate index name manually.\n      if (!index.name) index.name = _this32.generateIndexName(table, index);\n      const up = _this32.createIndexSql(table, index);\n      const down = _this32.dropIndexSql(table, index);\n      yield _this32.executeQueries(up, down);\n      table.addIndex(index, true);\n    })();\n  }\n  /**\n   * Creates a new indices\n   */\n  createIndices(tableOrName, indices) {\n    var _this33 = this;\n    return _asyncToGenerator(function* () {\n      const promises = indices.map(index => _this33.createIndex(tableOrName, index));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Drops an index.\n   */\n  dropIndex(tableOrName, indexOrName) {\n    var _this34 = this;\n    return _asyncToGenerator(function* () {\n      const table = InstanceChecker.isTable(tableOrName) ? tableOrName : yield _this34.getCachedTable(tableOrName);\n      const index = InstanceChecker.isTableIndex(indexOrName) ? indexOrName : table.indices.find(i => i.name === indexOrName);\n      if (!index) throw new TypeORMError(`Supplied index ${indexOrName} was not found in table ${table.name}`);\n      // old index may be passed without name. In this case we generate index name manually.\n      if (!index.name) index.name = _this34.generateIndexName(table, index);\n      const up = _this34.dropIndexSql(table, index);\n      const down = _this34.createIndexSql(table, index);\n      yield _this34.executeQueries(up, down);\n      table.removeIndex(index, true);\n    })();\n  }\n  /**\n   * Drops an indices from the table.\n   */\n  dropIndices(tableOrName, indices) {\n    var _this35 = this;\n    return _asyncToGenerator(function* () {\n      const promises = indices.map(index => _this35.dropIndex(tableOrName, index));\n      yield Promise.all(promises);\n    })();\n  }\n  /**\n   * Clears all table contents.\n   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n   */\n  clearTable(tableOrName) {\n    var _this36 = this;\n    return _asyncToGenerator(function* () {\n      yield _this36.query(`TRUNCATE TABLE ${_this36.escapePath(tableOrName)}`);\n    })();\n  }\n  /**\n   * Removes all tables from the currently connected database.\n   * Be careful using this method and avoid using it in production or migrations\n   * (because it can clear all your database).\n   */\n  clearDatabase(database) {\n    var _this37 = this;\n    return _asyncToGenerator(function* () {\n      const dbName = database ? database : _this37.driver.database;\n      if (dbName) {\n        const isDatabaseExist = yield _this37.hasDatabase(dbName);\n        if (!isDatabaseExist) return Promise.resolve();\n      } else {\n        throw new TypeORMError(`Can not clear database. No database is specified`);\n      }\n      const isAnotherTransactionActive = _this37.isTransactionActive;\n      if (!isAnotherTransactionActive) yield _this37.startTransaction();\n      try {\n        const selectViewDropsQuery = `SELECT concat('DROP VIEW IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\n        const dropViewQueries = yield _this37.query(selectViewDropsQuery);\n        yield Promise.all(dropViewQueries.map(q => _this37.query(q[\"query\"])));\n        const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n        const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\n        const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n        yield _this37.query(disableForeignKeysCheckQuery);\n        const dropQueries = yield _this37.query(dropTablesQuery);\n        yield Promise.all(dropQueries.map(query => _this37.query(query[\"query\"])));\n        yield _this37.query(enableForeignKeysCheckQuery);\n        if (!isAnotherTransactionActive) {\n          yield _this37.commitTransaction();\n        }\n      } catch (error) {\n        try {\n          // we throw original error even if rollback thrown an error\n          if (!isAnotherTransactionActive) {\n            yield _this37.rollbackTransaction();\n          }\n        } catch (rollbackError) {}\n        throw error;\n      }\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  loadViews(viewNames) {\n    var _this38 = this;\n    return _asyncToGenerator(function* () {\n      const hasTable = yield _this38.hasTable(_this38.getTypeormMetadataTableName());\n      if (!hasTable) {\n        return [];\n      }\n      if (!viewNames) {\n        viewNames = [];\n      }\n      const currentDatabase = yield _this38.getCurrentDatabase();\n      const viewsCondition = viewNames.map(tableName => {\n        let {\n          database,\n          tableName: name\n        } = _this38.driver.parseTableName(tableName);\n        if (!database) {\n          database = currentDatabase;\n        }\n        return `(\\`t\\`.\\`schema\\` = '${database}' AND \\`t\\`.\\`name\\` = '${name}')`;\n      }).join(\" OR \");\n      const query = `SELECT \\`t\\`.*, \\`v\\`.\\`check_option\\` FROM ${_this38.escapePath(_this38.getTypeormMetadataTableName())} \\`t\\` ` + `INNER JOIN \\`information_schema\\`.\\`views\\` \\`v\\` ON \\`v\\`.\\`table_schema\\` = \\`t\\`.\\`schema\\` AND \\`v\\`.\\`table_name\\` = \\`t\\`.\\`name\\` WHERE \\`t\\`.\\`type\\` = '${MetadataTableType.VIEW}' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n      const dbViews = yield _this38.query(query);\n      return dbViews.map(dbView => {\n        const view = new View();\n        const db = dbView[\"schema\"] === currentDatabase ? undefined : dbView[\"schema\"];\n        view.database = dbView[\"schema\"];\n        view.name = _this38.driver.buildTableName(dbView[\"name\"], undefined, db);\n        view.expression = dbView[\"value\"];\n        return view;\n      });\n    })();\n  }\n  /**\n   * Loads all tables (with given names) from the database and creates a Table from them.\n   */\n  loadTables(tableNames) {\n    var _this39 = this;\n    return _asyncToGenerator(function* () {\n      // if no tables given then no need to proceed\n      if (tableNames && tableNames.length === 0) {\n        return [];\n      }\n      const dbTables = [];\n      const currentDatabase = yield _this39.getCurrentDatabase();\n      if (!tableNames) {\n        const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\``;\n        dbTables.push(...(yield _this39.query(tablesSql)));\n      } else {\n        const tablesCondition = tableNames.map(tableName => {\n          let [database, name] = tableName.split(\".\");\n          if (!name) {\n            name = database;\n            database = _this39.driver.database || currentDatabase;\n          }\n          return `(\\`TABLE_SCHEMA\\` = '${database}' AND \\`TABLE_NAME\\` = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE ` + tablesCondition;\n        dbTables.push(...(yield _this39.query(tablesSql)));\n      }\n      if (dbTables.length === 0) {\n        return [];\n      }\n      const columnsCondition = dbTables.map(({\n        TABLE_NAME,\n        TABLE_SCHEMA\n      }) => {\n        return `(\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n      }).join(\" OR \");\n      const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE ` + columnsCondition;\n      const primaryKeySql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` WHERE \\`CONSTRAINT_NAME\\` = 'PRIMARY' AND (${columnsCondition})`;\n      const collationsSql = `SELECT \\`SCHEMA_NAME\\`, \\`DEFAULT_CHARACTER_SET_NAME\\` as \\`CHARSET\\`, \\`DEFAULT_COLLATION_NAME\\` AS \\`COLLATION\\` FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\``;\n      const indicesCondition = dbTables.map(({\n        TABLE_NAME,\n        TABLE_SCHEMA\n      }) => {\n        return `(\\`s\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`s\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n      }).join(\" OR \");\n      const indicesSql = `SELECT \\`s\\`.* FROM \\`INFORMATION_SCHEMA\\`.\\`STATISTICS\\` \\`s\\` ` + `LEFT JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`s\\`.\\`INDEX_NAME\\` = \\`rc\\`.\\`CONSTRAINT_NAME\\` ` + `WHERE (${indicesCondition}) AND \\`s\\`.\\`INDEX_NAME\\` != 'PRIMARY' AND \\`rc\\`.\\`CONSTRAINT_NAME\\` IS NULL`;\n      const foreignKeysCondition = dbTables.map(({\n        TABLE_NAME,\n        TABLE_SCHEMA\n      }) => {\n        return `(\\`kcu\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`kcu\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n      }).join(\" OR \");\n      const foreignKeysSql = `SELECT \\`kcu\\`.\\`TABLE_SCHEMA\\`, \\`kcu\\`.\\`TABLE_NAME\\`, \\`kcu\\`.\\`CONSTRAINT_NAME\\`, \\`kcu\\`.\\`COLUMN_NAME\\`, \\`kcu\\`.\\`REFERENCED_TABLE_SCHEMA\\`, ` + `\\`kcu\\`.\\`REFERENCED_TABLE_NAME\\`, \\`kcu\\`.\\`REFERENCED_COLUMN_NAME\\`, \\`rc\\`.\\`DELETE_RULE\\` \\`ON_DELETE\\`, \\`rc\\`.\\`UPDATE_RULE\\` \\`ON_UPDATE\\` ` + `FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`kcu\\` ` + `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`rc\\`.\\`constraint_name\\` = \\`kcu\\`.\\`constraint_name\\` ` + `WHERE ` + foreignKeysCondition;\n      const [dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys] = yield Promise.all([_this39.query(columnsSql), _this39.query(primaryKeySql), _this39.query(collationsSql), _this39.query(indicesSql), _this39.query(foreignKeysSql)]);\n      // create tables for loaded tables\n      return Promise.all(dbTables.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (dbTable) {\n          const table = new Table();\n          const dbCollation = dbCollations.find(coll => coll[\"SCHEMA_NAME\"] === dbTable[\"TABLE_SCHEMA\"]);\n          const defaultCollation = dbCollation[\"COLLATION\"];\n          const defaultCharset = dbCollation[\"CHARSET\"];\n          // We do not need to join database name, when database is by default.\n          const db = dbTable[\"TABLE_SCHEMA\"] === currentDatabase ? undefined : dbTable[\"TABLE_SCHEMA\"];\n          table.database = dbTable[\"TABLE_SCHEMA\"];\n          table.name = _this39.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, db);\n          // create columns from the loaded columns\n          table.columns = dbColumns.filter(dbColumn => dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] && dbColumn[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"]).map(dbColumn => {\n            const columnUniqueIndices = dbIndices.filter(dbIndex => {\n              return dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] && dbIndex[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"] && dbIndex[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] && parseInt(dbIndex[\"NON_UNIQUE\"], 10) === 0;\n            });\n            const tableMetadata = _this39.connection.entityMetadatas.find(metadata => _this39.getTablePath(table) === _this39.getTablePath(metadata));\n            const hasIgnoredIndex = columnUniqueIndices.length > 0 && tableMetadata && tableMetadata.indices.some(index => {\n              return columnUniqueIndices.some(uniqueIndex => {\n                return index.name === uniqueIndex[\"INDEX_NAME\"] && index.synchronize === false;\n              });\n            });\n            const isConstraintComposite = columnUniqueIndices.every(uniqueIndex => {\n              return dbIndices.some(dbIndex => dbIndex[\"INDEX_NAME\"] === uniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]);\n            });\n            const tableColumn = new TableColumn();\n            tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n            tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n            // Unsigned columns are handled differently when it comes to width.\n            // Hence, we need to set the unsigned attribute before we check the width.\n            tableColumn.unsigned = tableColumn.zerofill ? true : dbColumn[\"COLUMN_TYPE\"].indexOf(\"unsigned\") !== -1;\n            if (_this39.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {\n              const width = dbColumn[\"COLUMN_TYPE\"].substring(dbColumn[\"COLUMN_TYPE\"].indexOf(\"(\") + 1, dbColumn[\"COLUMN_TYPE\"].indexOf(\")\"));\n              tableColumn.width = width && !_this39.isDefaultColumnWidth(table, tableColumn, parseInt(width)) ? parseInt(width) : undefined;\n            }\n            if (dbColumn[\"COLUMN_DEFAULT\"] === null || dbColumn[\"COLUMN_DEFAULT\"] === undefined) {\n              tableColumn.default = undefined;\n            } else {\n              tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] === \"CURRENT_TIMESTAMP\" ? dbColumn[\"COLUMN_DEFAULT\"] : `'${dbColumn[\"COLUMN_DEFAULT\"]}'`;\n            }\n            if (dbColumn[\"EXTRA\"].indexOf(\"on update\") !== -1) {\n              tableColumn.onUpdate = dbColumn[\"EXTRA\"].substring(dbColumn[\"EXTRA\"].indexOf(\"on update\") + 10);\n            }\n            if (dbColumn[\"GENERATION_EXPRESSION\"]) {\n              tableColumn.asExpression = dbColumn[\"GENERATION_EXPRESSION\"];\n              tableColumn.generatedType = dbColumn[\"EXTRA\"].indexOf(\"VIRTUAL\") !== -1 ? \"VIRTUAL\" : \"STORED\";\n            }\n            tableColumn.isUnique = columnUniqueIndices.length > 0 && !hasIgnoredIndex && !isConstraintComposite;\n            tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n            tableColumn.isPrimary = dbPrimaryKeys.some(dbPrimaryKey => {\n              return dbPrimaryKey[\"TABLE_NAME\"] === dbColumn[\"TABLE_NAME\"] && dbPrimaryKey[\"TABLE_SCHEMA\"] === dbColumn[\"TABLE_SCHEMA\"] && dbPrimaryKey[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n            });\n            tableColumn.zerofill = dbColumn[\"COLUMN_TYPE\"].indexOf(\"zerofill\") !== -1;\n            tableColumn.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n            if (tableColumn.isGenerated) tableColumn.generationStrategy = \"increment\";\n            tableColumn.comment = typeof dbColumn[\"COLUMN_COMMENT\"] === \"string\" && dbColumn[\"COLUMN_COMMENT\"].length === 0 ? undefined : dbColumn[\"COLUMN_COMMENT\"];\n            if (dbColumn[\"CHARACTER_SET_NAME\"]) tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"] === defaultCharset ? undefined : dbColumn[\"CHARACTER_SET_NAME\"];\n            if (dbColumn[\"COLLATION_NAME\"]) tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation ? undefined : dbColumn[\"COLLATION_NAME\"];\n            // check only columns that have length property\n            if (_this39.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n              const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n              tableColumn.length = !_this39.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n            }\n            if (tableColumn.type === \"decimal\" || tableColumn.type === \"double\" || tableColumn.type === \"float\") {\n              if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !_this39.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"])) tableColumn.precision = parseInt(dbColumn[\"NUMERIC_PRECISION\"]);\n              if (dbColumn[\"NUMERIC_SCALE\"] !== null && !_this39.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"])) tableColumn.scale = parseInt(dbColumn[\"NUMERIC_SCALE\"]);\n            }\n            if (tableColumn.type === \"enum\" || tableColumn.type === \"simple-enum\" || tableColumn.type === \"set\") {\n              const colType = dbColumn[\"COLUMN_TYPE\"];\n              const items = colType.substring(colType.indexOf(\"(\") + 1, colType.lastIndexOf(\")\")).split(\",\");\n              tableColumn.enum = items.map(item => {\n                return item.substring(1, item.length - 1);\n              });\n              tableColumn.length = \"\";\n            }\n            if ((tableColumn.type === \"datetime\" || tableColumn.type === \"time\" || tableColumn.type === \"timestamp\") && dbColumn[\"DATETIME_PRECISION\"] !== null && dbColumn[\"DATETIME_PRECISION\"] !== undefined && !_this39.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn[\"DATETIME_PRECISION\"]))) {\n              tableColumn.precision = parseInt(dbColumn[\"DATETIME_PRECISION\"]);\n            }\n            return tableColumn;\n          });\n          // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n          const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n            return dbForeignKey[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] && dbForeignKey[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"];\n          }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n          table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n            const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n            // if referenced table located in currently used db, we don't need to concat db name to table name.\n            const database = dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"] === currentDatabase ? undefined : dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"];\n            const referencedTableName = _this39.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], undefined, database);\n            return new TableForeignKey({\n              name: dbForeignKey[\"CONSTRAINT_NAME\"],\n              columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n              referencedDatabase: dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\n              referencedTableName: referencedTableName,\n              referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n              onDelete: dbForeignKey[\"ON_DELETE\"],\n              onUpdate: dbForeignKey[\"ON_UPDATE\"]\n            });\n          });\n          // find index constraints of table, group them by constraint name and build TableIndex.\n          const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n            return dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] && dbIndex[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"];\n          }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n          table.indices = tableIndexConstraints.map(constraint => {\n            const indices = dbIndices.filter(index => {\n              return index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"] && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n            });\n            const nonUnique = parseInt(constraint[\"NON_UNIQUE\"], 10);\n            return new TableIndex({\n              table: table,\n              name: constraint[\"INDEX_NAME\"],\n              columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n              isUnique: nonUnique === 0,\n              isSpatial: constraint[\"INDEX_TYPE\"] === \"SPATIAL\",\n              isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n            });\n          });\n          return table;\n        });\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n  /**\n   * Builds create table sql\n   */\n  createTableSql(table, createForeignKeys) {\n    const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, true)).join(\", \");\n    let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n    // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.\n    // if we mark column as Unique, it means that we create UNIQUE INDEX.\n    table.columns.filter(column => column.isUnique).forEach(column => {\n      const isUniqueIndexExist = table.indices.some(index => {\n        return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n      });\n      const isUniqueConstraintExist = table.uniques.some(unique => {\n        return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n      });\n      if (!isUniqueIndexExist && !isUniqueConstraintExist) table.indices.push(new TableIndex({\n        name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n        columnNames: [column.name],\n        isUnique: true\n      }));\n    });\n    // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n    if (table.uniques.length > 0) {\n      table.uniques.forEach(unique => {\n        const uniqueExist = table.indices.some(index => index.name === unique.name);\n        if (!uniqueExist) {\n          table.indices.push(new TableIndex({\n            name: unique.name,\n            columnNames: unique.columnNames,\n            isUnique: true\n          }));\n        }\n      });\n    }\n    if (table.indices.length > 0) {\n      const indicesSql = table.indices.map(index => {\n        const columnNames = index.columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\n        if (!index.name) index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n        let indexType = \"\";\n        if (index.isUnique) indexType += \"UNIQUE \";\n        if (index.isSpatial) indexType += \"SPATIAL \";\n        if (index.isFulltext) indexType += \"FULLTEXT \";\n        return `${indexType}INDEX \\`${index.name}\\` (${columnNames})`;\n      }).join(\", \");\n      sql += `, ${indicesSql}`;\n    }\n    if (table.foreignKeys.length > 0 && createForeignKeys) {\n      const foreignKeysSql = table.foreignKeys.map(fk => {\n        const columnNames = fk.columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\n        if (!fk.name) fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames);\n        const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\n        let constraint = `CONSTRAINT \\`${fk.name}\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\n        if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`;\n        if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`;\n        return constraint;\n      }).join(\", \");\n      sql += `, ${foreignKeysSql}`;\n    }\n    if (table.primaryColumns.length > 0) {\n      const columnNames = table.primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\n      sql += `, PRIMARY KEY (${columnNames})`;\n    }\n    sql += `) ENGINE=${table.engine || \"InnoDB\"}`;\n    return new Query(sql);\n  }\n  /**\n   * Builds drop table sql\n   */\n  dropTableSql(tableOrName) {\n    return new Query(`DROP TABLE ${this.escapePath(tableOrName)}`);\n  }\n  createViewSql(view) {\n    if (typeof view.expression === \"string\") {\n      return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n    } else {\n      return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n    }\n  }\n  insertViewDefinitionSql(view) {\n    var _this40 = this;\n    return _asyncToGenerator(function* () {\n      const currentDatabase = yield _this40.getCurrentDatabase();\n      const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(_this40.connection).getQuery();\n      return _this40.insertTypeormMetadataSql({\n        type: MetadataTableType.VIEW,\n        schema: currentDatabase,\n        name: view.name,\n        value: expression\n      });\n    })();\n  }\n  /**\n   * Builds drop view sql.\n   */\n  dropViewSql(viewOrPath) {\n    return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n  }\n  /**\n   * Builds remove view sql.\n   */\n  deleteViewDefinitionSql(viewOrPath) {\n    var _this41 = this;\n    return _asyncToGenerator(function* () {\n      const currentDatabase = yield _this41.getCurrentDatabase();\n      const viewName = InstanceChecker.isView(viewOrPath) ? viewOrPath.name : viewOrPath;\n      return _this41.deleteTypeormMetadataSql({\n        type: MetadataTableType.VIEW,\n        schema: currentDatabase,\n        name: viewName\n      });\n    })();\n  }\n  /**\n   * Builds create index sql.\n   */\n  createIndexSql(table, index) {\n    const columns = index.columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\n    let indexType = \"\";\n    if (index.isUnique) indexType += \"UNIQUE \";\n    if (index.isSpatial) indexType += \"SPATIAL \";\n    if (index.isFulltext) indexType += \"FULLTEXT \";\n    return new Query(`CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(table)} (${columns})`);\n  }\n  /**\n   * Builds drop index sql.\n   */\n  dropIndexSql(table, indexOrName) {\n    let indexName = InstanceChecker.isTableIndex(indexOrName) ? indexOrName.name : indexOrName;\n    return new Query(`DROP INDEX \\`${indexName}\\` ON ${this.escapePath(table)}`);\n  }\n  /**\n   * Builds create primary key sql.\n   */\n  createPrimaryKeySql(table, columnNames) {\n    const columnNamesString = columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\n    return new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`);\n  }\n  /**\n   * Builds drop primary key sql.\n   */\n  dropPrimaryKeySql(table) {\n    return new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`);\n  }\n  /**\n   * Builds create foreign key sql.\n   */\n  createForeignKeySql(table, foreignKey) {\n    const columnNames = foreignKey.columnNames.map(column => `\\`${column}\\``).join(\", \");\n    const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\\`${column}\\``).join(\",\");\n    let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` + `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n    if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`;\n    if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n    return new Query(sql);\n  }\n  /**\n   * Builds drop foreign key sql.\n   */\n  dropForeignKeySql(table, foreignKeyOrName) {\n    const foreignKeyName = InstanceChecker.isTableForeignKey(foreignKeyOrName) ? foreignKeyOrName.name : foreignKeyOrName;\n    return new Query(`ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${foreignKeyName}\\``);\n  }\n  /**\n   * Escapes a given comment so it's safe to include in a query.\n   */\n  escapeComment(comment) {\n    if (!comment || comment.length === 0) {\n      return `''`;\n    }\n    comment = comment.replace(/\\\\/g, \"\\\\\\\\\") // MySQL allows escaping characters via backslashes\n    .replace(/'/g, \"''\").replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n    return `'${comment}'`;\n  }\n  /**\n   * Escapes given table or view path.\n   */\n  escapePath(target) {\n    const {\n      database,\n      tableName\n    } = this.driver.parseTableName(target);\n    if (database && database !== this.driver.database) {\n      return `\\`${database}\\`.\\`${tableName}\\``;\n    }\n    return `\\`${tableName}\\``;\n  }\n  /**\n   * Builds a part of query to create/change a column.\n   */\n  buildCreateColumnSql(column, skipPrimary, skipName = false) {\n    let c = \"\";\n    if (skipName) {\n      c = this.connection.driver.createFullType(column);\n    } else {\n      c = `\\`${column.name}\\` ${this.connection.driver.createFullType(column)}`;\n    }\n    if (column.asExpression) c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : \"VIRTUAL\"}`;\n    // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.\n    if (column.zerofill) {\n      c += \" ZEROFILL\";\n    } else if (column.unsigned) {\n      c += \" UNSIGNED\";\n    }\n    if (column.enum) c += ` (${column.enum.map(value => \"'\" + value + \"'\").join(\", \")})`;\n    if (column.charset) c += ` CHARACTER SET \"${column.charset}\"`;\n    if (column.collation) c += ` COLLATE \"${column.collation}\"`;\n    if (!column.isNullable) c += \" NOT NULL\";\n    if (column.isNullable) c += \" NULL\";\n    if (column.isPrimary && !skipPrimary) c += \" PRIMARY KEY\";\n    if (column.isGenerated && column.generationStrategy === \"increment\")\n      // don't use skipPrimary here since updates can update already exist primary without auto inc.\n      c += \" AUTO_INCREMENT\";\n    if (column.comment) c += ` COMMENT ${this.escapeComment(column.comment)}`;\n    if (column.default !== undefined && column.default !== null) c += ` DEFAULT ${column.default}`;\n    if (column.onUpdate) c += ` ON UPDATE ${column.onUpdate}`;\n    return c;\n  }\n  /**\n   * Checks if column display width is by default.\n   */\n  isDefaultColumnWidth(table, column, width) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      const metadata = this.connection.getMetadata(table.name);\n      const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata && columnMetadata.width) return false;\n    }\n    const defaultWidthForType = this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].width;\n    if (defaultWidthForType) {\n      // In MariaDB & MySQL 5.7, the default widths of certain numeric types are 1 less than\n      // the usual defaults when the column is unsigned.\n      // This also applies to Aurora MySQL.\n      const typesWithReducedUnsignedDefault = [\"int\", \"tinyint\", \"smallint\", \"mediumint\"];\n      const needsAdjustment = typesWithReducedUnsignedDefault.indexOf(column.type) !== -1;\n      if (column.unsigned && needsAdjustment) {\n        return defaultWidthForType - 1 === width;\n      } else {\n        return defaultWidthForType === width;\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["QueryResult","TransactionNotStartedError","TableColumn","Table","TableForeignKey","TableIndex","QueryRunnerAlreadyReleasedError","View","Query","OrmUtils","TableUnique","BaseQueryRunner","Broadcaster","TypeORMError","MetadataTableType","InstanceChecker","AuroraMysqlQueryRunner","constructor","driver","client","connection","broadcaster","connect","_asyncToGenerator","release","isReleased","databaseConnection","Promise","resolve","startTransaction","isolationLevel","_this","isTransactionActive","broadcast","err","transactionDepth","query","commitTransaction","_this2","rollbackTransaction","_this3","parameters","useStructuredResult","_this4","raw","result","hasOwnProperty","Array","isArray","records","affected","numberOfRecordsUpdated","stream","onEnd","onError","_this5","_ref","ok","fail","on","_x","_x2","apply","arguments","getDatabases","getSchemas","database","hasDatabase","_this6","length","getCurrentDatabase","_this7","hasSchema","schema","getCurrentSchema","_this8","hasTable","tableOrName","_this9","parsedTableName","parseTableName","sql","tableName","hasColumn","column","_this10","columnName","isTableColumn","name","createDatabase","ifNotExist","_this11","up","down","executeQueries","dropDatabase","ifExist","_this12","createSchema","schemaPath","dropSchema","createTable","table","createForeignKeys","_this13","isTableExist","upQueries","downQueries","push","createTableSql","dropTableSql","indices","forEach","index","dropIndexSql","foreignKeys","foreignKey","dropForeignKeySql","dropTable","target","dropForeignKeys","_this14","tablePath","getTablePath","getCachedTable","createView","view","syncWithMetadata","_this15","createViewSql","insertViewDefinitionSql","dropViewSql","deleteViewDefinitionSql","dropView","_this16","viewName","isView","getCachedView","renameTable","oldTableOrName","newTableName","_this17","oldTable","isTable","newTable","clone","escapePath","columnNames","map","join","newIndexName","namingStrategy","indexName","where","indexType","isUnique","isSpatial","isFulltext","referencedColumnNames","newForeignKeyName","foreignKeyName","onDelete","onUpdate","replaceCachedTable","addColumn","_this18","clonedTable","skipColumnLevelPrimary","primaryColumns","buildCreateColumnSql","isPrimary","generatedColumn","columns","find","isGenerated","generationStrategy","nonGeneratedColumn","undefined","columnIndex","createIndexSql","uniqueIndex","uniques","addColumns","_this19","renameColumn","oldTableColumnOrName","newTableColumnOrName","_this20","oldColumn","c","newColumn","changeColumn","oldColumnOrName","_this21","type","generatedType","dropColumn","findColumnIndices","splice","indexOf","findColumnForeignKeys","oldTableColumn","isColumnChanged","primaryColumn","tableUnique","unique","changeColumns","changedColumns","_this22","columnOrName","_this23","findColumnByName","tableColumn","uniqueName","uniqueConstraintName","foundUnique","foundIndex","removeColumn","dropColumns","_this24","createPrimaryKey","_this25","createPrimaryKeySql","dropPrimaryKeySql","updatePrimaryKeys","_this26","filter","columnNamesString","newOrExistGeneratedColumn","changedGeneratedColumn","dropPrimaryKey","_this27","createUniqueConstraint","uniqueConstraint","createUniqueConstraints","uniqueConstraints","dropUniqueConstraint","uniqueOrName","dropUniqueConstraints","createCheckConstraint","checkConstraint","createCheckConstraints","checkConstraints","dropCheckConstraint","checkOrName","dropCheckConstraints","createExclusionConstraint","exclusionConstraint","createExclusionConstraints","exclusionConstraints","dropExclusionConstraint","exclusionOrName","dropExclusionConstraints","createForeignKey","_this28","createForeignKeySql","addForeignKey","_this29","promises","all","dropForeignKey","foreignKeyOrName","_this30","isTableForeignKey","fk","removeForeignKey","_this31","createIndex","_this32","generateIndexName","addIndex","createIndices","_this33","dropIndex","indexOrName","_this34","isTableIndex","i","removeIndex","dropIndices","_this35","clearTable","_this36","clearDatabase","_this37","dbName","isDatabaseExist","isAnotherTransactionActive","selectViewDropsQuery","dropViewQueries","q","disableForeignKeysCheckQuery","dropTablesQuery","enableForeignKeysCheckQuery","dropQueries","error","rollbackError","loadViews","viewNames","_this38","getTypeormMetadataTableName","currentDatabase","viewsCondition","VIEW","dbViews","dbView","db","buildTableName","expression","loadTables","tableNames","_this39","dbTables","tablesSql","tablesCondition","split","columnsCondition","TABLE_NAME","TABLE_SCHEMA","columnsSql","primaryKeySql","collationsSql","indicesCondition","indicesSql","foreignKeysCondition","foreignKeysSql","dbColumns","dbPrimaryKeys","dbCollations","dbIndices","dbForeignKeys","_ref2","dbTable","dbCollation","coll","defaultCollation","defaultCharset","dbColumn","columnUniqueIndices","dbIndex","parseInt","tableMetadata","entityMetadatas","metadata","hasIgnoredIndex","some","synchronize","isConstraintComposite","every","toLowerCase","unsigned","zerofill","withWidthColumnTypes","width","substring","isDefaultColumnWidth","default","asExpression","isNullable","dbPrimaryKey","comment","charset","collation","withLengthColumnTypes","toString","isDefaultColumnLength","isDefaultColumnPrecision","precision","isDefaultColumnScale","scale","colType","items","lastIndexOf","enum","item","tableForeignKeyConstraints","uniq","dbForeignKey","dbFk","referencedTableName","referencedDatabase","tableIndexConstraints","constraint","nonUnique","_x3","columnDefinitions","isUniqueIndexExist","isUniqueConstraintExist","uniqueExist","engine","getQuery","_this40","trim","insertTypeormMetadataSql","value","viewOrPath","_this41","deleteTypeormMetadataSql","escapeComment","replace","skipPrimary","skipName","createFullType","hasMetadata","getMetadata","columnMetadata","findColumnWithDatabaseName","defaultWidthForType","dataTypeDefaults","typesWithReducedUnsignedDefault","needsAdjustment"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlQueryRunner.js"],"sourcesContent":["import { QueryResult } from \"../../query-runner/QueryResult\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TypeORMError } from \"../../error\";\nimport { MetadataTableType } from \"../types/MetadataTableType\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Runs queries on a single mysql database connection.\n */\nexport class AuroraMysqlQueryRunner extends BaseQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver, client) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.client = client;\n        this.broadcaster = new Broadcaster(this);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect() {\n        return {};\n    }\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release() {\n        this.isReleased = true;\n        if (this.databaseConnection)\n            this.databaseConnection.release();\n        return Promise.resolve();\n    }\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel) {\n        this.isTransactionActive = true;\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\");\n        }\n        catch (err) {\n            this.isTransactionActive = false;\n            throw err;\n        }\n        if (this.transactionDepth === 0) {\n            await this.client.startTransaction();\n        }\n        else {\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`);\n        }\n        this.transactionDepth += 1;\n        await this.broadcaster.broadcast(\"AfterTransactionStart\");\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\");\n        if (this.transactionDepth > 1) {\n            await this.query(`RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        else {\n            await this.client.commitTransaction();\n            this.isTransactionActive = false;\n        }\n        this.transactionDepth -= 1;\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\");\n    }\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction() {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\");\n        if (this.transactionDepth > 1) {\n            await this.query(`ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`);\n        }\n        else {\n            await this.client.rollbackTransaction();\n            this.isTransactionActive = false;\n        }\n        this.transactionDepth -= 1;\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\");\n    }\n    /**\n     * Executes a raw SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const raw = await this.client.query(query, parameters);\n        const result = new QueryResult();\n        result.raw = raw;\n        if ((raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"records\")) && Array.isArray(raw.records)) {\n            result.records = raw.records;\n        }\n        if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"numberOfRecordsUpdated\")) {\n            result.affected = raw.numberOfRecordsUpdated;\n        }\n        if (!useStructuredResult) {\n            return result.raw;\n        }\n        return result;\n    }\n    /**\n     * Returns raw data stream.\n     */\n    stream(query, parameters, onEnd, onError) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                const stream = databaseConnection.query(query, parameters);\n                if (onEnd)\n                    stream.on(\"end\", onEnd);\n                if (onError)\n                    stream.on(\"error\", onError);\n                ok(stream);\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    }\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases() {\n        return Promise.resolve([]);\n    }\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database) {\n        throw new TypeORMError(`MySql driver does not support table schemas`);\n    }\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database) {\n        const result = await this.query(`SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\` WHERE \\`SCHEMA_NAME\\` = '${database}'`);\n        return result.length ? true : false;\n    }\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase() {\n        const query = await this.query(`SELECT DATABASE() AS \\`db_name\\``);\n        return query[0][\"db_name\"];\n    }\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema) {\n        throw new TypeORMError(`MySql driver does not support table schemas`);\n    }\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema() {\n        const query = await this.query(`SELECT SCHEMA() AS \\`schema_name\\``);\n        return query[0][\"schema_name\"];\n    }\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName) {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName, column) {\n        const parsedTableName = this.driver.parseTableName(tableOrName);\n        const columnName = InstanceChecker.isTableColumn(column)\n            ? column.name\n            : column;\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database, ifNotExist) {\n        const up = ifNotExist\n            ? `CREATE DATABASE IF NOT EXISTS \\`${database}\\``\n            : `CREATE DATABASE \\`${database}\\``;\n        const down = `DROP DATABASE \\`${database}\\``;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database, ifExist) {\n        const up = ifExist\n            ? `DROP DATABASE IF EXISTS \\`${database}\\``\n            : `DROP DATABASE \\`${database}\\``;\n        const down = `CREATE DATABASE \\`${database}\\``;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemaPath, ifNotExist) {\n        throw new TypeORMError(`Schema create queries are not supported by MySql driver.`);\n    }\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath, ifExist) {\n        throw new TypeORMError(`Schema drop queries are not supported by MySql driver.`);\n    }\n    /**\n     * Creates a new table.\n     */\n    async createTable(table, ifNotExist = false, createForeignKeys = true) {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist)\n                return Promise.resolve();\n        }\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n        // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order\n        // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index\n        // if it related to the foreign key.\n        // createTable does not need separate method to create indices, because it create indices in the same query with table creation.\n        table.indices.forEach((index) => downQueries.push(this.dropIndexSql(table, index)));\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        return this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drop the table.\n     */\n    async dropTable(target, ifExist, dropForeignKeys = true) {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist)\n                return Promise.resolve();\n        }\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys = dropForeignKeys;\n        const tablePath = this.getTablePath(target);\n        const table = await this.getCachedTable(tablePath);\n        const upQueries = [];\n        const downQueries = [];\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n        table.indices.forEach((index) => upQueries.push(this.dropIndexSql(table, index)));\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Creates a new view.\n     */\n    async createView(view, syncWithMetadata = false) {\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(this.createViewSql(view));\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Drops the view.\n     */\n    async dropView(target) {\n        const viewName = InstanceChecker.isView(target) ? target.name : target;\n        const view = await this.getCachedView(viewName);\n        const upQueries = [];\n        const downQueries = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName, newTableName) {\n        const upQueries = [];\n        const downQueries = [];\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const { database } = this.driver.parseTableName(oldTable);\n        newTable.name = database ? `${database}.${newTableName}` : newTableName;\n        // rename table\n        upQueries.push(new Query(`RENAME TABLE ${this.escapePath(oldTable)} TO ${this.escapePath(newTable)}`));\n        downQueries.push(new Query(`RENAME TABLE ${this.escapePath(newTable)} TO ${this.escapePath(oldTable)}`));\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            // build new constraint name\n            const columnNames = index.columnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\", \");\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n            // build queries\n            let indexType = \"\";\n            if (index.isUnique)\n                indexType += \"UNIQUE \";\n            if (index.isSpatial)\n                indexType += \"SPATIAL \";\n            if (index.isFulltext)\n                indexType += \"FULLTEXT \";\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`));\n            // replace constraint name\n            index.name = newIndexName;\n        });\n        // rename foreign key constraint\n        newTable.foreignKeys.forEach((foreignKey) => {\n            // build new constraint name\n            const columnNames = foreignKey.columnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\", \");\n            const referencedColumnNames = foreignKey.referencedColumnNames\n                .map((column) => `\\`${column}\\``)\n                .join(\",\");\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n            // build queries\n            let up = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\n                `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n            if (foreignKey.onDelete)\n                up += ` ON DELETE ${foreignKey.onDelete}`;\n            if (foreignKey.onUpdate)\n                up += ` ON UPDATE ${foreignKey.onUpdate}`;\n            let down = `ALTER TABLE ${this.escapePath(newTable)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n                `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n            if (foreignKey.onDelete)\n                down += ` ON DELETE ${foreignKey.onDelete}`;\n            if (foreignKey.onUpdate)\n                down += ` ON UPDATE ${foreignKey.onUpdate}`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n        await this.executeQueries(upQueries, downQueries);\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName, column) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \\`${column.name}\\``));\n        // create or update primary key constraint\n        if (column.isPrimary && skipColumnLevelPrimary) {\n            // if we already have generated column, we must temporary drop AUTO_INCREMENT property.\n            const generatedColumn = clonedTable.columns.find((column) => column.isGenerated &&\n                column.generationStrategy === \"increment\");\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${column.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(column, true)}`));\n            }\n            const primaryColumns = clonedTable.primaryColumns;\n            let columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n            primaryColumns.push(column);\n            columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n            // if we previously dropped AUTO_INCREMENT property, we must bring it back\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(column, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${column.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            }\n        }\n        // create column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n        else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table, [\n                    column.name,\n                ]),\n                columnNames: [column.name],\n                isUnique: true,\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames,\n            }));\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${column.name}\\`)`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n        }\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        let newColumn = undefined;\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName;\n        }\n        else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName, oldColumnOrName, newColumn) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        const oldColumn = InstanceChecker.isTableColumn(oldColumnOrName)\n            ? oldColumnOrName\n            : table.columns.find((column) => column.name === oldColumnOrName);\n        if (!oldColumn)\n            throw new TypeORMError(`Column \"${oldColumnOrName}\" was not found in the \"${table.name}\" table.`);\n        if ((newColumn.isGenerated !== oldColumn.isGenerated &&\n            newColumn.generationStrategy !== \"uuid\") ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length ||\n            oldColumn.generatedType !== newColumn.generatedType) {\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n            // update cloned table\n            clonedTable = table.clone();\n        }\n        else {\n            if (newColumn.name !== oldColumn.name) {\n                // We don't change any column properties, just rename it.\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${oldColumn.name}\\` \\`${newColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${newColumn.name}\\` \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true, true)}`));\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const columnNames = index.columnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\", \");\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                    // build queries\n                    let indexType = \"\";\n                    if (index.isUnique)\n                        indexType += \"UNIQUE \";\n                    if (index.isSpatial)\n                        indexType += \"SPATIAL \";\n                    if (index.isFulltext)\n                        indexType += \"FULLTEXT \";\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`));\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const columnNames = foreignKey.columnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\", \");\n                    const referencedColumnNames = foreignKey.referencedColumnNames\n                        .map((column) => `\\`${column}\\``)\n                        .join(\",\");\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n                    // build queries\n                    let up = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\n                        `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n                    if (foreignKey.onDelete)\n                        up += ` ON DELETE ${foreignKey.onDelete}`;\n                    if (foreignKey.onUpdate)\n                        up += ` ON UPDATE ${foreignKey.onUpdate}`;\n                    let down = `ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n                        `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n                    if (foreignKey.onDelete)\n                        down += ` ON DELETE ${foreignKey.onDelete}`;\n                    if (foreignKey.onUpdate)\n                        down += ` ON UPDATE ${foreignKey.onUpdate}`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find((column) => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${newColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true)}`));\n            }\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n                const generatedColumn = clonedTable.columns.find((column) => column.isGenerated &&\n                    column.generationStrategy === \"increment\");\n                if (generatedColumn) {\n                    const nonGeneratedColumn = generatedColumn.clone();\n                    nonGeneratedColumn.isGenerated = false;\n                    nonGeneratedColumn.generationStrategy = undefined;\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n                }\n                const primaryColumns = clonedTable.primaryColumns;\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const columnNames = primaryColumns\n                        .map((column) => `\\`${column.name}\\``)\n                        .join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n                }\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find((column) => column.name === newColumn.name);\n                    column.isPrimary = true;\n                    const columnNames = primaryColumns\n                        .map((column) => `\\`${column.name}\\``)\n                        .join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n                }\n                else {\n                    const primaryColumn = primaryColumns.find((c) => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                    // update column in table\n                    const column = clonedTable.columns.find((column) => column.name === newColumn.name);\n                    column.isPrimary = false;\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const columnNames = primaryColumns\n                            .map((column) => `\\`${column.name}\\``)\n                            .join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n                    }\n                }\n                // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back\n                if (generatedColumn) {\n                    const nonGeneratedColumn = generatedColumn.clone();\n                    nonGeneratedColumn.isGenerated = false;\n                    nonGeneratedColumn.generationStrategy = undefined;\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                }\n            }\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table, [\n                            newColumn.name,\n                        ]),\n                        columnNames: [newColumn.name],\n                        isUnique: true,\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames,\n                    }));\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n                }\n                else {\n                    const uniqueIndex = clonedTable.indices.find((index) => {\n                        return (index.columnNames.length === 1 &&\n                            index.isUnique === true &&\n                            !!index.columnNames.find((columnName) => columnName === newColumn.name));\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex), 1);\n                    const tableUnique = clonedTable.uniques.find((unique) => unique.name === uniqueIndex.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${uniqueIndex.name}\\``));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`));\n                }\n            }\n        }\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName, changedColumns) {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName, columnOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new TypeORMError(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n        const clonedTable = table.clone();\n        const upQueries = [];\n        const downQueries = [];\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n            const generatedColumn = clonedTable.columns.find((column) => column.isGenerated &&\n                column.generationStrategy === \"increment\");\n            if (generatedColumn) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n            }\n            // dropping primary key constraint\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\\`${primaryColumn.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn.isPrimary = false;\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\\`${primaryColumn.name}\\``)\n                    .join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP PRIMARY KEY`));\n            }\n            // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back\n            if (generatedColumn && generatedColumn.name !== column.name) {\n                const nonGeneratedColumn = generatedColumn.clone();\n                nonGeneratedColumn.isGenerated = false;\n                nonGeneratedColumn.generationStrategy = undefined;\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            }\n        }\n        // drop column index\n        const columnIndex = clonedTable.indices.find((index) => index.columnNames.length === 1 &&\n            index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n        else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table, [\n                column.name,\n            ]);\n            const foundUnique = clonedTable.uniques.find((unique) => unique.name === uniqueName);\n            if (foundUnique)\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n            const indexName = this.connection.namingStrategy.indexName(table, [\n                column.name,\n            ]);\n            const foundIndex = clonedTable.indices.find((index) => index.name === indexName);\n            if (foundIndex)\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP INDEX \\`${indexName}\\``));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD UNIQUE INDEX \\`${indexName}\\` (\\`${column.name}\\`)`));\n        }\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \\`${column.name}\\``));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(column, true)}`));\n        await this.executeQueries(upQueries, downQueries);\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName, columns) {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName, columnNames) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const up = this.createPrimaryKeySql(table, columnNames);\n        const down = this.dropPrimaryKeySql(table);\n        await this.executeQueries(up, down);\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true;\n        });\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName, columns) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map((column) => column.name);\n        const upQueries = [];\n        const downQueries = [];\n        // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\n        const generatedColumn = clonedTable.columns.find((column) => column.isGenerated && column.generationStrategy === \"increment\");\n        if (generatedColumn) {\n            const nonGeneratedColumn = generatedColumn.clone();\n            nonGeneratedColumn.isGenerated = false;\n            nonGeneratedColumn.generationStrategy = undefined;\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`));\n        }\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const columnNames = primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNames})`));\n        }\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true));\n        const columnNamesString = columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`));\n        // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back\n        const newOrExistGeneratedColumn = generatedColumn\n            ? generatedColumn\n            : columns.find((column) => column.isGenerated &&\n                column.generationStrategy === \"increment\");\n        if (newOrExistGeneratedColumn) {\n            const nonGeneratedColumn = newOrExistGeneratedColumn.clone();\n            nonGeneratedColumn.isGenerated = false;\n            nonGeneratedColumn.generationStrategy = undefined;\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(newOrExistGeneratedColumn, true)}`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} CHANGE \\`${newOrExistGeneratedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`));\n            // if column changed to generated, we must update it in table\n            const changedGeneratedColumn = clonedTable.columns.find((column) => column.name === newOrExistGeneratedColumn.name);\n            changedGeneratedColumn.isGenerated = true;\n            changedGeneratedColumn.generationStrategy = \"increment\";\n        }\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map((column) => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false;\n        });\n    }\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName, uniqueConstraint) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName, uniqueConstraints) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName, uniqueOrName) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName, uniqueConstraints) {\n        throw new TypeORMError(`MySql does not support unique constraints. Use unique index instead.`);\n    }\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName, checkConstraint) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName, checkConstraints) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName, checkOrName) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName, checkConstraints) {\n        throw new TypeORMError(`MySql does not support check constraints.`);\n    }\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName, exclusionConstraint) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName, exclusionOrName) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName, exclusionConstraints) {\n        throw new TypeORMError(`MySql does not support exclusion constraints.`);\n    }\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName, foreignKey) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table, foreignKey.columnNames);\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName, foreignKeys) {\n        const promises = foreignKeys.map((foreignKey) => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops a foreign key.\n     */\n    async dropForeignKey(tableOrName, foreignKeyOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new TypeORMError(`Supplied foreign key was not found in table ${table.name}`);\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName, foreignKeys) {\n        const promises = foreignKeys.map((foreignKey) => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName, index) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index, true);\n    }\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName, indices) {\n        const promises = indices.map((index) => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName, indexOrName) {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName);\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new TypeORMError(`Supplied index ${indexOrName} was not found in table ${table.name}`);\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.generateIndexName(table, index);\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index, true);\n    }\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName, indices) {\n        const promises = indices.map((index) => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableOrName) {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableOrName)}`);\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase(database) {\n        const dbName = database ? database : this.driver.database;\n        if (dbName) {\n            const isDatabaseExist = await this.hasDatabase(dbName);\n            if (!isDatabaseExist)\n                return Promise.resolve();\n        }\n        else {\n            throw new TypeORMError(`Can not clear database. No database is specified`);\n        }\n        const isAnotherTransactionActive = this.isTransactionActive;\n        if (!isAnotherTransactionActive)\n            await this.startTransaction();\n        try {\n            const selectViewDropsQuery = `SELECT concat('DROP VIEW IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\n            const dropViewQueries = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map((q) => this.query(q[\"query\"])));\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\n            await this.query(disableForeignKeysCheckQuery);\n            const dropQueries = await this.query(dropTablesQuery);\n            await Promise.all(dropQueries.map((query) => this.query(query[\"query\"])));\n            await this.query(enableForeignKeysCheckQuery);\n            if (!isAnotherTransactionActive) {\n                await this.commitTransaction();\n            }\n        }\n        catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive) {\n                    await this.rollbackTransaction();\n                }\n            }\n            catch (rollbackError) { }\n            throw error;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    async loadViews(viewNames) {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable) {\n            return [];\n        }\n        if (!viewNames) {\n            viewNames = [];\n        }\n        const currentDatabase = await this.getCurrentDatabase();\n        const viewsCondition = viewNames\n            .map((tableName) => {\n            let { database, tableName: name } = this.driver.parseTableName(tableName);\n            if (!database) {\n                database = currentDatabase;\n            }\n            return `(\\`t\\`.\\`schema\\` = '${database}' AND \\`t\\`.\\`name\\` = '${name}')`;\n        })\n            .join(\" OR \");\n        const query = `SELECT \\`t\\`.*, \\`v\\`.\\`check_option\\` FROM ${this.escapePath(this.getTypeormMetadataTableName())} \\`t\\` ` +\n            `INNER JOIN \\`information_schema\\`.\\`views\\` \\`v\\` ON \\`v\\`.\\`table_schema\\` = \\`t\\`.\\`schema\\` AND \\`v\\`.\\`table_name\\` = \\`t\\`.\\`name\\` WHERE \\`t\\`.\\`type\\` = '${MetadataTableType.VIEW}' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView) => {\n            const view = new View();\n            const db = dbView[\"schema\"] === currentDatabase\n                ? undefined\n                : dbView[\"schema\"];\n            view.database = dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], undefined, db);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    async loadTables(tableNames) {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return [];\n        }\n        const dbTables = [];\n        const currentDatabase = await this.getCurrentDatabase();\n        if (!tableNames) {\n            const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\``;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        else {\n            const tablesCondition = tableNames\n                .map((tableName) => {\n                let [database, name] = tableName.split(\".\");\n                if (!name) {\n                    name = database;\n                    database = this.driver.database || currentDatabase;\n                }\n                return `(\\`TABLE_SCHEMA\\` = '${database}' AND \\`TABLE_NAME\\` = '${name}')`;\n            })\n                .join(\" OR \");\n            const tablesSql = `SELECT TABLE_NAME, TABLE_SCHEMA FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE ` +\n                tablesCondition;\n            dbTables.push(...(await this.query(tablesSql)));\n        }\n        if (dbTables.length === 0) {\n            return [];\n        }\n        const columnsCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n            return `(\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n        })\n            .join(\" OR \");\n        const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE ` +\n            columnsCondition;\n        const primaryKeySql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` WHERE \\`CONSTRAINT_NAME\\` = 'PRIMARY' AND (${columnsCondition})`;\n        const collationsSql = `SELECT \\`SCHEMA_NAME\\`, \\`DEFAULT_CHARACTER_SET_NAME\\` as \\`CHARSET\\`, \\`DEFAULT_COLLATION_NAME\\` AS \\`COLLATION\\` FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\``;\n        const indicesCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n            return `(\\`s\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`s\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n        })\n            .join(\" OR \");\n        const indicesSql = `SELECT \\`s\\`.* FROM \\`INFORMATION_SCHEMA\\`.\\`STATISTICS\\` \\`s\\` ` +\n            `LEFT JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`s\\`.\\`INDEX_NAME\\` = \\`rc\\`.\\`CONSTRAINT_NAME\\` ` +\n            `WHERE (${indicesCondition}) AND \\`s\\`.\\`INDEX_NAME\\` != 'PRIMARY' AND \\`rc\\`.\\`CONSTRAINT_NAME\\` IS NULL`;\n        const foreignKeysCondition = dbTables\n            .map(({ TABLE_NAME, TABLE_SCHEMA }) => {\n            return `(\\`kcu\\`.\\`TABLE_SCHEMA\\` = '${TABLE_SCHEMA}' AND \\`kcu\\`.\\`TABLE_NAME\\` = '${TABLE_NAME}')`;\n        })\n            .join(\" OR \");\n        const foreignKeysSql = `SELECT \\`kcu\\`.\\`TABLE_SCHEMA\\`, \\`kcu\\`.\\`TABLE_NAME\\`, \\`kcu\\`.\\`CONSTRAINT_NAME\\`, \\`kcu\\`.\\`COLUMN_NAME\\`, \\`kcu\\`.\\`REFERENCED_TABLE_SCHEMA\\`, ` +\n            `\\`kcu\\`.\\`REFERENCED_TABLE_NAME\\`, \\`kcu\\`.\\`REFERENCED_COLUMN_NAME\\`, \\`rc\\`.\\`DELETE_RULE\\` \\`ON_DELETE\\`, \\`rc\\`.\\`UPDATE_RULE\\` \\`ON_UPDATE\\` ` +\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`kcu\\` ` +\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`rc\\`.\\`constraint_name\\` = \\`kcu\\`.\\`constraint_name\\` ` +\n            `WHERE ` +\n            foreignKeysCondition;\n        const [dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys,] = await Promise.all([\n            this.query(columnsSql),\n            this.query(primaryKeySql),\n            this.query(collationsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async (dbTable) => {\n            const table = new Table();\n            const dbCollation = dbCollations.find((coll) => coll[\"SCHEMA_NAME\"] === dbTable[\"TABLE_SCHEMA\"]);\n            const defaultCollation = dbCollation[\"COLLATION\"];\n            const defaultCharset = dbCollation[\"CHARSET\"];\n            // We do not need to join database name, when database is by default.\n            const db = dbTable[\"TABLE_SCHEMA\"] === currentDatabase\n                ? undefined\n                : dbTable[\"TABLE_SCHEMA\"];\n            table.database = dbTable[\"TABLE_SCHEMA\"];\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, db);\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter((dbColumn) => dbColumn[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                dbColumn[\"TABLE_SCHEMA\"] ===\n                    dbTable[\"TABLE_SCHEMA\"])\n                .map((dbColumn) => {\n                const columnUniqueIndices = dbIndices.filter((dbIndex) => {\n                    return (dbIndex[\"TABLE_NAME\"] ===\n                        dbTable[\"TABLE_NAME\"] &&\n                        dbIndex[\"TABLE_SCHEMA\"] ===\n                            dbTable[\"TABLE_SCHEMA\"] &&\n                        dbIndex[\"COLUMN_NAME\"] ===\n                            dbColumn[\"COLUMN_NAME\"] &&\n                        parseInt(dbIndex[\"NON_UNIQUE\"], 10) === 0);\n                });\n                const tableMetadata = this.connection.entityMetadatas.find((metadata) => this.getTablePath(table) ===\n                    this.getTablePath(metadata));\n                const hasIgnoredIndex = columnUniqueIndices.length > 0 &&\n                    tableMetadata &&\n                    tableMetadata.indices.some((index) => {\n                        return columnUniqueIndices.some((uniqueIndex) => {\n                            return (index.name ===\n                                uniqueIndex[\"INDEX_NAME\"] &&\n                                index.synchronize === false);\n                        });\n                    });\n                const isConstraintComposite = columnUniqueIndices.every((uniqueIndex) => {\n                    return dbIndices.some((dbIndex) => dbIndex[\"INDEX_NAME\"] ===\n                        uniqueIndex[\"INDEX_NAME\"] &&\n                        dbIndex[\"COLUMN_NAME\"] !==\n                            dbColumn[\"COLUMN_NAME\"]);\n                });\n                const tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                // Unsigned columns are handled differently when it comes to width.\n                // Hence, we need to set the unsigned attribute before we check the width.\n                tableColumn.unsigned = tableColumn.zerofill\n                    ? true\n                    : dbColumn[\"COLUMN_TYPE\"].indexOf(\"unsigned\") !== -1;\n                if (this.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                    const width = dbColumn[\"COLUMN_TYPE\"].substring(dbColumn[\"COLUMN_TYPE\"].indexOf(\"(\") + 1, dbColumn[\"COLUMN_TYPE\"].indexOf(\")\"));\n                    tableColumn.width =\n                        width &&\n                            !this.isDefaultColumnWidth(table, tableColumn, parseInt(width))\n                            ? parseInt(width)\n                            : undefined;\n                }\n                if (dbColumn[\"COLUMN_DEFAULT\"] === null ||\n                    dbColumn[\"COLUMN_DEFAULT\"] === undefined) {\n                    tableColumn.default = undefined;\n                }\n                else {\n                    tableColumn.default =\n                        dbColumn[\"COLUMN_DEFAULT\"] ===\n                            \"CURRENT_TIMESTAMP\"\n                            ? dbColumn[\"COLUMN_DEFAULT\"]\n                            : `'${dbColumn[\"COLUMN_DEFAULT\"]}'`;\n                }\n                if (dbColumn[\"EXTRA\"].indexOf(\"on update\") !== -1) {\n                    tableColumn.onUpdate = dbColumn[\"EXTRA\"].substring(dbColumn[\"EXTRA\"].indexOf(\"on update\") + 10);\n                }\n                if (dbColumn[\"GENERATION_EXPRESSION\"]) {\n                    tableColumn.asExpression =\n                        dbColumn[\"GENERATION_EXPRESSION\"];\n                    tableColumn.generatedType =\n                        dbColumn[\"EXTRA\"].indexOf(\"VIRTUAL\") !== -1\n                            ? \"VIRTUAL\"\n                            : \"STORED\";\n                }\n                tableColumn.isUnique =\n                    columnUniqueIndices.length > 0 &&\n                        !hasIgnoredIndex &&\n                        !isConstraintComposite;\n                tableColumn.isNullable =\n                    dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                tableColumn.isPrimary = dbPrimaryKeys.some((dbPrimaryKey) => {\n                    return (dbPrimaryKey[\"TABLE_NAME\"] ===\n                        dbColumn[\"TABLE_NAME\"] &&\n                        dbPrimaryKey[\"TABLE_SCHEMA\"] ===\n                            dbColumn[\"TABLE_SCHEMA\"] &&\n                        dbPrimaryKey[\"COLUMN_NAME\"] ===\n                            dbColumn[\"COLUMN_NAME\"]);\n                });\n                tableColumn.zerofill =\n                    dbColumn[\"COLUMN_TYPE\"].indexOf(\"zerofill\") !== -1;\n                tableColumn.isGenerated =\n                    dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n                if (tableColumn.isGenerated)\n                    tableColumn.generationStrategy = \"increment\";\n                tableColumn.comment =\n                    typeof dbColumn[\"COLUMN_COMMENT\"] === \"string\" &&\n                        dbColumn[\"COLUMN_COMMENT\"].length === 0\n                        ? undefined\n                        : dbColumn[\"COLUMN_COMMENT\"];\n                if (dbColumn[\"CHARACTER_SET_NAME\"])\n                    tableColumn.charset =\n                        dbColumn[\"CHARACTER_SET_NAME\"] ===\n                            defaultCharset\n                            ? undefined\n                            : dbColumn[\"CHARACTER_SET_NAME\"];\n                if (dbColumn[\"COLLATION_NAME\"])\n                    tableColumn.collation =\n                        dbColumn[\"COLLATION_NAME\"] === defaultCollation\n                            ? undefined\n                            : dbColumn[\"COLLATION_NAME\"];\n                // check only columns that have length property\n                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 &&\n                    dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                    const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length)\n                        ? length\n                        : \"\";\n                }\n                if (tableColumn.type === \"decimal\" ||\n                    tableColumn.type === \"double\" ||\n                    tableColumn.type === \"float\") {\n                    if (dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                        !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                        tableColumn.precision = parseInt(dbColumn[\"NUMERIC_PRECISION\"]);\n                    if (dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                        !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                        tableColumn.scale = parseInt(dbColumn[\"NUMERIC_SCALE\"]);\n                }\n                if (tableColumn.type === \"enum\" ||\n                    tableColumn.type === \"simple-enum\" ||\n                    tableColumn.type === \"set\") {\n                    const colType = dbColumn[\"COLUMN_TYPE\"];\n                    const items = colType\n                        .substring(colType.indexOf(\"(\") + 1, colType.lastIndexOf(\")\"))\n                        .split(\",\");\n                    tableColumn.enum = items.map((item) => {\n                        return item.substring(1, item.length - 1);\n                    });\n                    tableColumn.length = \"\";\n                }\n                if ((tableColumn.type === \"datetime\" ||\n                    tableColumn.type === \"time\" ||\n                    tableColumn.type === \"timestamp\") &&\n                    dbColumn[\"DATETIME_PRECISION\"] !== null &&\n                    dbColumn[\"DATETIME_PRECISION\"] !== undefined &&\n                    !this.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn[\"DATETIME_PRECISION\"]))) {\n                    tableColumn.precision = parseInt(dbColumn[\"DATETIME_PRECISION\"]);\n                }\n                return tableColumn;\n            });\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter((dbForeignKey) => {\n                return (dbForeignKey[\"TABLE_NAME\"] ===\n                    dbTable[\"TABLE_NAME\"] &&\n                    dbForeignKey[\"TABLE_SCHEMA\"] ===\n                        dbTable[\"TABLE_SCHEMA\"]);\n            }), (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"]);\n            table.foreignKeys = tableForeignKeyConstraints.map((dbForeignKey) => {\n                const foreignKeys = dbForeignKeys.filter((dbFk) => dbFk[\"CONSTRAINT_NAME\"] ===\n                    dbForeignKey[\"CONSTRAINT_NAME\"]);\n                // if referenced table located in currently used db, we don't need to concat db name to table name.\n                const database = dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"] ===\n                    currentDatabase\n                    ? undefined\n                    : dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"];\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], undefined, database);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map((dbFk) => dbFk[\"COLUMN_NAME\"]),\n                    referencedDatabase: dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map((dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"],\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"],\n                });\n            });\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter((dbIndex) => {\n                return (dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                    dbIndex[\"TABLE_SCHEMA\"] === dbTable[\"TABLE_SCHEMA\"]);\n            }), (dbIndex) => dbIndex[\"INDEX_NAME\"]);\n            table.indices = tableIndexConstraints.map((constraint) => {\n                const indices = dbIndices.filter((index) => {\n                    return (index[\"TABLE_SCHEMA\"] ===\n                        constraint[\"TABLE_SCHEMA\"] &&\n                        index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                        index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]);\n                });\n                const nonUnique = parseInt(constraint[\"NON_UNIQUE\"], 10);\n                return new TableIndex({\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                    isUnique: nonUnique === 0,\n                    isSpatial: constraint[\"INDEX_TYPE\"] === \"SPATIAL\",\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\",\n                });\n            });\n            return table;\n        }));\n    }\n    /**\n     * Builds create table sql\n     */\n    createTableSql(table, createForeignKeys) {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column, true))\n            .join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n        // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n            const isUniqueIndexExist = table.indices.some((index) => {\n                return (index.columnNames.length === 1 &&\n                    !!index.isUnique &&\n                    index.columnNames.indexOf(column.name) !== -1);\n            });\n            const isUniqueConstraintExist = table.uniques.some((unique) => {\n                return (unique.columnNames.length === 1 &&\n                    unique.columnNames.indexOf(column.name) !== -1);\n            });\n            if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                table.indices.push(new TableIndex({\n                    name: this.connection.namingStrategy.uniqueConstraintName(table, [column.name]),\n                    columnNames: [column.name],\n                    isUnique: true,\n                }));\n        });\n        // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach((unique) => {\n                const uniqueExist = table.indices.some((index) => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true,\n                    }));\n                }\n            });\n        }\n        if (table.indices.length > 0) {\n            const indicesSql = table.indices\n                .map((index) => {\n                const columnNames = index.columnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n                let indexType = \"\";\n                if (index.isUnique)\n                    indexType += \"UNIQUE \";\n                if (index.isSpatial)\n                    indexType += \"SPATIAL \";\n                if (index.isFulltext)\n                    indexType += \"FULLTEXT \";\n                return `${indexType}INDEX \\`${index.name}\\` (${columnNames})`;\n            })\n                .join(\", \");\n            sql += `, ${indicesSql}`;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                const columnNames = fk.columnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table, fk.columnNames);\n                const referencedColumnNames = fk.referencedColumnNames\n                    .map((columnName) => `\\`${columnName}\\``)\n                    .join(\", \");\n                let constraint = `CONSTRAINT \\`${fk.name}\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(this.getTablePath(fk))} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n                return constraint;\n            })\n                .join(\", \");\n            sql += `, ${foreignKeysSql}`;\n        }\n        if (table.primaryColumns.length > 0) {\n            const columnNames = table.primaryColumns\n                .map((column) => `\\`${column.name}\\``)\n                .join(\", \");\n            sql += `, PRIMARY KEY (${columnNames})`;\n        }\n        sql += `) ENGINE=${table.engine || \"InnoDB\"}`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop table sql\n     */\n    dropTableSql(tableOrName) {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrName)}`);\n    }\n    createViewSql(view) {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        }\n        else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view\n                .expression(this.connection)\n                .getQuery()}`);\n        }\n    }\n    async insertViewDefinitionSql(view) {\n        const currentDatabase = await this.getCurrentDatabase();\n        const expression = typeof view.expression === \"string\"\n            ? view.expression.trim()\n            : view.expression(this.connection).getQuery();\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: currentDatabase,\n            name: view.name,\n            value: expression,\n        });\n    }\n    /**\n     * Builds drop view sql.\n     */\n    dropViewSql(viewOrPath) {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n    /**\n     * Builds remove view sql.\n     */\n    async deleteViewDefinitionSql(viewOrPath) {\n        const currentDatabase = await this.getCurrentDatabase();\n        const viewName = InstanceChecker.isView(viewOrPath)\n            ? viewOrPath.name\n            : viewOrPath;\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            schema: currentDatabase,\n            name: viewName,\n        });\n    }\n    /**\n     * Builds create index sql.\n     */\n    createIndexSql(table, index) {\n        const columns = index.columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \");\n        let indexType = \"\";\n        if (index.isUnique)\n            indexType += \"UNIQUE \";\n        if (index.isSpatial)\n            indexType += \"SPATIAL \";\n        if (index.isFulltext)\n            indexType += \"FULLTEXT \";\n        return new Query(`CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(table)} (${columns})`);\n    }\n    /**\n     * Builds drop index sql.\n     */\n    dropIndexSql(table, indexOrName) {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName;\n        return new Query(`DROP INDEX \\`${indexName}\\` ON ${this.escapePath(table)}`);\n    }\n    /**\n     * Builds create primary key sql.\n     */\n    createPrimaryKeySql(table, columnNames) {\n        const columnNamesString = columnNames\n            .map((columnName) => `\\`${columnName}\\``)\n            .join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD PRIMARY KEY (${columnNamesString})`);\n    }\n    /**\n     * Builds drop primary key sql.\n     */\n    dropPrimaryKeySql(table) {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP PRIMARY KEY`);\n    }\n    /**\n     * Builds create foreign key sql.\n     */\n    createForeignKeySql(table, foreignKey) {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\\`${column}\\``)\n            .join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\\`${column}\\``)\n            .join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(this.getTablePath(foreignKey))}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n        return new Query(sql);\n    }\n    /**\n     * Builds drop foreign key sql.\n     */\n    dropForeignKeySql(table, foreignKeyOrName) {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName.name\n            : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP FOREIGN KEY \\`${foreignKeyName}\\``);\n    }\n    /**\n     * Escapes a given comment so it's safe to include in a query.\n     */\n    escapeComment(comment) {\n        if (!comment || comment.length === 0) {\n            return `''`;\n        }\n        comment = comment\n            .replace(/\\\\/g, \"\\\\\\\\\") // MySQL allows escaping characters via backslashes\n            .replace(/'/g, \"''\")\n            .replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return `'${comment}'`;\n    }\n    /**\n     * Escapes given table or view path.\n     */\n    escapePath(target) {\n        const { database, tableName } = this.driver.parseTableName(target);\n        if (database && database !== this.driver.database) {\n            return `\\`${database}\\`.\\`${tableName}\\``;\n        }\n        return `\\`${tableName}\\``;\n    }\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    buildCreateColumnSql(column, skipPrimary, skipName = false) {\n        let c = \"\";\n        if (skipName) {\n            c = this.connection.driver.createFullType(column);\n        }\n        else {\n            c = `\\`${column.name}\\` ${this.connection.driver.createFullType(column)}`;\n        }\n        if (column.asExpression)\n            c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : \"VIRTUAL\"}`;\n        // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.\n        if (column.zerofill) {\n            c += \" ZEROFILL\";\n        }\n        else if (column.unsigned) {\n            c += \" UNSIGNED\";\n        }\n        if (column.enum)\n            c += ` (${column.enum\n                .map((value) => \"'\" + value + \"'\")\n                .join(\", \")})`;\n        if (column.charset)\n            c += ` CHARACTER SET \"${column.charset}\"`;\n        if (column.collation)\n            c += ` COLLATE \"${column.collation}\"`;\n        if (!column.isNullable)\n            c += \" NOT NULL\";\n        if (column.isNullable)\n            c += \" NULL\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated && column.generationStrategy === \"increment\")\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\";\n        if (column.comment)\n            c += ` COMMENT ${this.escapeComment(column.comment)}`;\n        if (column.default !== undefined && column.default !== null)\n            c += ` DEFAULT ${column.default}`;\n        if (column.onUpdate)\n            c += ` ON UPDATE ${column.onUpdate}`;\n        return c;\n    }\n    /**\n     * Checks if column display width is by default.\n     */\n    isDefaultColumnWidth(table, column, width) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.width)\n                return false;\n        }\n        const defaultWidthForType = this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].width;\n        if (defaultWidthForType) {\n            // In MariaDB & MySQL 5.7, the default widths of certain numeric types are 1 less than\n            // the usual defaults when the column is unsigned.\n            // This also applies to Aurora MySQL.\n            const typesWithReducedUnsignedDefault = [\n                \"int\",\n                \"tinyint\",\n                \"smallint\",\n                \"mediumint\",\n            ];\n            const needsAdjustment = typesWithReducedUnsignedDefault.indexOf(column.type) !== -1;\n            if (column.unsigned && needsAdjustment) {\n                return defaultWidthForType - 1 === width;\n            }\n            else {\n                return defaultWidthForType === width;\n            }\n        }\n        return false;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}