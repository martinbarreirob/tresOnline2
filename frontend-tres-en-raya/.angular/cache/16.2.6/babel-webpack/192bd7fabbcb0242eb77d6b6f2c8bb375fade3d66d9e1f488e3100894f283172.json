{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DriverUtils } from \"../DriverUtils\";\nimport { AuroraMysqlQueryRunner } from \"./AuroraMysqlQueryRunner\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { TypeORMError } from \"../../error\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class AuroraMysqlDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    /**\n     * Indicates if replication is enabled.\n     */\n    this.isReplicated = false;\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    this.treeSupport = true;\n    /**\n     * Represent transaction support by this driver\n     */\n    this.transactionSupport = \"nested\";\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n     */\n    this.supportedDataTypes = [\n    // numeric types\n    \"bit\", \"int\", \"integer\", \"tinyint\", \"smallint\", \"mediumint\", \"bigint\", \"float\", \"double\", \"double precision\", \"real\", \"decimal\", \"dec\", \"numeric\", \"fixed\", \"bool\", \"boolean\",\n    // date and time types\n    \"date\", \"datetime\", \"timestamp\", \"time\", \"year\",\n    // string types\n    \"char\", \"nchar\", \"national char\", \"varchar\", \"nvarchar\", \"national varchar\", \"blob\", \"text\", \"tinyblob\", \"tinytext\", \"mediumblob\", \"mediumtext\", \"longblob\", \"longtext\", \"enum\", \"set\", \"binary\", \"varbinary\",\n    // json data type\n    \"json\",\n    // spatial data types\n    \"geometry\", \"point\", \"linestring\", \"polygon\", \"multipoint\", \"multilinestring\", \"multipolygon\", \"geometrycollection\"];\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    this.supportedUpsertTypes = [\"on-duplicate-key-update\"];\n    /**\n     * Gets list of spatial column data types.\n     */\n    this.spatialTypes = [\"geometry\", \"point\", \"linestring\", \"polygon\", \"multipoint\", \"multilinestring\", \"multipolygon\", \"geometrycollection\"];\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    this.withLengthColumnTypes = [\"char\", \"varchar\", \"nvarchar\", \"binary\", \"varbinary\"];\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    this.withWidthColumnTypes = [\"bit\", \"tinyint\", \"smallint\", \"mediumint\", \"int\", \"integer\", \"bigint\"];\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    this.withPrecisionColumnTypes = [\"decimal\", \"dec\", \"numeric\", \"fixed\", \"float\", \"double\", \"double precision\", \"real\", \"time\", \"datetime\", \"timestamp\"];\n    /**\n     * Gets list of column data types that supports scale by a driver.\n     */\n    this.withScaleColumnTypes = [\"decimal\", \"dec\", \"numeric\", \"fixed\", \"float\", \"double\", \"double precision\", \"real\"];\n    /**\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n     */\n    this.unsignedAndZerofillTypes = [\"int\", \"integer\", \"smallint\", \"tinyint\", \"mediumint\", \"bigint\", \"decimal\", \"dec\", \"numeric\", \"fixed\", \"float\", \"double\", \"double precision\", \"real\"];\n    /**\n     * ORM has special columns and we need to know what database column types should be for those columns.\n     * Column types are driver dependant.\n     */\n    this.mappedDataTypes = {\n      createDate: \"datetime\",\n      createDatePrecision: 6,\n      createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n      updateDate: \"datetime\",\n      updateDatePrecision: 6,\n      updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n      deleteDate: \"datetime\",\n      deleteDatePrecision: 6,\n      deleteDateNullable: true,\n      version: \"int\",\n      treeLevel: \"int\",\n      migrationId: \"int\",\n      migrationName: \"varchar\",\n      migrationTimestamp: \"bigint\",\n      cacheId: \"int\",\n      cacheIdentifier: \"varchar\",\n      cacheTime: \"bigint\",\n      cacheDuration: \"int\",\n      cacheQuery: \"text\",\n      cacheResult: \"text\",\n      metadataType: \"varchar\",\n      metadataDatabase: \"varchar\",\n      metadataSchema: \"varchar\",\n      metadataTable: \"varchar\",\n      metadataName: \"varchar\",\n      metadataValue: \"text\"\n    };\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    this.dataTypeDefaults = {\n      varchar: {\n        length: 255\n      },\n      nvarchar: {\n        length: 255\n      },\n      \"national varchar\": {\n        length: 255\n      },\n      char: {\n        length: 1\n      },\n      binary: {\n        length: 1\n      },\n      varbinary: {\n        length: 255\n      },\n      decimal: {\n        precision: 10,\n        scale: 0\n      },\n      dec: {\n        precision: 10,\n        scale: 0\n      },\n      numeric: {\n        precision: 10,\n        scale: 0\n      },\n      fixed: {\n        precision: 10,\n        scale: 0\n      },\n      float: {\n        precision: 12\n      },\n      double: {\n        precision: 22\n      },\n      time: {\n        precision: 0\n      },\n      datetime: {\n        precision: 0\n      },\n      timestamp: {\n        precision: 0\n      },\n      bit: {\n        width: 1\n      },\n      int: {\n        width: 11\n      },\n      integer: {\n        width: 11\n      },\n      tinyint: {\n        width: 4\n      },\n      smallint: {\n        width: 6\n      },\n      mediumint: {\n        width: 9\n      },\n      bigint: {\n        width: 20\n      }\n    };\n    /**\n     * Max length allowed by MySQL for aliases.\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n     */\n    this.maxAliasLength = 63;\n    this.cteCapabilities = {\n      enabled: false\n    };\n    this.connection = connection;\n    this.options = connection.options;\n    // load mysql package\n    this.loadDependencies();\n    this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n    this.database = DriverUtils.buildDriverOptions(this.options).database;\n    // validate options to make sure everything is set\n    // todo: revisit validation with replication in mind\n    // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n    //     throw new DriverOptionNotSetError(\"socketPath and host\");\n    // if (!this.options.username)\n    //     throw new DriverOptionNotSetError(\"username\");\n    // if (!this.options.database)\n    //     throw new DriverOptionNotSetError(\"database\");\n    // todo: check what is going on when connection is setup without database and how to connect to a database then?\n    // todo: provide options to auto-create a database if it does not exist yet\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Performs connection to the database.\n   */\n  connect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.database) {\n        const queryRunner = yield _this.createQueryRunner(\"master\");\n        _this.database = yield queryRunner.getCurrentDatabase();\n        yield queryRunner.release();\n      }\n    })();\n  }\n  /**\n   * Makes any action after connection (e.g. create extensions in Postgres driver).\n   */\n  afterConnect() {\n    return Promise.resolve();\n  }\n  /**\n   * Closes connection with the database.\n   */\n  disconnect() {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Creates a schema builder used to build and sync a schema.\n   */\n  createSchemaBuilder() {\n    return new RdbmsSchemaBuilder(this.connection);\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    return new AuroraMysqlQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions));\n  }\n  /**\n   * Replaces parameters in the given sql with special escaping character\n   * and an array of parameter names to be passed to a query.\n   */\n  escapeQueryWithParameters(sql, parameters, nativeParameters) {\n    const escapedParameters = Object.keys(nativeParameters).map(key => nativeParameters[key]);\n    if (!parameters || !Object.keys(parameters).length) return [sql, escapedParameters];\n    sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n      if (!parameters.hasOwnProperty(key)) {\n        return full;\n      }\n      let value = parameters[key];\n      if (isArray) {\n        return value.map(v => {\n          escapedParameters.push(v);\n          return this.createParameter(key, escapedParameters.length - 1);\n        }).join(\", \");\n      }\n      if (typeof value === \"function\") {\n        return value();\n      }\n      escapedParameters.push(value);\n      return this.createParameter(key, escapedParameters.length - 1);\n    }); // todo: make replace only in value statements, otherwise problems\n    return [sql, escapedParameters];\n  }\n  /**\n   * Escapes a column name.\n   */\n  escape(columnName) {\n    return \"`\" + columnName + \"`\";\n  }\n  /**\n   * Build full table name with database name, schema name and table name.\n   * E.g. myDB.mySchema.myTable\n   */\n  buildTableName(tableName, schema, database) {\n    let tablePath = [tableName];\n    if (database) {\n      tablePath.unshift(database);\n    }\n    return tablePath.join(\".\");\n  }\n  /**\n   * Parse a target table name or other types and return a normalized table definition.\n   */\n  parseTableName(target) {\n    const driverDatabase = this.database;\n    const driverSchema = undefined;\n    if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n      const parsed = this.parseTableName(target.name);\n      return {\n        database: target.database || parsed.database || driverDatabase,\n        schema: target.schema || parsed.schema || driverSchema,\n        tableName: parsed.tableName\n      };\n    }\n    if (InstanceChecker.isTableForeignKey(target)) {\n      const parsed = this.parseTableName(target.referencedTableName);\n      return {\n        database: target.referencedDatabase || parsed.database || driverDatabase,\n        schema: target.referencedSchema || parsed.schema || driverSchema,\n        tableName: parsed.tableName\n      };\n    }\n    if (InstanceChecker.isEntityMetadata(target)) {\n      // EntityMetadata tableName is never a path\n      return {\n        database: target.database || driverDatabase,\n        schema: target.schema || driverSchema,\n        tableName: target.tableName\n      };\n    }\n    const parts = target.split(\".\");\n    return {\n      database: (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\n      schema: driverSchema,\n      tableName: parts.length > 1 ? parts[1] : parts[0]\n    };\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n  preparePersistentValue(value, columnMetadata) {\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n    if (!this.options.formatOptions || this.options.formatOptions.castParameters !== false) {\n      return this.client.preparePersistentValue(value, columnMetadata);\n    }\n    if (value === null || value === undefined) return value;\n    if (columnMetadata.type === Boolean) {\n      return value === true ? 1 : 0;\n    } else if (columnMetadata.type === \"date\") {\n      return DateUtils.mixedDateToDateString(value);\n    } else if (columnMetadata.type === \"time\") {\n      return DateUtils.mixedDateToTimeString(value);\n    } else if (columnMetadata.type === \"json\") {\n      return JSON.stringify(value);\n    } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n      return DateUtils.mixedDateToDate(value);\n    } else if (columnMetadata.type === \"simple-array\" || columnMetadata.type === \"set\") {\n      return DateUtils.simpleArrayToString(value);\n    } else if (columnMetadata.type === \"simple-json\") {\n      return DateUtils.simpleJsonToString(value);\n    } else if (columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") {\n      return \"\" + value;\n    }\n    return value;\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type or metadata.\n   */\n  prepareHydratedValue(value, columnMetadata) {\n    if (value === null || value === undefined) return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n    if (!this.options.formatOptions || this.options.formatOptions.castParameters !== false) {\n      return this.client.prepareHydratedValue(value, columnMetadata);\n    }\n    if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\" || columnMetadata.type === \"boolean\") {\n      value = value ? true : false;\n    } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n      value = DateUtils.normalizeHydratedDate(value);\n    } else if (columnMetadata.type === \"date\") {\n      value = DateUtils.mixedDateToDateString(value);\n    } else if (columnMetadata.type === \"json\") {\n      value = typeof value === \"string\" ? JSON.parse(value) : value;\n    } else if (columnMetadata.type === \"time\") {\n      value = DateUtils.mixedTimeToString(value);\n    } else if (columnMetadata.type === \"simple-array\" || columnMetadata.type === \"set\") {\n      value = DateUtils.stringToSimpleArray(value);\n    } else if (columnMetadata.type === \"simple-json\") {\n      value = DateUtils.stringToSimpleJson(value);\n    } else if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") && columnMetadata.enum && !isNaN(value) && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n      // convert to number if that exists in possible enum options\n      value = parseInt(value);\n    } else if (columnMetadata.type === Number) {\n      // convert to number if number\n      value = !isNaN(+value) ? parseInt(value) : value;\n    }\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n    return value;\n  }\n  /**\n   * Creates a database type from a given column metadata.\n   */\n  normalizeType(column) {\n    if (column.type === Number || column.type === \"integer\") {\n      return \"int\";\n    } else if (column.type === String) {\n      return \"varchar\";\n    } else if (column.type === Date) {\n      return \"datetime\";\n    } else if (column.type === Buffer) {\n      return \"blob\";\n    } else if (column.type === Boolean) {\n      return \"tinyint\";\n    } else if (column.type === \"uuid\") {\n      return \"varchar\";\n    } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n      return \"text\";\n    } else if (column.type === \"simple-enum\") {\n      return \"enum\";\n    } else if (column.type === \"double precision\" || column.type === \"real\") {\n      return \"double\";\n    } else if (column.type === \"dec\" || column.type === \"numeric\" || column.type === \"fixed\") {\n      return \"decimal\";\n    } else if (column.type === \"bool\" || column.type === \"boolean\") {\n      return \"tinyint\";\n    } else if (column.type === \"nvarchar\" || column.type === \"national varchar\") {\n      return \"varchar\";\n    } else if (column.type === \"nchar\" || column.type === \"national char\") {\n      return \"char\";\n    } else {\n      return column.type || \"\";\n    }\n  }\n  /**\n   * Normalizes \"default\" value of the column.\n   */\n  normalizeDefault(columnMetadata) {\n    const defaultValue = columnMetadata.default;\n    if (defaultValue === null) {\n      return undefined;\n    }\n    if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") && defaultValue !== undefined) {\n      return `'${defaultValue}'`;\n    }\n    if (columnMetadata.type === \"set\" && defaultValue !== undefined) {\n      return `'${DateUtils.simpleArrayToString(defaultValue)}'`;\n    }\n    if (typeof defaultValue === \"number\") {\n      return `${defaultValue}`;\n    }\n    if (typeof defaultValue === \"boolean\") {\n      return defaultValue ? \"1\" : \"0\";\n    }\n    if (typeof defaultValue === \"function\") {\n      return defaultValue();\n    }\n    if (typeof defaultValue === \"string\") {\n      return `'${defaultValue}'`;\n    }\n    if (defaultValue === undefined) {\n      return undefined;\n    }\n    return `${defaultValue}`;\n  }\n  /**\n   * Normalizes \"isUnique\" value of the column.\n   */\n  normalizeIsUnique(column) {\n    return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\n  }\n  /**\n   * Returns default column lengths, which is required on column creation.\n   */\n  getColumnLength(column) {\n    if (column.length) return column.length.toString();\n    /**\n     * fix https://github.com/typeorm/typeorm/issues/1139\n     */\n    if (column.generationStrategy === \"uuid\") return \"36\";\n    switch (column.type) {\n      case String:\n      case \"varchar\":\n      case \"nvarchar\":\n      case \"national varchar\":\n        return \"255\";\n      case \"varbinary\":\n        return \"255\";\n      default:\n        return \"\";\n    }\n  }\n  /**\n   * Creates column type definition including length, precision and scale\n   */\n  createFullType(column) {\n    let type = column.type;\n    // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n    if (this.getColumnLength(column)) {\n      type += `(${this.getColumnLength(column)})`;\n    } else if (column.width) {\n      type += `(${column.width})`;\n    } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n      type += `(${column.precision},${column.scale})`;\n    } else if (column.precision !== null && column.precision !== undefined) {\n      type += `(${column.precision})`;\n    }\n    if (column.isArray) type += \" array\";\n    return type;\n  }\n  /**\n   * Obtains a new database connection to a master server.\n   * Used for replication.\n   * If replication is not setup then returns default connection's database connection.\n   */\n  obtainMasterConnection() {\n    return new Promise((ok, fail) => {\n      if (this.poolCluster) {\n        this.poolCluster.getConnection(\"MASTER\", (err, dbConnection) => {\n          err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n        });\n      } else if (this.pool) {\n        this.pool.getConnection((err, dbConnection) => {\n          err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n        });\n      } else {\n        fail(new TypeORMError(`Connection is not established with mysql database`));\n      }\n    });\n  }\n  /**\n   * Obtains a new database connection to a slave server.\n   * Used for replication.\n   * If replication is not setup then returns master (default) connection's database connection.\n   */\n  obtainSlaveConnection() {\n    if (!this.poolCluster) return this.obtainMasterConnection();\n    return new Promise((ok, fail) => {\n      this.poolCluster.getConnection(\"SLAVE*\", (err, dbConnection) => {\n        err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n      });\n    });\n  }\n  /**\n   * Creates generated map of values generated or returned by database after INSERT query.\n   */\n  createGeneratedMap(metadata, insertResult, entityIndex) {\n    const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n      let value;\n      if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\n        // NOTE: When multiple rows is inserted by a single INSERT statement,\n        // `insertId` is the value generated for the first inserted row only.\n        value = insertResult.insertId + entityIndex;\n        // } else if (generatedColumn.generationStrategy === \"uuid\") {\n        //     console.log(\"getting db value:\", generatedColumn.databaseName);\n        //     value = generatedColumn.getEntityValue(uuidMap);\n      }\n\n      return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n    }, {});\n    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n  }\n  /**\n   * Differentiate columns of this table and columns from the given column metadatas columns\n   * and returns only changed.\n   */\n  findChangedColumns(tableColumns, columnMetadatas) {\n    return columnMetadatas.filter(columnMetadata => {\n      const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n      if (!tableColumn) return false; // we don't need new columns, we only need exist and changed\n      // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n      // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n      // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n      // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n      // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n      // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n      // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n      // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n      // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n      // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n      // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n      // console.log(\"comment:\", tableColumn.comment, this.escapeComment(columnMetadata.comment));\n      // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n      // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n      // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n      // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n      // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n      // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n      // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n      // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n      // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n      // console.log(\"==========================================\");\n      let columnMetadataLength = columnMetadata.length;\n      if (!columnMetadataLength && columnMetadata.generationStrategy === \"uuid\") {\n        // fixing #3374\n        columnMetadataLength = this.getColumnLength(columnMetadata);\n      }\n      return tableColumn.name !== columnMetadata.databaseName || tableColumn.type !== this.normalizeType(columnMetadata) || tableColumn.length !== columnMetadataLength || tableColumn.width !== columnMetadata.width || tableColumn.precision !== columnMetadata.precision || tableColumn.scale !== columnMetadata.scale || tableColumn.zerofill !== columnMetadata.zerofill || tableColumn.unsigned !== columnMetadata.unsigned || tableColumn.asExpression !== columnMetadata.asExpression || tableColumn.generatedType !== columnMetadata.generatedType || tableColumn.comment !== this.escapeComment(columnMetadata.comment) || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default) || tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(val => val + \"\")) || tableColumn.onUpdate !== columnMetadata.onUpdate || tableColumn.isPrimary !== columnMetadata.isPrimary || tableColumn.isNullable !== columnMetadata.isNullable || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata) || columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated;\n    });\n  }\n  /**\n   * Returns true if driver supports RETURNING / OUTPUT statement.\n   */\n  isReturningSqlSupported() {\n    return false;\n  }\n  /**\n   * Returns true if driver supports uuid values generation on its own.\n   */\n  isUUIDGenerationSupported() {\n    return false;\n  }\n  /**\n   * Returns true if driver supports fulltext indices.\n   */\n  isFullTextColumnTypeSupported() {\n    return true;\n  }\n  /**\n   * Creates an escaped parameter.\n   */\n  createParameter(parameterName, index) {\n    return \"?\";\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Loads all driver dependencies.\n   */\n  loadDependencies() {\n    const DataApiDriver = this.options.driver || PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n    this.DataApiDriver = DataApiDriver;\n    // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\n    // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\n    this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver;\n  }\n  /**\n   * Creates a new connection pool for a given database credentials.\n   */\n  createConnectionOptions(options, credentials) {\n    credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n    // build connection options for the driver\n    return Object.assign({}, {\n      resourceArn: options.resourceArn,\n      secretArn: options.secretArn,\n      database: options.database,\n      region: options.region,\n      type: options.type\n    }, {\n      host: credentials.host,\n      user: credentials.username,\n      password: credentials.password,\n      database: credentials.database,\n      port: credentials.port,\n      ssl: options.ssl\n    }, options.extra || {});\n  }\n  /**\n   * Creates a new connection pool for a given database credentials.\n   */\n  createPool(connectionOptions) {\n    return _asyncToGenerator(function* () {\n      return {};\n    })();\n  }\n  /**\n   * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n   */\n  prepareDbConnection(connection) {\n    const {\n      logger\n    } = this.connection;\n    /**\n     * Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n     * cause the hosting app to crash.\n     */\n    if (connection.listeners(\"error\").length === 0) {\n      connection.on(\"error\", error => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\n    }\n    return connection;\n  }\n  /**\n   * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n   */\n  compareDefaultValues(columnMetadataValue, databaseValue) {\n    if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n      // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n      // as result compare cannot understand if default is really changed or not\n      columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n      databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n    }\n    return columnMetadataValue === databaseValue;\n  }\n  /**\n   * Escapes a given comment.\n   */\n  escapeComment(comment) {\n    if (!comment) return comment;\n    comment = comment.replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n    return comment;\n  }\n}","map":{"version":3,"names":["DriverUtils","AuroraMysqlQueryRunner","DateUtils","PlatformTools","RdbmsSchemaBuilder","OrmUtils","ApplyValueTransformers","TypeORMError","InstanceChecker","AuroraMysqlDriver","constructor","connection","isReplicated","treeSupport","transactionSupport","supportedDataTypes","supportedUpsertTypes","spatialTypes","withLengthColumnTypes","withWidthColumnTypes","withPrecisionColumnTypes","withScaleColumnTypes","unsignedAndZerofillTypes","mappedDataTypes","createDate","createDatePrecision","createDateDefault","updateDate","updateDatePrecision","updateDateDefault","deleteDate","deleteDatePrecision","deleteDateNullable","version","treeLevel","migrationId","migrationName","migrationTimestamp","cacheId","cacheIdentifier","cacheTime","cacheDuration","cacheQuery","cacheResult","metadataType","metadataDatabase","metadataSchema","metadataTable","metadataName","metadataValue","dataTypeDefaults","varchar","length","nvarchar","char","binary","varbinary","decimal","precision","scale","dec","numeric","fixed","float","double","time","datetime","timestamp","bit","width","int","integer","tinyint","smallint","mediumint","bigint","maxAliasLength","cteCapabilities","enabled","options","loadDependencies","client","DataApiDriver","region","secretArn","resourceArn","database","query","parameters","logger","logQuery","serviceConfigOptions","formatOptions","buildDriverOptions","connect","_this","_asyncToGenerator","queryRunner","createQueryRunner","getCurrentDatabase","release","afterConnect","Promise","resolve","disconnect","createSchemaBuilder","mode","escapeQueryWithParameters","sql","nativeParameters","escapedParameters","Object","keys","map","key","replace","full","isArray","hasOwnProperty","value","v","push","createParameter","join","escape","columnName","buildTableName","tableName","schema","tablePath","unshift","parseTableName","target","driverDatabase","driverSchema","undefined","isTable","isView","parsed","name","isTableForeignKey","referencedTableName","referencedDatabase","referencedSchema","isEntityMetadata","parts","split","preparePersistentValue","columnMetadata","transformer","transformTo","castParameters","type","Boolean","mixedDateToDateString","mixedDateToTimeString","JSON","stringify","Date","mixedDateToDate","simpleArrayToString","simpleJsonToString","prepareHydratedValue","transformFrom","normalizeHydratedDate","parse","mixedTimeToString","stringToSimpleArray","stringToSimpleJson","enum","isNaN","indexOf","parseInt","Number","normalizeType","column","String","Buffer","normalizeDefault","defaultValue","default","normalizeIsUnique","entityMetadata","indices","some","idx","isUnique","columns","getColumnLength","toString","generationStrategy","createFullType","obtainMasterConnection","ok","fail","poolCluster","getConnection","err","dbConnection","prepareDbConnection","pool","obtainSlaveConnection","createGeneratedMap","metadata","insertResult","entityIndex","generatedMap","generatedColumns","reduce","generatedColumn","insertId","mergeDeep","createValueMap","findChangedColumns","tableColumns","columnMetadatas","filter","tableColumn","find","c","databaseName","columnMetadataLength","zerofill","unsigned","asExpression","generatedType","comment","escapeComment","compareDefaultValues","isArraysEqual","val","onUpdate","isPrimary","isNullable","isGenerated","isReturningSqlSupported","isUUIDGenerationSupported","isFullTextColumnTypeSupported","parameterName","index","driver","load","createConnectionOptions","credentials","assign","host","user","username","password","port","ssl","extra","createPool","connectionOptions","listeners","on","error","log","columnMetadataValue","databaseValue"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlDriver.js"],"sourcesContent":["import { DriverUtils } from \"../DriverUtils\";\nimport { AuroraMysqlQueryRunner } from \"./AuroraMysqlQueryRunner\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { TypeORMError } from \"../../error\";\nimport { InstanceChecker } from \"../../util/InstanceChecker\";\n/**\n * Organizes communication with MySQL DBMS.\n */\nexport class AuroraMysqlDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n         * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n         */\n        this.supportedDataTypes = [\n            // numeric types\n            \"bit\",\n            \"int\",\n            \"integer\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"bigint\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"bool\",\n            \"boolean\",\n            // date and time types\n            \"date\",\n            \"datetime\",\n            \"timestamp\",\n            \"time\",\n            \"year\",\n            // string types\n            \"char\",\n            \"nchar\",\n            \"national char\",\n            \"varchar\",\n            \"nvarchar\",\n            \"national varchar\",\n            \"blob\",\n            \"text\",\n            \"tinyblob\",\n            \"tinytext\",\n            \"mediumblob\",\n            \"mediumtext\",\n            \"longblob\",\n            \"longtext\",\n            \"enum\",\n            \"set\",\n            \"binary\",\n            \"varbinary\",\n            // json data type\n            \"json\",\n            // spatial data types\n            \"geometry\",\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"multipoint\",\n            \"multilinestring\",\n            \"multipolygon\",\n            \"geometrycollection\",\n        ];\n        /**\n         * Returns type of upsert supported by driver if any\n         */\n        this.supportedUpsertTypes = [\"on-duplicate-key-update\"];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [\n            \"geometry\",\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"multipoint\",\n            \"multilinestring\",\n            \"multipolygon\",\n            \"geometrycollection\",\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"char\",\n            \"varchar\",\n            \"nvarchar\",\n            \"binary\",\n            \"varbinary\",\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withWidthColumnTypes = [\n            \"bit\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"int\",\n            \"integer\",\n            \"bigint\",\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n            \"time\",\n            \"datetime\",\n            \"timestamp\",\n        ];\n        /**\n         * Gets list of column data types that supports scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n        ];\n        /**\n         * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n         */\n        this.unsignedAndZerofillTypes = [\n            \"int\",\n            \"integer\",\n            \"smallint\",\n            \"tinyint\",\n            \"mediumint\",\n            \"bigint\",\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n        ];\n        /**\n         * ORM has special columns and we need to know what database column types should be for those columns.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"datetime\",\n            createDatePrecision: 6,\n            createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n            updateDate: \"datetime\",\n            updateDatePrecision: 6,\n            updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n            deleteDate: \"datetime\",\n            deleteDatePrecision: 6,\n            deleteDateNullable: true,\n            version: \"int\",\n            treeLevel: \"int\",\n            migrationId: \"int\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"bigint\",\n            cacheId: \"int\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"bigint\",\n            cacheDuration: \"int\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            varchar: { length: 255 },\n            nvarchar: { length: 255 },\n            \"national varchar\": { length: 255 },\n            char: { length: 1 },\n            binary: { length: 1 },\n            varbinary: { length: 255 },\n            decimal: { precision: 10, scale: 0 },\n            dec: { precision: 10, scale: 0 },\n            numeric: { precision: 10, scale: 0 },\n            fixed: { precision: 10, scale: 0 },\n            float: { precision: 12 },\n            double: { precision: 22 },\n            time: { precision: 0 },\n            datetime: { precision: 0 },\n            timestamp: { precision: 0 },\n            bit: { width: 1 },\n            int: { width: 11 },\n            integer: { width: 11 },\n            tinyint: { width: 4 },\n            smallint: { width: 6 },\n            mediumint: { width: 9 },\n            bigint: { width: 20 },\n        };\n        /**\n         * Max length allowed by MySQL for aliases.\n         * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n         */\n        this.maxAliasLength = 63;\n        this.cteCapabilities = {\n            enabled: false,\n        };\n        this.connection = connection;\n        this.options = connection.options;\n        // load mysql package\n        this.loadDependencies();\n        this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\n        // todo: provide options to auto-create a database if it does not exist yet\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        if (!this.database) {\n            const queryRunner = await this.createQueryRunner(\"master\");\n            this.database = await queryRunner.getCurrentDatabase();\n            await queryRunner.release();\n        }\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect() {\n        return Promise.resolve();\n    }\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect() { }\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        return new AuroraMysqlQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions));\n    }\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql, parameters, nativeParameters) {\n        const escapedParameters = Object.keys(nativeParameters).map((key) => nativeParameters[key]);\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        sql = sql.replace(/:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g, (full, isArray, key) => {\n            if (!parameters.hasOwnProperty(key)) {\n                return full;\n            }\n            let value = parameters[key];\n            if (isArray) {\n                return value\n                    .map((v) => {\n                    escapedParameters.push(v);\n                    return this.createParameter(key, escapedParameters.length - 1);\n                })\n                    .join(\", \");\n            }\n            if (typeof value === \"function\") {\n                return value();\n            }\n            escapedParameters.push(value);\n            return this.createParameter(key, escapedParameters.length - 1);\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName) {\n        return \"`\" + columnName + \"`\";\n    }\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName, schema, database) {\n        let tablePath = [tableName];\n        if (database) {\n            tablePath.unshift(database);\n        }\n        return tablePath.join(\".\");\n    }\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(target) {\n        const driverDatabase = this.database;\n        const driverSchema = undefined;\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name);\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName);\n            return {\n                database: target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema: target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            };\n        }\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            };\n        }\n        const parts = target.split(\".\");\n        return {\n            database: (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\n            schema: driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        };\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (!this.options.formatOptions ||\n            this.options.formatOptions.castParameters !== false) {\n            return this.client.preparePersistentValue(value, columnMetadata);\n        }\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value);\n        }\n        else if (columnMetadata.type === \"simple-array\" ||\n            columnMetadata.type === \"set\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") {\n            return \"\" + value;\n        }\n        return value;\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value)\n                : value;\n        if (!this.options.formatOptions ||\n            this.options.formatOptions.castParameters !== false) {\n            return this.client.prepareHydratedValue(value, columnMetadata);\n        }\n        if (columnMetadata.type === Boolean ||\n            columnMetadata.type === \"bool\" ||\n            columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" ||\n            columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\" ||\n            columnMetadata.type === \"set\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if ((columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") &&\n            columnMetadata.enum &&\n            !isNaN(value) &&\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in possible enum options\n            value = parseInt(value);\n        }\n        else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value;\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    }\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column) {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n        }\n        else if (column.type === String) {\n            return \"varchar\";\n        }\n        else if (column.type === Date) {\n            return \"datetime\";\n        }\n        else if (column.type === Buffer) {\n            return \"blob\";\n        }\n        else if (column.type === Boolean) {\n            return \"tinyint\";\n        }\n        else if (column.type === \"uuid\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"simple-array\" ||\n            column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"enum\";\n        }\n        else if (column.type === \"double precision\" ||\n            column.type === \"real\") {\n            return \"double\";\n        }\n        else if (column.type === \"dec\" ||\n            column.type === \"numeric\" ||\n            column.type === \"fixed\") {\n            return \"decimal\";\n        }\n        else if (column.type === \"bool\" || column.type === \"boolean\") {\n            return \"tinyint\";\n        }\n        else if (column.type === \"nvarchar\" ||\n            column.type === \"national varchar\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"nchar\" || column.type === \"national char\") {\n            return \"char\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    }\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata) {\n        const defaultValue = columnMetadata.default;\n        if (defaultValue === null) {\n            return undefined;\n        }\n        if ((columnMetadata.type === \"enum\" ||\n            columnMetadata.type === \"simple-enum\") &&\n            defaultValue !== undefined) {\n            return `'${defaultValue}'`;\n        }\n        if (columnMetadata.type === \"set\" && defaultValue !== undefined) {\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`;\n        }\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`;\n        }\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"1\" : \"0\";\n        }\n        if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n        }\n        if (defaultValue === undefined) {\n            return undefined;\n        }\n        return `${defaultValue}`;\n    }\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column) {\n        return column.entityMetadata.indices.some((idx) => idx.isUnique &&\n            idx.columns.length === 1 &&\n            idx.columns[0] === column);\n    }\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column) {\n        if (column.length)\n            return column.length.toString();\n        /**\n         * fix https://github.com/typeorm/typeorm/issues/1139\n         */\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"national varchar\":\n                return \"255\";\n            case \"varbinary\":\n                return \"255\";\n            default:\n                return \"\";\n        }\n    }\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column) {\n        let type = column.type;\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n        }\n        else if (column.width) {\n            type += `(${column.width})`;\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n        }\n        else if (column.precision !== null &&\n            column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    }\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection() {\n        return new Promise((ok, fail) => {\n            if (this.poolCluster) {\n                this.poolCluster.getConnection(\"MASTER\", (err, dbConnection) => {\n                    err\n                        ? fail(err)\n                        : ok(this.prepareDbConnection(dbConnection));\n                });\n            }\n            else if (this.pool) {\n                this.pool.getConnection((err, dbConnection) => {\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n                });\n            }\n            else {\n                fail(new TypeORMError(`Connection is not established with mysql database`));\n            }\n        });\n    }\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection() {\n        if (!this.poolCluster)\n            return this.obtainMasterConnection();\n        return new Promise((ok, fail) => {\n            this.poolCluster.getConnection(\"SLAVE*\", (err, dbConnection) => {\n                err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\n            });\n        });\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult, entityIndex) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value;\n            if (generatedColumn.generationStrategy === \"increment\" &&\n                insertResult.insertId) {\n                // NOTE: When multiple rows is inserted by a single INSERT statement,\n                // `insertId` is the value generated for the first inserted row only.\n                value = insertResult.insertId + entityIndex;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns, columnMetadatas) {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find((c) => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // console.log(\"comment:\", tableColumn.comment, this.escapeComment(columnMetadata.comment));\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n            let columnMetadataLength = columnMetadata.length;\n            if (!columnMetadataLength &&\n                columnMetadata.generationStrategy === \"uuid\") {\n                // fixing #3374\n                columnMetadataLength = this.getColumnLength(columnMetadata);\n            }\n            return (tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadataLength ||\n                tableColumn.width !== columnMetadata.width ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                tableColumn.zerofill !== columnMetadata.zerofill ||\n                tableColumn.unsigned !== columnMetadata.unsigned ||\n                tableColumn.asExpression !== columnMetadata.asExpression ||\n                tableColumn.generatedType !== columnMetadata.generatedType ||\n                tableColumn.comment !==\n                    this.escapeComment(columnMetadata.comment) ||\n                !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default) ||\n                (tableColumn.enum &&\n                    columnMetadata.enum &&\n                    !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map((val) => val + \"\"))) ||\n                tableColumn.onUpdate !== columnMetadata.onUpdate ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated));\n        });\n    }\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported() {\n        return false;\n    }\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported() {\n        return true;\n    }\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName, index) {\n        return \"?\";\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads all driver dependencies.\n     */\n    loadDependencies() {\n        const DataApiDriver = this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n        this.DataApiDriver = DataApiDriver;\n        // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\n        // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\n        this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver;\n    }\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    createConnectionOptions(options, credentials) {\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n        // build connection options for the driver\n        return Object.assign({}, {\n            resourceArn: options.resourceArn,\n            secretArn: options.secretArn,\n            database: options.database,\n            region: options.region,\n            type: options.type,\n        }, {\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: options.ssl,\n        }, options.extra || {});\n    }\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    async createPool(connectionOptions) {\n        return {};\n    }\n    /**\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n     */\n    prepareDbConnection(connection) {\n        const { logger } = this.connection;\n        /**\n         * Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n         * cause the hosting app to crash.\n         */\n        if (connection.listeners(\"error\").length === 0) {\n            connection.on(\"error\", (error) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\n        }\n        return connection;\n    }\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    compareDefaultValues(columnMetadataValue, databaseValue) {\n        if (typeof columnMetadataValue === \"string\" &&\n            typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n        return columnMetadataValue === databaseValue;\n    }\n    /**\n     * Escapes a given comment.\n     */\n    escapeComment(comment) {\n        if (!comment)\n            return comment;\n        comment = comment.replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n        return comment;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}