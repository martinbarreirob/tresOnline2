{"ast":null,"code":"import { Alias } from \"./Alias\";\nimport { JoinAttribute } from \"./JoinAttribute\";\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\nimport { TypeORMError } from \"../error\";\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nexport class QueryExpressionMap {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    var _a;\n    this.connection = connection;\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n    /**\n     * Strategy to load relations.\n     */\n    this.relationLoadStrategy = \"join\";\n    /**\n     * Indicates if QueryBuilder used to select entities and not a raw results.\n     */\n    this.queryEntity = false;\n    /**\n     * All aliases (including main alias) used in the query.\n     */\n    this.aliases = [];\n    /**\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n     */\n    this.queryType = \"select\";\n    /**\n     * Data needs to be SELECT-ed.\n     */\n    this.selects = [];\n    /**\n     * Max execution time in millisecond.\n     */\n    this.maxExecutionTime = 0;\n    /**\n     * Whether SELECT is DISTINCT.\n     */\n    this.selectDistinct = false;\n    /**\n     * SELECT DISTINCT ON query (postgres).\n     */\n    this.selectDistinctOn = [];\n    /**\n     * Extra returning columns to be added to the returning statement if driver supports it.\n     */\n    this.extraReturningColumns = [];\n    /**\n     * Optional on conflict statement used in insertion query in postgres.\n     */\n    this.onConflict = \"\";\n    /**\n     * Optional on ignore statement used in insertion query in databases.\n     */\n    this.onIgnore = false;\n    /**\n     * JOIN queries.\n     */\n    this.joinAttributes = [];\n    /**\n     * RelationId queries.\n     */\n    this.relationIdAttributes = [];\n    /**\n     * Relation count queries.\n     */\n    this.relationCountAttributes = [];\n    /**\n     * WHERE queries.\n     */\n    this.wheres = [];\n    /**\n     * HAVING queries.\n     */\n    this.havings = [];\n    /**\n     * ORDER BY queries.\n     */\n    this.orderBys = {};\n    /**\n     * GROUP BY queries.\n     */\n    this.groupBys = [];\n    /**\n     * Indicates if soft-deleted rows should be included in entity result.\n     * By default the soft-deleted rows are not included.\n     */\n    this.withDeleted = false;\n    /**\n     * Parameters used to be escaped in final query.\n     */\n    this.parameters = {};\n    /**\n     * Indicates if alias, table names and column names will be escaped by driver, or not.\n     *\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n     */\n    this.disableEscaping = true;\n    /**\n     * Indicates if virtual columns should be included in entity result.\n     *\n     * todo: what to do with it? is it properly used? what about persistence?\n     */\n    this.enableRelationIdValues = false;\n    /**\n     * Extra where condition appended to the end of original where conditions with AND keyword.\n     * Original condition will be wrapped into brackets.\n     */\n    this.extraAppendedAndWhereCondition = \"\";\n    /**\n     * Indicates if query builder creates a subquery.\n     */\n    this.subQuery = false;\n    /**\n     * Indicates if property names are prefixed with alias names during property replacement.\n     * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n     * but user can use them in WHERE expressions.\n     */\n    this.aliasNamePrefixingEnabled = true;\n    /**\n     * Indicates if query result cache is enabled or not.\n     */\n    this.cache = false;\n    /**\n     * Options that define QueryBuilder behaviour.\n     */\n    this.options = [];\n    /**\n     * List of columns where data should be inserted.\n     * Used in INSERT query.\n     */\n    this.insertColumns = [];\n    /**\n     * Used if user wants to update or delete a specific entities.\n     */\n    this.whereEntities = [];\n    /**\n     * Indicates if entity must be updated after insertion / updation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     */\n    this.updateEntity = true;\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     */\n    this.callListeners = true;\n    /**\n     * Indicates if query must be wrapped into transaction.\n     */\n    this.useTransaction = false;\n    /**\n     * Extra parameters.\n     *\n     * @deprecated Use standard parameters instead\n     */\n    this.nativeParameters = {};\n    /**\n     * Items from an entity that have been locally generated & are recorded here for later use.\n     * Examples include the UUID generation when the database does not natively support it.\n     * These are included in the entity index order.\n     */\n    this.locallyGenerated = {};\n    this.commonTableExpressions = [];\n    if (connection.options.relationLoadStrategy) {\n      this.relationLoadStrategy = connection.options.relationLoadStrategy;\n    }\n    this.timeTravel = ((_a = connection.options) === null || _a === void 0 ? void 0 : _a.timeTravelQueries) || false;\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  /**\n   * Get all ORDER BY queries - if order by is specified by user then it uses them,\n   * otherwise it uses default entity order by if it was set.\n   */\n  get allOrderBys() {\n    if (!Object.keys(this.orderBys).length && this.mainAlias.hasMetadata && this.options.indexOf(\"disable-global-order\") === -1) {\n      const entityOrderBy = this.mainAlias.metadata.orderBy || {};\n      return Object.keys(entityOrderBy).reduce((orderBy, key) => {\n        orderBy[this.mainAlias.name + \".\" + key] = entityOrderBy[key];\n        return orderBy;\n      }, {});\n    }\n    return this.orderBys;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a main alias and adds it to the current expression map.\n   */\n  setMainAlias(alias) {\n    // if main alias is already set then remove it from the array\n    // if (this.mainAlias)\n    //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n    // set new main alias\n    this.mainAlias = alias;\n    return alias;\n  }\n  /**\n   * Creates a new alias and adds it to the current expression map.\n   */\n  createAlias(options) {\n    let aliasName = options.name;\n    if (!aliasName && options.tablePath) aliasName = options.tablePath;\n    if (!aliasName && typeof options.target === \"function\") aliasName = options.target.name;\n    if (!aliasName && typeof options.target === \"string\") aliasName = options.target;\n    const alias = new Alias();\n    alias.type = options.type;\n    if (aliasName) alias.name = aliasName;\n    if (options.metadata) alias.metadata = options.metadata;\n    if (options.target && !alias.hasMetadata) alias.metadata = this.connection.getMetadata(options.target);\n    if (options.tablePath) alias.tablePath = options.tablePath;\n    if (options.subQuery) alias.subQuery = options.subQuery;\n    this.aliases.push(alias);\n    return alias;\n  }\n  /**\n   * Finds alias with the given name.\n   * If alias was not found it throw an exception.\n   */\n  findAliasByName(aliasName) {\n    const alias = this.aliases.find(alias => alias.name === aliasName);\n    if (!alias) throw new TypeORMError(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\n    return alias;\n  }\n  findColumnByAliasExpression(aliasExpression) {\n    const [aliasName, propertyPath] = aliasExpression.split(\".\");\n    const alias = this.findAliasByName(aliasName);\n    return alias.metadata.findColumnWithPropertyName(propertyPath);\n  }\n  /**\n   * Gets relation metadata of the relation this query builder works with.\n   *\n   * todo: add proper exceptions\n   */\n  get relationMetadata() {\n    if (!this.mainAlias) throw new TypeORMError(`Entity to work with is not specified!`); // todo: better message\n    const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n    if (!relationMetadata) throw new TypeORMError(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message\n    return relationMetadata;\n  }\n  /**\n   * Copies all properties of the current QueryExpressionMap into a new one.\n   * Useful when QueryBuilder needs to create a copy of itself.\n   */\n  clone() {\n    const map = new QueryExpressionMap(this.connection);\n    map.queryType = this.queryType;\n    map.selects = this.selects.map(select => select);\n    map.maxExecutionTime = this.maxExecutionTime;\n    map.selectDistinct = this.selectDistinct;\n    map.selectDistinctOn = this.selectDistinctOn;\n    this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\n    map.relationLoadStrategy = this.relationLoadStrategy;\n    map.mainAlias = this.mainAlias;\n    map.valuesSet = this.valuesSet;\n    map.returning = this.returning;\n    map.onConflict = this.onConflict;\n    map.onIgnore = this.onIgnore;\n    map.onUpdate = this.onUpdate;\n    map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\n    map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\n    map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\n    map.wheres = this.wheres.map(where => ({\n      ...where\n    }));\n    map.havings = this.havings.map(having => ({\n      ...having\n    }));\n    map.orderBys = Object.assign({}, this.orderBys);\n    map.groupBys = this.groupBys.map(groupBy => groupBy);\n    map.limit = this.limit;\n    map.offset = this.offset;\n    map.skip = this.skip;\n    map.take = this.take;\n    map.lockMode = this.lockMode;\n    map.onLocked = this.onLocked;\n    map.lockVersion = this.lockVersion;\n    map.lockTables = this.lockTables;\n    map.withDeleted = this.withDeleted;\n    map.parameters = Object.assign({}, this.parameters);\n    map.disableEscaping = this.disableEscaping;\n    map.enableRelationIdValues = this.enableRelationIdValues;\n    map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n    map.subQuery = this.subQuery;\n    map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n    map.cache = this.cache;\n    map.cacheId = this.cacheId;\n    map.cacheDuration = this.cacheDuration;\n    map.relationPropertyPath = this.relationPropertyPath;\n    map.of = this.of;\n    map.insertColumns = this.insertColumns;\n    map.whereEntities = this.whereEntities;\n    map.updateEntity = this.updateEntity;\n    map.callListeners = this.callListeners;\n    map.useTransaction = this.useTransaction;\n    map.timeTravel = this.timeTravel;\n    map.nativeParameters = Object.assign({}, this.nativeParameters);\n    map.comment = this.comment;\n    map.commonTableExpressions = this.commonTableExpressions.map(cteOptions => ({\n      alias: cteOptions.alias,\n      queryBuilder: typeof cteOptions.queryBuilder === \"string\" ? cteOptions.queryBuilder : cteOptions.queryBuilder.clone(),\n      options: cteOptions.options\n    }));\n    return map;\n  }\n}","map":{"version":3,"names":["Alias","JoinAttribute","RelationIdAttribute","RelationCountAttribute","TypeORMError","QueryExpressionMap","constructor","connection","_a","relationLoadStrategy","queryEntity","aliases","queryType","selects","maxExecutionTime","selectDistinct","selectDistinctOn","extraReturningColumns","onConflict","onIgnore","joinAttributes","relationIdAttributes","relationCountAttributes","wheres","havings","orderBys","groupBys","withDeleted","parameters","disableEscaping","enableRelationIdValues","extraAppendedAndWhereCondition","subQuery","aliasNamePrefixingEnabled","cache","options","insertColumns","whereEntities","updateEntity","callListeners","useTransaction","nativeParameters","locallyGenerated","commonTableExpressions","timeTravel","timeTravelQueries","allOrderBys","Object","keys","length","mainAlias","hasMetadata","indexOf","entityOrderBy","metadata","orderBy","reduce","key","name","setMainAlias","alias","createAlias","aliasName","tablePath","target","type","getMetadata","push","findAliasByName","find","findColumnByAliasExpression","aliasExpression","propertyPath","split","findColumnWithPropertyName","relationMetadata","findRelationWithPropertyPath","relationPropertyPath","clone","map","select","forEach","valuesSet","returning","onUpdate","join","relationId","relationCount","where","having","assign","groupBy","limit","offset","skip","take","lockMode","onLocked","lockVersion","lockTables","cacheId","cacheDuration","of","comment","cteOptions","queryBuilder"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/QueryExpressionMap.js"],"sourcesContent":["import { Alias } from \"./Alias\";\nimport { JoinAttribute } from \"./JoinAttribute\";\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\nimport { TypeORMError } from \"../error\";\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nexport class QueryExpressionMap {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        var _a;\n        this.connection = connection;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Strategy to load relations.\n         */\n        this.relationLoadStrategy = \"join\";\n        /**\n         * Indicates if QueryBuilder used to select entities and not a raw results.\n         */\n        this.queryEntity = false;\n        /**\n         * All aliases (including main alias) used in the query.\n         */\n        this.aliases = [];\n        /**\n         * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n         */\n        this.queryType = \"select\";\n        /**\n         * Data needs to be SELECT-ed.\n         */\n        this.selects = [];\n        /**\n         * Max execution time in millisecond.\n         */\n        this.maxExecutionTime = 0;\n        /**\n         * Whether SELECT is DISTINCT.\n         */\n        this.selectDistinct = false;\n        /**\n         * SELECT DISTINCT ON query (postgres).\n         */\n        this.selectDistinctOn = [];\n        /**\n         * Extra returning columns to be added to the returning statement if driver supports it.\n         */\n        this.extraReturningColumns = [];\n        /**\n         * Optional on conflict statement used in insertion query in postgres.\n         */\n        this.onConflict = \"\";\n        /**\n         * Optional on ignore statement used in insertion query in databases.\n         */\n        this.onIgnore = false;\n        /**\n         * JOIN queries.\n         */\n        this.joinAttributes = [];\n        /**\n         * RelationId queries.\n         */\n        this.relationIdAttributes = [];\n        /**\n         * Relation count queries.\n         */\n        this.relationCountAttributes = [];\n        /**\n         * WHERE queries.\n         */\n        this.wheres = [];\n        /**\n         * HAVING queries.\n         */\n        this.havings = [];\n        /**\n         * ORDER BY queries.\n         */\n        this.orderBys = {};\n        /**\n         * GROUP BY queries.\n         */\n        this.groupBys = [];\n        /**\n         * Indicates if soft-deleted rows should be included in entity result.\n         * By default the soft-deleted rows are not included.\n         */\n        this.withDeleted = false;\n        /**\n         * Parameters used to be escaped in final query.\n         */\n        this.parameters = {};\n        /**\n         * Indicates if alias, table names and column names will be escaped by driver, or not.\n         *\n         * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n         */\n        this.disableEscaping = true;\n        /**\n         * Indicates if virtual columns should be included in entity result.\n         *\n         * todo: what to do with it? is it properly used? what about persistence?\n         */\n        this.enableRelationIdValues = false;\n        /**\n         * Extra where condition appended to the end of original where conditions with AND keyword.\n         * Original condition will be wrapped into brackets.\n         */\n        this.extraAppendedAndWhereCondition = \"\";\n        /**\n         * Indicates if query builder creates a subquery.\n         */\n        this.subQuery = false;\n        /**\n         * Indicates if property names are prefixed with alias names during property replacement.\n         * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n         * but user can use them in WHERE expressions.\n         */\n        this.aliasNamePrefixingEnabled = true;\n        /**\n         * Indicates if query result cache is enabled or not.\n         */\n        this.cache = false;\n        /**\n         * Options that define QueryBuilder behaviour.\n         */\n        this.options = [];\n        /**\n         * List of columns where data should be inserted.\n         * Used in INSERT query.\n         */\n        this.insertColumns = [];\n        /**\n         * Used if user wants to update or delete a specific entities.\n         */\n        this.whereEntities = [];\n        /**\n         * Indicates if entity must be updated after insertion / updation.\n         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n         */\n        this.updateEntity = true;\n        /**\n         * Indicates if listeners and subscribers must be called before and after query execution.\n         */\n        this.callListeners = true;\n        /**\n         * Indicates if query must be wrapped into transaction.\n         */\n        this.useTransaction = false;\n        /**\n         * Extra parameters.\n         *\n         * @deprecated Use standard parameters instead\n         */\n        this.nativeParameters = {};\n        /**\n         * Items from an entity that have been locally generated & are recorded here for later use.\n         * Examples include the UUID generation when the database does not natively support it.\n         * These are included in the entity index order.\n         */\n        this.locallyGenerated = {};\n        this.commonTableExpressions = [];\n        if (connection.options.relationLoadStrategy) {\n            this.relationLoadStrategy = connection.options.relationLoadStrategy;\n        }\n        this.timeTravel =\n            ((_a = connection.options) === null || _a === void 0 ? void 0 : _a.timeTravelQueries) || false;\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Get all ORDER BY queries - if order by is specified by user then it uses them,\n     * otherwise it uses default entity order by if it was set.\n     */\n    get allOrderBys() {\n        if (!Object.keys(this.orderBys).length &&\n            this.mainAlias.hasMetadata &&\n            this.options.indexOf(\"disable-global-order\") === -1) {\n            const entityOrderBy = this.mainAlias.metadata.orderBy || {};\n            return Object.keys(entityOrderBy).reduce((orderBy, key) => {\n                orderBy[this.mainAlias.name + \".\" + key] = entityOrderBy[key];\n                return orderBy;\n            }, {});\n        }\n        return this.orderBys;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    setMainAlias(alias) {\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n        // set new main alias\n        this.mainAlias = alias;\n        return alias;\n    }\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    createAlias(options) {\n        let aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && typeof options.target === \"function\")\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n        const alias = new Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n        this.aliases.push(alias);\n        return alias;\n    }\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    findAliasByName(aliasName) {\n        const alias = this.aliases.find((alias) => alias.name === aliasName);\n        if (!alias)\n            throw new TypeORMError(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\n        return alias;\n    }\n    findColumnByAliasExpression(aliasExpression) {\n        const [aliasName, propertyPath] = aliasExpression.split(\".\");\n        const alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    }\n    /**\n     * Gets relation metadata of the relation this query builder works with.\n     *\n     * todo: add proper exceptions\n     */\n    get relationMetadata() {\n        if (!this.mainAlias)\n            throw new TypeORMError(`Entity to work with is not specified!`); // todo: better message\n        const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n        if (!relationMetadata)\n            throw new TypeORMError(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message\n        return relationMetadata;\n    }\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    clone() {\n        const map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map((select) => select);\n        map.maxExecutionTime = this.maxExecutionTime;\n        map.selectDistinct = this.selectDistinct;\n        map.selectDistinctOn = this.selectDistinctOn;\n        this.aliases.forEach((alias) => map.aliases.push(new Alias(alias)));\n        map.relationLoadStrategy = this.relationLoadStrategy;\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.onIgnore = this.onIgnore;\n        map.onUpdate = this.onUpdate;\n        map.joinAttributes = this.joinAttributes.map((join) => new JoinAttribute(this.connection, this, join));\n        map.relationIdAttributes = this.relationIdAttributes.map((relationId) => new RelationIdAttribute(this, relationId));\n        map.relationCountAttributes = this.relationCountAttributes.map((relationCount) => new RelationCountAttribute(this, relationCount));\n        map.wheres = this.wheres.map((where) => ({ ...where }));\n        map.havings = this.havings.map((having) => ({ ...having }));\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map((groupBy) => groupBy);\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.onLocked = this.onLocked;\n        map.lockVersion = this.lockVersion;\n        map.lockTables = this.lockTables;\n        map.withDeleted = this.withDeleted;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.timeTravel = this.timeTravel;\n        map.nativeParameters = Object.assign({}, this.nativeParameters);\n        map.comment = this.comment;\n        map.commonTableExpressions = this.commonTableExpressions.map((cteOptions) => ({\n            alias: cteOptions.alias,\n            queryBuilder: typeof cteOptions.queryBuilder === \"string\"\n                ? cteOptions.queryBuilder\n                : cteOptions.queryBuilder.clone(),\n            options: cteOptions.options,\n        }));\n        return map;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}