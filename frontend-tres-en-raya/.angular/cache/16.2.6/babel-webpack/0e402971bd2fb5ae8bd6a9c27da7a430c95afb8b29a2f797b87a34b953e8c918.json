{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport class LoggingComponent {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000/';\n    this.inputNombre = '';\n  }\n  ngOnInit() {}\n  registroUser() {\n    //Cuando se registra una usuario lo inserta en la base de datos\n    this.insertPlayer(this.inputNombre).subscribe(player => {\n      //Lo carga en cache\n      localStorage.setItem('player', JSON.stringify(player));\n      //Busca si hay algún juego libre\n      this.searchForGame().subscribe(freeGame => {\n        this.freeGame = freeGame;\n        //Si hay un juego libre hace un update sobre la tabla para que el nuevo jugador sea el jugador O\n        if (this.freeGame) {\n          console.log(freeGame);\n          let enterFreeGame = {\n            playerOid: player.id\n          };\n          let salida = this.http.put(`${this.baseUrl}/game/${this.freeGame.id}`, enterFreeGame);\n          console.log(salida);\n          //Si no hay juegos libres crea el suyo propio\n        } else {\n          this.createGame(player.id).subscribe(game => {\n            console.log(game);\n          });\n        }\n      });\n    });\n  }\n  insertPlayer(nombre) {\n    const nombrePlayer = {\n      nombre: nombre\n    };\n    return this.http.post(`${this.baseUrl}player/`, nombrePlayer);\n  }\n  createGame(playerId) {\n    const gameData = {\n      board: JSON.stringify([['', '', ''], ['', '', ''], ['', '', '']]),\n      status: 0,\n      playerXid: playerId,\n      playerOid: \"\",\n      turn: 'X'\n    };\n    return this.http.post(`${this.baseUrl}game/`, gameData);\n  }\n  searchForGame() {\n    return this.http.get(`${this.baseUrl}game/free`);\n  }\n  static #_ = this.ɵfac = function LoggingComponent_Factory(t) {\n    return new (t || LoggingComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoggingComponent,\n    selectors: [[\"app-logging\"]],\n    decls: 5,\n    vars: 1,\n    consts: [[\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"click\"]],\n    template: function LoggingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"logging works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function LoggingComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.inputNombre = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function LoggingComponent_Template_button_click_3_listener() {\n          return ctx.registroUser();\n        });\n        i0.ɵɵtext(4, \"Jugar\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.inputNombre);\n      }\n    },\n    dependencies: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LoggingComponent","constructor","http","baseUrl","inputNombre","ngOnInit","registroUser","insertPlayer","subscribe","player","localStorage","setItem","JSON","stringify","searchForGame","freeGame","console","log","enterFreeGame","playerOid","id","salida","put","createGame","game","nombre","nombrePlayer","post","playerId","gameData","board","status","playerXid","turn","get","_","i0","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","LoggingComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoggingComponent_Template_input_ngModelChange_2_listener","$event","LoggingComponent_Template_button_click_3_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\logging\\logging.component.ts","C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\logging\\logging.component.html"],"sourcesContent":["import { Component, OnInit, } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Player, Game } from '../models/interfaces.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-logging',\n  templateUrl: './logging.component.html',\n  styleUrls: ['./logging.component.css']\n})\nexport class LoggingComponent implements OnInit{\n  private baseUrl: string = 'http://localhost:3000/';\n  inputNombre: string = '';\n  freeGame: any;\n\n  constructor (private http: HttpClient ){}\n\n  ngOnInit(): void {\n\n  }\n\n\n  registroUser(): void{\n    //Cuando se registra una usuario lo inserta en la base de datos\n    this.insertPlayer(this.inputNombre).subscribe((player: Player) => {\n        //Lo carga en cache\n        localStorage.setItem('player', JSON.stringify(player));\n\n\n        //Busca si hay algún juego libre\n        this.searchForGame().subscribe(freeGame => {\n          this.freeGame = freeGame;\n\n          //Si hay un juego libre hace un update sobre la tabla para que el nuevo jugador sea el jugador O\n          if (this.freeGame) {\n            console.log(freeGame);\n\n            let enterFreeGame = {\n              playerOid: player.id\n            };\n            let salida = this.http.put<Game>(`${this.baseUrl}/game/${this.freeGame.id}`, enterFreeGame)\n            console.log(salida);\n\n          //Si no hay juegos libres crea el suyo propio\n          } else {\n            this.createGame(player.id).subscribe((game: Game) => {\n              console.log(game);\n            });\n          }\n        });\n\n\n    });\n\n\n\n\n  }\n\n  insertPlayer(nombre: string) {\n    const nombrePlayer = { nombre: nombre};\n    return this.http.post<Player>(`${this.baseUrl}player/`, nombrePlayer);\n  }\n\n\n  createGame(playerId: number){\n    const gameData = {\n      board: JSON.stringify([\n        ['', '', ''],\n        ['', '', ''],\n        ['', '', '']\n      ]),\n      status: 0,\n      playerXid: playerId,\n      playerOid: \"\",\n      turn: 'X',\n    }\n    return this.http.post<Game>(`${this.baseUrl}game/`, gameData);\n  }\n\n  searchForGame(): Observable<Game[]> {\n    return this.http.get<Game[]>(`${this.baseUrl}game/free`);\n  }\n\n\n}\n","<p>logging works!</p>\n\n<input type=\"text\" [(ngModel)]=\"inputNombre\">\n<button type=\"button\" (click)=\"registroUser()\">Jugar</button>\n"],"mappings":";;;AAUA,OAAM,MAAOA,gBAAgB;EAK3BC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJjB,KAAAC,OAAO,GAAW,wBAAwB;IAClD,KAAAC,WAAW,GAAW,EAAE;EAGgB;EAExCC,QAAQA,CAAA,GAER;EAGAC,YAAYA,CAAA;IACV;IACA,IAAI,CAACC,YAAY,CAAC,IAAI,CAACH,WAAW,CAAC,CAACI,SAAS,CAAEC,MAAc,IAAI;MAC7D;MACAC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,CAAC;MAGtD;MACA,IAAI,CAACK,aAAa,EAAE,CAACN,SAAS,CAACO,QAAQ,IAAG;QACxC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;QAExB;QACA,IAAI,IAAI,CAACA,QAAQ,EAAE;UACjBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;UAErB,IAAIG,aAAa,GAAG;YAClBC,SAAS,EAAEV,MAAM,CAACW;WACnB;UACD,IAAIC,MAAM,GAAG,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAO,GAAG,IAAI,CAACnB,OAAO,SAAS,IAAI,CAACY,QAAQ,CAACK,EAAE,EAAE,EAAEF,aAAa,CAAC;UAC3FF,OAAO,CAACC,GAAG,CAACI,MAAM,CAAC;UAErB;SACC,MAAM;UACL,IAAI,CAACE,UAAU,CAACd,MAAM,CAACW,EAAE,CAAC,CAACZ,SAAS,CAAEgB,IAAU,IAAI;YAClDR,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;UACnB,CAAC,CAAC;;MAEN,CAAC,CAAC;IAGN,CAAC,CAAC;EAKJ;EAEAjB,YAAYA,CAACkB,MAAc;IACzB,MAAMC,YAAY,GAAG;MAAED,MAAM,EAAEA;IAAM,CAAC;IACtC,OAAO,IAAI,CAACvB,IAAI,CAACyB,IAAI,CAAS,GAAG,IAAI,CAACxB,OAAO,SAAS,EAAEuB,YAAY,CAAC;EACvE;EAGAH,UAAUA,CAACK,QAAgB;IACzB,MAAMC,QAAQ,GAAG;MACfC,KAAK,EAAElB,IAAI,CAACC,SAAS,CAAC,CACpB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACZ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACZ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CACb,CAAC;MACFkB,MAAM,EAAE,CAAC;MACTC,SAAS,EAAEJ,QAAQ;MACnBT,SAAS,EAAE,EAAE;MACbc,IAAI,EAAE;KACP;IACD,OAAO,IAAI,CAAC/B,IAAI,CAACyB,IAAI,CAAO,GAAG,IAAI,CAACxB,OAAO,OAAO,EAAE0B,QAAQ,CAAC;EAC/D;EAEAf,aAAaA,CAAA;IACX,OAAO,IAAI,CAACZ,IAAI,CAACgC,GAAG,CAAS,GAAG,IAAI,CAAC/B,OAAO,WAAW,CAAC;EAC1D;EAAC,QAAAgC,CAAA,G;qBAxEUnC,gBAAgB,EAAAoC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAhBxC,gBAAgB;IAAAyC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCV7BX,EAAA,CAAAa,cAAA,QAAG;QAAAb,EAAA,CAAAc,MAAA,qBAAc;QAAAd,EAAA,CAAAe,YAAA,EAAI;QAErBf,EAAA,CAAAa,cAAA,eAA6C;QAA1Bb,EAAA,CAAAgB,UAAA,2BAAAC,yDAAAC,MAAA;UAAA,OAAAN,GAAA,CAAA5C,WAAA,GAAAkD,MAAA;QAAA,EAAyB;QAA5ClB,EAAA,CAAAe,YAAA,EAA6C;QAC7Cf,EAAA,CAAAa,cAAA,gBAA+C;QAAzBb,EAAA,CAAAgB,UAAA,mBAAAG,kDAAA;UAAA,OAASP,GAAA,CAAA1C,YAAA,EAAc;QAAA,EAAC;QAAC8B,EAAA,CAAAc,MAAA,YAAK;QAAAd,EAAA,CAAAe,YAAA,EAAS;;;QAD1Cf,EAAA,CAAAoB,SAAA,GAAyB;QAAzBpB,EAAA,CAAAqB,UAAA,YAAAT,GAAA,CAAA5C,WAAA,CAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}