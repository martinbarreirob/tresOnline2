{"ast":null,"code":"/**\n * Database's table check constraint stored in this class.\n */\nexport class TableCheck {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableCheck\");\n    /**\n     * Column that contains this constraint.\n     */\n    this.columnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.expression = options.expression;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new copy of this constraint with exactly same properties.\n   */\n  clone() {\n    return new TableCheck({\n      name: this.name,\n      columnNames: this.columnNames ? [...this.columnNames] : [],\n      expression: this.expression\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates checks from the check metadata object.\n   */\n  static create(checkMetadata) {\n    return new TableCheck({\n      name: checkMetadata.name,\n      expression: checkMetadata.expression\n    });\n  }\n}","map":{"version":3,"names":["TableCheck","constructor","options","Symbol","for","columnNames","name","expression","clone","create","checkMetadata"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/schema-builder/table/TableCheck.js"],"sourcesContent":["/**\n * Database's table check constraint stored in this class.\n */\nexport class TableCheck {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableCheck\");\n        /**\n         * Column that contains this constraint.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.expression = options.expression;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone() {\n        return new TableCheck({\n            name: this.name,\n            columnNames: this.columnNames ? [...this.columnNames] : [],\n            expression: this.expression,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates checks from the check metadata object.\n     */\n    static create(checkMetadata) {\n        return new TableCheck({\n            name: checkMetadata.name,\n            expression: checkMetadata.expression,\n        });\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,CAAC;EACpB;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC,aAAa,CAAC,GAAGC,MAAM,CAACC,GAAG,CAAC,YAAY,CAAC;IAC9C;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACxB,IAAI,CAACD,WAAW,GAAGH,OAAO,CAACG,WAAW;IACtC,IAAI,CAACE,UAAU,GAAGL,OAAO,CAACK,UAAU;EACxC;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAIR,UAAU,CAAC;MAClBM,IAAI,EAAE,IAAI,CAACA,IAAI;MACfD,WAAW,EAAE,IAAI,CAACA,WAAW,GAAG,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC,GAAG,EAAE;MAC1DE,UAAU,EAAE,IAAI,CAACA;IACrB,CAAC,CAAC;EACN;EACA;EACA;EACA;EACA;AACJ;AACA;EACI,OAAOE,MAAMA,CAACC,aAAa,EAAE;IACzB,OAAO,IAAIV,UAAU,CAAC;MAClBM,IAAI,EAAEI,aAAa,CAACJ,IAAI;MACxBC,UAAU,EAAEG,aAAa,CAACH;IAC9B,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}