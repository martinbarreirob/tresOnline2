{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PostgresDriver } from \"../postgres/PostgresDriver\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverUtils } from \"../DriverUtils\";\nclass PostgresWrapper extends PostgresDriver {}\nexport class AuroraPostgresDriver extends PostgresWrapper {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super();\n    /**\n     * Represent transaction support by this driver\n     */\n    this.transactionSupport = \"nested\";\n    this.connection = connection;\n    this.options = connection.options;\n    this.isReplicated = false;\n    // load data-api package\n    this.loadDependencies();\n    this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n    this.database = DriverUtils.buildDriverOptions(this.options).database;\n  }\n  // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Performs connection to the database.\n   * Based on pooling options, it can either create connection immediately,\n   * either create a pool and create connection when needed.\n   */\n  connect() {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Closes connection with database.\n   */\n  disconnect() {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    return new AuroraPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions), mode);\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n  preparePersistentValue(value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return super.preparePersistentValue(value, columnMetadata);\n    }\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n    return this.client.preparePersistentValue(value, columnMetadata);\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n  prepareHydratedValue(value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return super.prepareHydratedValue(value, columnMetadata);\n    }\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n    return this.client.prepareHydratedValue(value, columnMetadata);\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    const driver = this.options.driver || PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n    const {\n      pg\n    } = driver;\n    this.DataApiDriver = pg;\n  }\n  /**\n   * Executes given query.\n   */\n  executeQuery(connection, query) {\n    return this.connection.query(query);\n  }\n  /**\n   * Makes any action after connection (e.g. create extensions in Postgres driver).\n   */\n  afterConnect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const extensionsMetadata = yield _this.checkMetadataForExtensions();\n      if (extensionsMetadata.hasExtensions) {\n        yield _this.enableExtensions(extensionsMetadata, _this.connection);\n      }\n      return Promise.resolve();\n    })();\n  }\n}","map":{"version":3,"names":["PostgresDriver","PlatformTools","AuroraPostgresQueryRunner","ApplyValueTransformers","DriverUtils","PostgresWrapper","AuroraPostgresDriver","constructor","connection","transactionSupport","options","isReplicated","loadDependencies","client","DataApiDriver","region","secretArn","resourceArn","database","query","parameters","logger","logQuery","serviceConfigOptions","formatOptions","buildDriverOptions","connect","_asyncToGenerator","disconnect","createQueryRunner","mode","preparePersistentValue","value","columnMetadata","castParameters","transformer","transformTo","prepareHydratedValue","transformFrom","driver","load","pg","executeQuery","afterConnect","_this","extensionsMetadata","checkMetadataForExtensions","hasExtensions","enableExtensions","Promise","resolve"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresDriver.js"],"sourcesContent":["import { PostgresDriver } from \"../postgres/PostgresDriver\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverUtils } from \"../DriverUtils\";\nclass PostgresWrapper extends PostgresDriver {\n}\nexport class AuroraPostgresDriver extends PostgresWrapper {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super();\n        /**\n         * Represent transaction support by this driver\n         */\n        this.transactionSupport = \"nested\";\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = false;\n        // load data-api package\n        this.loadDependencies();\n        this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n        this.database = DriverUtils.buildDriverOptions(this.options).database;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect() { }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() { }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        return new AuroraPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions), mode);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value, columnMetadata) {\n        if (this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false) {\n            return super.preparePersistentValue(value, columnMetadata);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        return this.client.preparePersistentValue(value, columnMetadata);\n    }\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value, columnMetadata) {\n        if (this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false) {\n            return super.prepareHydratedValue(value, columnMetadata);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return this.client.prepareHydratedValue(value, columnMetadata);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        const driver = this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n        const { pg } = driver;\n        this.DataApiDriver = pg;\n    }\n    /**\n     * Executes given query.\n     */\n    executeQuery(connection, query) {\n        return this.connection.query(query);\n    }\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect() {\n        const extensionsMetadata = await this.checkMetadataForExtensions();\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection);\n        }\n        return Promise.resolve();\n    }\n}\n\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,SAASC,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,MAAMC,eAAe,SAASL,cAAc,CAAC;AAE7C,OAAO,MAAMM,oBAAoB,SAASD,eAAe,CAAC;EACtD;EACA;EACA;EACAE,WAAWA,CAACC,UAAU,EAAE;IACpB,KAAK,CAAC,CAAC;IACP;AACR;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,QAAQ;IAClC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,OAAO,GAAGF,UAAU,CAACE,OAAO;IACjC,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB;IACA,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACC,MAAM,GAAG,IAAI,IAAI,CAACC,aAAa,CAAC,IAAI,CAACJ,OAAO,CAACK,MAAM,EAAE,IAAI,CAACL,OAAO,CAACM,SAAS,EAAE,IAAI,CAACN,OAAO,CAACO,WAAW,EAAE,IAAI,CAACP,OAAO,CAACQ,QAAQ,EAAE,CAACC,KAAK,EAAEC,UAAU,KAAK,IAAI,CAACZ,UAAU,CAACa,MAAM,CAACC,QAAQ,CAACH,KAAK,EAAEC,UAAU,CAAC,EAAE,IAAI,CAACV,OAAO,CAACa,oBAAoB,EAAE,IAAI,CAACb,OAAO,CAACc,aAAa,CAAC;IAC5Q,IAAI,CAACN,QAAQ,GAAGd,WAAW,CAACqB,kBAAkB,CAAC,IAAI,CAACf,OAAO,CAAC,CAACQ,QAAQ;EACzE;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;EACUQ,OAAOA,CAAA,EAAG;IAAA,OAAAC,iBAAA;EAAE;EAClB;AACJ;AACA;EACUC,UAAUA,CAAA,EAAG;IAAA,OAAAD,iBAAA;EAAE;EACrB;AACJ;AACA;EACIE,iBAAiBA,CAACC,IAAI,EAAE;IACpB,OAAO,IAAI5B,yBAAyB,CAAC,IAAI,EAAE,IAAI,IAAI,CAACY,aAAa,CAAC,IAAI,CAACJ,OAAO,CAACK,MAAM,EAAE,IAAI,CAACL,OAAO,CAACM,SAAS,EAAE,IAAI,CAACN,OAAO,CAACO,WAAW,EAAE,IAAI,CAACP,OAAO,CAACQ,QAAQ,EAAE,CAACC,KAAK,EAAEC,UAAU,KAAK,IAAI,CAACZ,UAAU,CAACa,MAAM,CAACC,QAAQ,CAACH,KAAK,EAAEC,UAAU,CAAC,EAAE,IAAI,CAACV,OAAO,CAACa,oBAAoB,EAAE,IAAI,CAACb,OAAO,CAACc,aAAa,CAAC,EAAEM,IAAI,CAAC;EACpT;EACA;AACJ;AACA;EACIC,sBAAsBA,CAACC,KAAK,EAAEC,cAAc,EAAE;IAC1C,IAAI,IAAI,CAACvB,OAAO,CAACc,aAAa,IAC1B,IAAI,CAACd,OAAO,CAACc,aAAa,CAACU,cAAc,KAAK,KAAK,EAAE;MACrD,OAAO,KAAK,CAACH,sBAAsB,CAACC,KAAK,EAAEC,cAAc,CAAC;IAC9D;IACA,IAAIA,cAAc,CAACE,WAAW,EAC1BH,KAAK,GAAG7B,sBAAsB,CAACiC,WAAW,CAACH,cAAc,CAACE,WAAW,EAAEH,KAAK,CAAC;IACjF,OAAO,IAAI,CAACnB,MAAM,CAACkB,sBAAsB,CAACC,KAAK,EAAEC,cAAc,CAAC;EACpE;EACA;AACJ;AACA;EACII,oBAAoBA,CAACL,KAAK,EAAEC,cAAc,EAAE;IACxC,IAAI,IAAI,CAACvB,OAAO,CAACc,aAAa,IAC1B,IAAI,CAACd,OAAO,CAACc,aAAa,CAACU,cAAc,KAAK,KAAK,EAAE;MACrD,OAAO,KAAK,CAACG,oBAAoB,CAACL,KAAK,EAAEC,cAAc,CAAC;IAC5D;IACA,IAAIA,cAAc,CAACE,WAAW,EAC1BH,KAAK,GAAG7B,sBAAsB,CAACmC,aAAa,CAACL,cAAc,CAACE,WAAW,EAAEH,KAAK,CAAC;IACnF,OAAO,IAAI,CAACnB,MAAM,CAACwB,oBAAoB,CAACL,KAAK,EAAEC,cAAc,CAAC;EAClE;EACA;EACA;EACA;EACA;AACJ;AACA;EACIrB,gBAAgBA,CAAA,EAAG;IACf,MAAM2B,MAAM,GAAG,IAAI,CAAC7B,OAAO,CAAC6B,MAAM,IAC9BtC,aAAa,CAACuC,IAAI,CAAC,gCAAgC,CAAC;IACxD,MAAM;MAAEC;IAAG,CAAC,GAAGF,MAAM;IACrB,IAAI,CAACzB,aAAa,GAAG2B,EAAE;EAC3B;EACA;AACJ;AACA;EACIC,YAAYA,CAAClC,UAAU,EAAEW,KAAK,EAAE;IAC5B,OAAO,IAAI,CAACX,UAAU,CAACW,KAAK,CAACA,KAAK,CAAC;EACvC;EACA;AACJ;AACA;EACUwB,YAAYA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAjB,iBAAA;MACjB,MAAMkB,kBAAkB,SAASD,KAAI,CAACE,0BAA0B,CAAC,CAAC;MAClE,IAAID,kBAAkB,CAACE,aAAa,EAAE;QAClC,MAAMH,KAAI,CAACI,gBAAgB,CAACH,kBAAkB,EAAED,KAAI,CAACpC,UAAU,CAAC;MACpE;MACA,OAAOyC,OAAO,CAACC,OAAO,CAAC,CAAC;IAAC;EAC7B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}