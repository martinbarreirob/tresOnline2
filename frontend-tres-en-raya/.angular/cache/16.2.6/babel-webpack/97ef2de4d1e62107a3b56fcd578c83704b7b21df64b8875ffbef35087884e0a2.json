{"ast":null,"code":"/**\n * Provides utilities for manipulating tree structures.\n *\n */\nexport class TreeRepositoryUtils {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  static createRelationMaps(manager, metadata, alias, rawResults) {\n    return rawResults.map(rawResult => {\n      var _a;\n      const joinColumn = metadata.treeParentRelation.joinColumns[0];\n      const referencedColumn = (_a = joinColumn.referencedColumn) !== null && _a !== void 0 ? _a : metadata.primaryColumns[0];\n      // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n      const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n      const referencedColumnName = referencedColumn.givenDatabaseName || referencedColumn.databaseName;\n      const id = rawResult[alias + \"_\" + referencedColumnName];\n      const parentId = rawResult[alias + \"_\" + joinColumnName];\n      return {\n        id: manager.connection.driver.prepareHydratedValue(id, referencedColumn),\n        parentId: manager.connection.driver.prepareHydratedValue(parentId, joinColumn)\n      };\n    });\n  }\n  static buildChildrenEntityTree(metadata, entity, entities, relationMaps, options) {\n    var _a;\n    const childProperty = metadata.treeChildrenRelation.propertyName;\n    if (options.depth === 0) {\n      entity[childProperty] = [];\n      return;\n    }\n    const joinColumn = metadata.treeParentRelation.joinColumns[0];\n    const referencedColumn = (_a = joinColumn.referencedColumn) !== null && _a !== void 0 ? _a : metadata.primaryColumns[0];\n    const parentEntityId = referencedColumn.getEntityValue(entity);\n    const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\n    const childIds = new Set(childRelationMaps.map(relationMap => relationMap.id));\n    entity[childProperty] = entities.filter(entity => childIds.has(referencedColumn.getEntityValue(entity)));\n    entity[childProperty].forEach(childEntity => {\n      TreeRepositoryUtils.buildChildrenEntityTree(metadata, childEntity, entities, relationMaps, {\n        ...options,\n        depth: options.depth - 1\n      });\n    });\n  }\n  static buildParentEntityTree(metadata, entity, entities, relationMaps) {\n    var _a;\n    const parentProperty = metadata.treeParentRelation.propertyName;\n    const joinColumn = metadata.treeParentRelation.joinColumns[0];\n    const referencedColumn = (_a = joinColumn.referencedColumn) !== null && _a !== void 0 ? _a : metadata.primaryColumns[0];\n    const entityId = referencedColumn.getEntityValue(entity);\n    const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\n    const parentEntity = entities.find(entity => {\n      if (!parentRelationMap) return false;\n      return referencedColumn.getEntityValue(entity) === parentRelationMap.parentId;\n    });\n    if (parentEntity) {\n      entity[parentProperty] = parentEntity;\n      TreeRepositoryUtils.buildParentEntityTree(metadata, entity[parentProperty], entities, relationMaps);\n    }\n  }\n}","map":{"version":3,"names":["TreeRepositoryUtils","createRelationMaps","manager","metadata","alias","rawResults","map","rawResult","_a","joinColumn","treeParentRelation","joinColumns","referencedColumn","primaryColumns","joinColumnName","givenDatabaseName","databaseName","referencedColumnName","id","parentId","connection","driver","prepareHydratedValue","buildChildrenEntityTree","entity","entities","relationMaps","options","childProperty","treeChildrenRelation","propertyName","depth","parentEntityId","getEntityValue","childRelationMaps","filter","relationMap","childIds","Set","has","forEach","childEntity","buildParentEntityTree","parentProperty","entityId","parentRelationMap","find","parentEntity"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/util/TreeRepositoryUtils.js"],"sourcesContent":["/**\n * Provides utilities for manipulating tree structures.\n *\n */\nexport class TreeRepositoryUtils {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    static createRelationMaps(manager, metadata, alias, rawResults) {\n        return rawResults.map((rawResult) => {\n            var _a;\n            const joinColumn = metadata.treeParentRelation.joinColumns[0];\n            const referencedColumn = (_a = joinColumn.referencedColumn) !== null && _a !== void 0 ? _a : metadata.primaryColumns[0];\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            const joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n            const referencedColumnName = referencedColumn.givenDatabaseName ||\n                referencedColumn.databaseName;\n            const id = rawResult[alias + \"_\" + referencedColumnName];\n            const parentId = rawResult[alias + \"_\" + joinColumnName];\n            return {\n                id: manager.connection.driver.prepareHydratedValue(id, referencedColumn),\n                parentId: manager.connection.driver.prepareHydratedValue(parentId, joinColumn),\n            };\n        });\n    }\n    static buildChildrenEntityTree(metadata, entity, entities, relationMaps, options) {\n        var _a;\n        const childProperty = metadata.treeChildrenRelation.propertyName;\n        if (options.depth === 0) {\n            entity[childProperty] = [];\n            return;\n        }\n        const joinColumn = metadata.treeParentRelation.joinColumns[0];\n        const referencedColumn = (_a = joinColumn.referencedColumn) !== null && _a !== void 0 ? _a : metadata.primaryColumns[0];\n        const parentEntityId = referencedColumn.getEntityValue(entity);\n        const childRelationMaps = relationMaps.filter((relationMap) => relationMap.parentId === parentEntityId);\n        const childIds = new Set(childRelationMaps.map((relationMap) => relationMap.id));\n        entity[childProperty] = entities.filter((entity) => childIds.has(referencedColumn.getEntityValue(entity)));\n        entity[childProperty].forEach((childEntity) => {\n            TreeRepositoryUtils.buildChildrenEntityTree(metadata, childEntity, entities, relationMaps, {\n                ...options,\n                depth: options.depth - 1,\n            });\n        });\n    }\n    static buildParentEntityTree(metadata, entity, entities, relationMaps) {\n        var _a;\n        const parentProperty = metadata.treeParentRelation.propertyName;\n        const joinColumn = metadata.treeParentRelation.joinColumns[0];\n        const referencedColumn = (_a = joinColumn.referencedColumn) !== null && _a !== void 0 ? _a : metadata.primaryColumns[0];\n        const entityId = referencedColumn.getEntityValue(entity);\n        const parentRelationMap = relationMaps.find((relationMap) => relationMap.id === entityId);\n        const parentEntity = entities.find((entity) => {\n            if (!parentRelationMap)\n                return false;\n            return (referencedColumn.getEntityValue(entity) ===\n                parentRelationMap.parentId);\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            TreeRepositoryUtils.buildParentEntityTree(metadata, entity[parentProperty], entities, relationMaps);\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}