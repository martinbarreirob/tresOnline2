{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.connection = connection;\n    this.options = connection.options;\n    this.database = this.options.database;\n    this.driver = this.options.driver;\n    // load sqlite package\n    this.loadDependencies();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Closes connection with database.\n   */\n  disconnect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((ok, fail) => {\n        _this.queryRunner = undefined;\n        _this.databaseConnection.close().then(ok).catch(fail);\n      });\n    })();\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) {\n      this.queryRunner = new NativescriptQueryRunner(this);\n    }\n    return this.queryRunner;\n  }\n  normalizeType(column) {\n    if (column.type === Buffer) {\n      return \"blob\";\n    }\n    return super.normalizeType(column);\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      const options = Object.assign({}, {\n        readOnly: this.options.readOnly,\n        key: this.options.key,\n        multithreading: this.options.multithreading,\n        migrate: this.options.migrate,\n        iosFlags: this.options.iosFlags,\n        androidFlags: this.options.androidFlags\n      }, this.options.extra || {});\n      new this.sqlite(this.options.database, options, (err, db) => {\n        if (err) return fail(err);\n        // use object mode to work with TypeORM\n        db.resultType(this.sqlite.RESULTSASOBJECT);\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n        db.execSQL(`PRAGMA foreign_keys = ON`, [], (err, result) => {\n          if (err) return fail(err);\n          // We are all set\n          ok(db);\n        });\n      });\n    });\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    this.sqlite = this.driver;\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","NativescriptQueryRunner","DriverPackageNotInstalledError","NativescriptDriver","constructor","connection","options","database","driver","loadDependencies","disconnect","_this","_asyncToGenerator","Promise","ok","fail","queryRunner","undefined","databaseConnection","close","then","catch","createQueryRunner","mode","normalizeType","column","type","Buffer","createDatabaseConnection","Object","assign","readOnly","key","multithreading","migrate","iosFlags","androidFlags","extra","sqlite","err","db","resultType","RESULTSASOBJECT","execSQL","result"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/nativescript/NativescriptDriver.js"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.connection = connection;\n        this.options = connection.options;\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n        // load sqlite package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close().then(ok).catch(fail);\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this);\n        }\n        return this.queryRunner;\n    }\n    normalizeType(column) {\n        if (column.type === Buffer) {\n            return \"blob\";\n        }\n        return super.normalizeType(column);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    createDatabaseConnection() {\n        return new Promise((ok, fail) => {\n            const options = Object.assign({}, {\n                readOnly: this.options.readOnly,\n                key: this.options.key,\n                multithreading: this.options.multithreading,\n                migrate: this.options.migrate,\n                iosFlags: this.options.iosFlags,\n                androidFlags: this.options.androidFlags,\n            }, this.options.extra || {});\n            new this.sqlite(this.options.database, options, (err, db) => {\n                if (err)\n                    return fail(err);\n                // use object mode to work with TypeORM\n                db.resultType(this.sqlite.RESULTSASOBJECT);\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                db.execSQL(`PRAGMA foreign_keys = ON`, [], (err, result) => {\n                    if (err)\n                        return fail(err);\n                    // We are all set\n                    ok(db);\n                });\n            });\n        });\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}