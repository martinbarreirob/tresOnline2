{"ast":null,"code":"/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableForeignKey\");\n    /**\n     * Column names which included by this foreign key.\n     */\n    this.columnNames = [];\n    /**\n     * Column names which included by this foreign key.\n     */\n    this.referencedColumnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.referencedColumnNames = options.referencedColumnNames;\n    this.referencedDatabase = options.referencedDatabase;\n    this.referencedSchema = options.referencedSchema;\n    this.referencedTableName = options.referencedTableName;\n    this.onDelete = options.onDelete;\n    this.onUpdate = options.onUpdate;\n    this.deferrable = options.deferrable;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new copy of this foreign key with exactly same properties.\n   */\n  clone() {\n    return new TableForeignKey({\n      name: this.name,\n      columnNames: [...this.columnNames],\n      referencedColumnNames: [...this.referencedColumnNames],\n      referencedDatabase: this.referencedDatabase,\n      referencedSchema: this.referencedSchema,\n      referencedTableName: this.referencedTableName,\n      onDelete: this.onDelete,\n      onUpdate: this.onUpdate,\n      deferrable: this.deferrable\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new table foreign key from the given foreign key metadata.\n   */\n  static create(metadata, driver) {\n    return new TableForeignKey({\n      name: metadata.name,\n      columnNames: metadata.columnNames,\n      referencedColumnNames: metadata.referencedColumnNames,\n      referencedDatabase: metadata.referencedEntityMetadata.database,\n      referencedSchema: metadata.referencedEntityMetadata.schema,\n      referencedTableName: metadata.referencedTablePath,\n      onDelete: metadata.onDelete,\n      onUpdate: metadata.onUpdate,\n      deferrable: metadata.deferrable\n    });\n  }\n}","map":{"version":3,"names":["TableForeignKey","constructor","options","Symbol","for","columnNames","referencedColumnNames","name","referencedDatabase","referencedSchema","referencedTableName","onDelete","onUpdate","deferrable","clone","create","metadata","driver","referencedEntityMetadata","database","schema","referencedTablePath"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js"],"sourcesContent":["/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableForeignKey\");\n        /**\n         * Column names which included by this foreign key.\n         */\n        this.columnNames = [];\n        /**\n         * Column names which included by this foreign key.\n         */\n        this.referencedColumnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedDatabase = options.referencedDatabase;\n        this.referencedSchema = options.referencedSchema;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone() {\n        return new TableForeignKey({\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedDatabase: this.referencedDatabase,\n            referencedSchema: this.referencedSchema,\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(metadata, driver) {\n        return new TableForeignKey({\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedDatabase: metadata.referencedEntityMetadata.database,\n            referencedSchema: metadata.referencedEntityMetadata.schema,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,CAAC;EACzB;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC,aAAa,CAAC,GAAGC,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;IACnD;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB;AACR;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,EAAE;IAC/B,IAAI,CAACC,IAAI,GAAGL,OAAO,CAACK,IAAI;IACxB,IAAI,CAACF,WAAW,GAAGH,OAAO,CAACG,WAAW;IACtC,IAAI,CAACC,qBAAqB,GAAGJ,OAAO,CAACI,qBAAqB;IAC1D,IAAI,CAACE,kBAAkB,GAAGN,OAAO,CAACM,kBAAkB;IACpD,IAAI,CAACC,gBAAgB,GAAGP,OAAO,CAACO,gBAAgB;IAChD,IAAI,CAACC,mBAAmB,GAAGR,OAAO,CAACQ,mBAAmB;IACtD,IAAI,CAACC,QAAQ,GAAGT,OAAO,CAACS,QAAQ;IAChC,IAAI,CAACC,QAAQ,GAAGV,OAAO,CAACU,QAAQ;IAChC,IAAI,CAACC,UAAU,GAAGX,OAAO,CAACW,UAAU;EACxC;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAId,eAAe,CAAC;MACvBO,IAAI,EAAE,IAAI,CAACA,IAAI;MACfF,WAAW,EAAE,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC;MAClCC,qBAAqB,EAAE,CAAC,GAAG,IAAI,CAACA,qBAAqB,CAAC;MACtDE,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;MAC3CC,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCC,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7CC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,UAAU,EAAE,IAAI,CAACA;IACrB,CAAC,CAAC;EACN;EACA;EACA;EACA;EACA;AACJ;AACA;EACI,OAAOE,MAAMA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAC5B,OAAO,IAAIjB,eAAe,CAAC;MACvBO,IAAI,EAAES,QAAQ,CAACT,IAAI;MACnBF,WAAW,EAAEW,QAAQ,CAACX,WAAW;MACjCC,qBAAqB,EAAEU,QAAQ,CAACV,qBAAqB;MACrDE,kBAAkB,EAAEQ,QAAQ,CAACE,wBAAwB,CAACC,QAAQ;MAC9DV,gBAAgB,EAAEO,QAAQ,CAACE,wBAAwB,CAACE,MAAM;MAC1DV,mBAAmB,EAAEM,QAAQ,CAACK,mBAAmB;MACjDV,QAAQ,EAAEK,QAAQ,CAACL,QAAQ;MAC3BC,QAAQ,EAAEI,QAAQ,CAACJ,QAAQ;MAC3BC,UAAU,EAAEG,QAAQ,CAACH;IACzB,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}