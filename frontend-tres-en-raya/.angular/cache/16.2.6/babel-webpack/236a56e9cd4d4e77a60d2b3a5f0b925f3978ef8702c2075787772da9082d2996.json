{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { getFromContainer } from \"../container\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\";\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    this.connection = connection;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Builds migration instances for the given classes or directories.\n   */\n  buildMigrations(migrations) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n      const allMigrationClasses = [...migrationClasses, ...(yield importClassesFromDirectories(_this.connection.logger, migrationDirectories))];\n      return allMigrationClasses.map(migrationClass => getFromContainer(migrationClass));\n    })();\n  }\n  /**\n   * Builds subscriber instances for the given classes or directories.\n   */\n  buildSubscribers(subscribers) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n      const allSubscriberClasses = [...subscriberClasses, ...(yield importClassesFromDirectories(_this2.connection.logger, subscriberDirectories))];\n      return getMetadataArgsStorage().filterSubscribers(allSubscriberClasses).map(metadata => getFromContainer(metadata.target));\n    })();\n  }\n  /**\n   * Builds entity metadatas for the given classes or directories.\n   */\n  buildEntityMetadatas(entities) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      // todo: instead we need to merge multiple metadata args storages\n      const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n      const entityClasses = entityClassesOrSchemas.filter(entityClass => !InstanceChecker.isEntitySchema(entityClass));\n      const entitySchemas = entityClassesOrSchemas.filter(entityClass => InstanceChecker.isEntitySchema(entityClass));\n      const allEntityClasses = [...entityClasses, ...(yield importClassesFromDirectories(_this3.connection.logger, entityDirectories))];\n      allEntityClasses.forEach(entityClass => {\n        // if we have entity schemas loaded from directories\n        if (InstanceChecker.isEntitySchema(entityClass)) {\n          entitySchemas.push(entityClass);\n        }\n      });\n      const decoratorEntityMetadatas = new EntityMetadataBuilder(_this3.connection, getMetadataArgsStorage()).build(allEntityClasses);\n      const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n      const schemaEntityMetadatas = new EntityMetadataBuilder(_this3.connection, metadataArgsStorageFromSchema).build();\n      return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    })();\n  }\n}","map":{"version":3,"names":["importClassesFromDirectories","OrmUtils","getFromContainer","getMetadataArgsStorage","EntityMetadataBuilder","EntitySchemaTransformer","InstanceChecker","ConnectionMetadataBuilder","constructor","connection","buildMigrations","migrations","_this","_asyncToGenerator","migrationClasses","migrationDirectories","splitClassesAndStrings","allMigrationClasses","logger","map","migrationClass","buildSubscribers","subscribers","_this2","subscriberClasses","subscriberDirectories","allSubscriberClasses","filterSubscribers","metadata","target","buildEntityMetadatas","entities","_this3","entityClassesOrSchemas","entityDirectories","entityClasses","filter","entityClass","isEntitySchema","entitySchemas","allEntityClasses","forEach","push","decoratorEntityMetadatas","build","metadataArgsStorageFromSchema","transform","schemaEntityMetadatas"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/connection/ConnectionMetadataBuilder.js"],"sourcesContent":["import { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { getFromContainer } from \"../container\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\";\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    async buildMigrations(migrations) {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [\n            ...migrationClasses,\n            ...(await importClassesFromDirectories(this.connection.logger, migrationDirectories)),\n        ];\n        return allMigrationClasses.map((migrationClass) => getFromContainer(migrationClass));\n    }\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    async buildSubscribers(subscribers) {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [\n            ...subscriberClasses,\n            ...(await importClassesFromDirectories(this.connection.logger, subscriberDirectories)),\n        ];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map((metadata) => getFromContainer(metadata.target));\n    }\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    async buildEntityMetadatas(entities) {\n        // todo: instead we need to merge multiple metadata args storages\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const entityClasses = entityClassesOrSchemas.filter((entityClass) => !InstanceChecker.isEntitySchema(entityClass));\n        const entitySchemas = entityClassesOrSchemas.filter((entityClass) => InstanceChecker.isEntitySchema(entityClass));\n        const allEntityClasses = [\n            ...entityClasses,\n            ...(await importClassesFromDirectories(this.connection.logger, entityDirectories)),\n        ];\n        allEntityClasses.forEach((entityClass) => {\n            // if we have entity schemas loaded from directories\n            if (InstanceChecker.isEntitySchema(entityClass)) {\n                entitySchemas.push(entityClass);\n            }\n        });\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}