{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\";\nimport { PlatformTools } from \"./platform/PlatformTools\";\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\nimport { ConnectionManager } from \"./connection/ConnectionManager\";\nimport { getFromContainer } from \"./container\";\nimport { ObjectUtils } from \"./util/ObjectUtils\";\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage() {\n  // we should store metadata storage in a global variable otherwise it brings too much problems\n  // one of the problem is that if any entity (or any other) will be imported before consumer will call\n  // useContainer method with his own container implementation, that entity will be registered in the\n  // old old container (default one post probably) and consumer will his entity.\n  // calling useContainer before he imports any entity (or any other) is not always convenient.\n  // another reason is that when we run migrations typeorm is being called from a global package\n  // and it may load entities which register decorators in typeorm of local package\n  // this leads to impossibility of usage of entities in migrations and cli related operations\n  const globalScope = PlatformTools.getGlobalVariable();\n  if (!globalScope.typeormMetadataArgsStorage) globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n  return globalScope.typeormMetadataArgsStorage;\n}\n/**\n * Reads connection options stored in ormconfig configuration file.\n *\n * @deprecated\n */\nexport function getConnectionOptions() {\n  return _getConnectionOptions.apply(this, arguments);\n}\n/**\n * Gets a ConnectionManager which creates connections.\n *\n * @deprecated\n */\nfunction _getConnectionOptions() {\n  _getConnectionOptions = _asyncToGenerator(function* (connectionName = \"default\") {\n    return new ConnectionOptionsReader().get(connectionName);\n  });\n  return _getConnectionOptions.apply(this, arguments);\n}\nexport function getConnectionManager() {\n  return getFromContainer(ConnectionManager);\n}\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n *\n * @deprecated\n */\nexport function createConnection(_x) {\n  return _createConnection.apply(this, arguments);\n}\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * All connections from the ormconfig will be created.\n *\n * @deprecated\n */\nfunction _createConnection() {\n  _createConnection = _asyncToGenerator(function* (optionsOrName) {\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n    const options = ObjectUtils.isObject(optionsOrName) ? optionsOrName : yield getConnectionOptions(connectionName);\n    return getConnectionManager().create(options).connect();\n  });\n  return _createConnection.apply(this, arguments);\n}\nexport function createConnections(_x2) {\n  return _createConnections.apply(this, arguments);\n}\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nfunction _createConnections() {\n  _createConnections = _asyncToGenerator(function* (options) {\n    if (!options) options = yield new ConnectionOptionsReader().all();\n    const connections = options.map(options => getConnectionManager().create(options));\n    // Do not use Promise.all or test 8522 will produce a dangling sqlite connection\n    for (const connection of connections) {\n      yield connection.connect();\n    }\n    return connections;\n  });\n  return _createConnections.apply(this, arguments);\n}\nexport function getConnection(connectionName = \"default\") {\n  return getConnectionManager().get(connectionName);\n}\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getManager(connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getMongoManager(connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n *\n * @deprecated\n */\nexport function getSqljsManager(connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets repository for the given entity class.\n *\n * @deprecated\n */\nexport function getRepository(entityClass, connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).getRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getTreeRepository(entityClass, connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).getTreeRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getCustomRepository(customRepository, connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\n}\n/**\n * Gets mongodb repository for the given entity class or name.\n *\n * @deprecated\n */\nexport function getMongoRepository(entityClass, connectionName = \"default\") {\n  return getConnectionManager().get(connectionName).getMongoRepository(entityClass);\n}\n/**\n * Creates a new query builder.\n *\n * @deprecated\n */\nexport function createQueryBuilder(entityClass, alias, connectionName = \"default\") {\n  if (entityClass) {\n    return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n  }\n  return getConnection(connectionName).createQueryBuilder();\n}","map":{"version":3,"names":["MetadataArgsStorage","PlatformTools","ConnectionOptionsReader","ConnectionManager","getFromContainer","ObjectUtils","getMetadataArgsStorage","globalScope","getGlobalVariable","typeormMetadataArgsStorage","getConnectionOptions","_getConnectionOptions","apply","arguments","_asyncToGenerator","connectionName","get","getConnectionManager","createConnection","_x","_createConnection","optionsOrName","options","isObject","create","connect","createConnections","_x2","_createConnections","all","connections","map","connection","getConnection","getManager","manager","getMongoManager","getSqljsManager","getRepository","entityClass","getTreeRepository","getCustomRepository","customRepository","getMongoRepository","createQueryBuilder","alias"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/globals.js"],"sourcesContent":["import { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\";\nimport { PlatformTools } from \"./platform/PlatformTools\";\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\nimport { ConnectionManager } from \"./connection/ConnectionManager\";\nimport { getFromContainer } from \"./container\";\nimport { ObjectUtils } from \"./util/ObjectUtils\";\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage() {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n    return globalScope.typeormMetadataArgsStorage;\n}\n/**\n * Reads connection options stored in ormconfig configuration file.\n *\n * @deprecated\n */\nexport async function getConnectionOptions(connectionName = \"default\") {\n    return new ConnectionOptionsReader().get(connectionName);\n}\n/**\n * Gets a ConnectionManager which creates connections.\n *\n * @deprecated\n */\nexport function getConnectionManager() {\n    return getFromContainer(ConnectionManager);\n}\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n *\n * @deprecated\n */\nexport async function createConnection(optionsOrName) {\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n    const options = ObjectUtils.isObject(optionsOrName)\n        ? optionsOrName\n        : await getConnectionOptions(connectionName);\n    return getConnectionManager().create(options).connect();\n}\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/env) file or environment variables.\n * All connections from the ormconfig will be created.\n *\n * @deprecated\n */\nexport async function createConnections(options) {\n    if (!options)\n        options = await new ConnectionOptionsReader().all();\n    const connections = options.map((options) => getConnectionManager().create(options));\n    // Do not use Promise.all or test 8522 will produce a dangling sqlite connection\n    for (const connection of connections) {\n        await connection.connect();\n    }\n    return connections;\n}\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getConnection(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName);\n}\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getManager(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n *\n * @deprecated\n */\nexport function getMongoManager(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName)\n        .manager;\n}\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n *\n * @deprecated\n */\nexport function getSqljsManager(connectionName = \"default\") {\n    return getConnectionManager().get(connectionName)\n        .manager;\n}\n/**\n * Gets repository for the given entity class.\n *\n * @deprecated\n */\nexport function getRepository(entityClass, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getTreeRepository(entityClass, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getTreeRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n *\n * @deprecated\n */\nexport function getCustomRepository(customRepository, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getCustomRepository(customRepository);\n}\n/**\n * Gets mongodb repository for the given entity class or name.\n *\n * @deprecated\n */\nexport function getMongoRepository(entityClass, connectionName = \"default\") {\n    return getConnectionManager()\n        .get(connectionName)\n        .getMongoRepository(entityClass);\n}\n/**\n * Creates a new query builder.\n *\n * @deprecated\n */\nexport function createQueryBuilder(entityClass, alias, connectionName = \"default\") {\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n    }\n    return getConnection(connectionName).createQueryBuilder();\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}