{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Unique columns.\n     */\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n    if (options.args) {\n      this.target = options.args.target;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n      this.deferrable = options.args.deferrable;\n    }\n  }\n  // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend unique constraint properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n  build(namingStrategy) {\n    const map = {};\n    // if columns already an array of string then simply return it\n    if (this.givenColumnNames) {\n      let columnPropertyPaths = [];\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(columnName => {\n          if (this.embeddedMetadata) return this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n      } else {\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n        if (Array.isArray(columnsFnResult)) {\n          columnPropertyPaths = columnsFnResult.map(i => String(i));\n          columnPropertyPaths.forEach(name => map[name] = 1);\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult).map(i => String(i));\n          Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n        }\n      }\n      this.columns = columnPropertyPaths.map(propertyName => {\n        const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyName);\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n        const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyName);\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n        const indexName = this.givenName ? '\"' + this.givenName + '\" ' : \"\";\n        const entityName = this.entityMetadata.targetName;\n        throw new TypeORMError(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyName);\n      }).reduce((a, b) => a.concat(b));\n    }\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n      const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tableName, this.columns.map(column => column.databaseName));\n    return this;\n  }\n}","map":{"version":3,"names":["TypeORMError","UniqueMetadata","constructor","options","columns","columnNamesWithOrderingMap","entityMetadata","embeddedMetadata","args","target","givenName","name","givenColumnNames","deferrable","build","namingStrategy","map","columnPropertyPaths","Array","isArray","columnName","propertyPath","trim","forEach","columnsFnResult","propertiesMap","i","String","Object","keys","propertyName","columnWithSameName","find","column","relationWithSameName","relations","relation","isWithJoinColumn","joinColumns","indexName","entityName","targetName","reduce","a","b","concat","updatedMap","key","databasePath","uniqueConstraintName","tableName","databaseName"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata/UniqueMetadata.js"],"sourcesContent":["import { TypeORMError } from \"../error\";\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Unique columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n            this.deferrable = options.args.deferrable;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy) {\n        const map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map((columnName) => {\n                    if (this.embeddedMetadata)\n                        return (this.embeddedMetadata.propertyPath +\n                            \".\" +\n                            columnName);\n                    return columnName.trim();\n                });\n                columnPropertyPaths.forEach((propertyPath) => (map[propertyPath] = 1));\n            }\n            else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i) => String(i));\n                    columnPropertyPaths.forEach((name) => (map[name] = 1));\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i) => String(i));\n                    Object.keys(columnsFnResult).forEach((columnName) => (map[columnName] = columnsFnResult[columnName]));\n                }\n            }\n            this.columns = columnPropertyPaths\n                .map((propertyName) => {\n                const columnWithSameName = this.entityMetadata.columns.find((column) => column.propertyPath === propertyName);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find((relation) => relation.isWithJoinColumn &&\n                    relation.propertyName === propertyName);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName\n                    ? '\"' + this.givenName + '\" '\n                    : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new TypeORMError(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                    propertyName);\n            })\n                .reduce((a, b) => a.concat(b));\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find((column) => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.uniqueConstraintName(this.entityMetadata.tableName, this.columns.map((column) => column.databaseName));\n        return this;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}