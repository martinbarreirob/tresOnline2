{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,\n * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its\n * side of the relation.\n */\nexport function OneToMany(typeFunctionOrTarget, inverseSide, options) {\n  return function (object, propertyName) {\n    if (!options) options = {};\n    // Now try to determine if it is a lazy relation.\n    let isLazy = options && options.lazy === true;\n    if (!isLazy && Reflect && Reflect.getMetadata) {\n      // automatic determination\n      const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n      if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") isLazy = true;\n    }\n    getMetadataArgsStorage().relations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      // propertyType: reflectedType,\n      isLazy: isLazy,\n      relationType: \"one-to-many\",\n      type: typeFunctionOrTarget,\n      inverseSideProperty: inverseSide,\n      options: options\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","OneToMany","typeFunctionOrTarget","inverseSide","options","object","propertyName","isLazy","lazy","Reflect","getMetadata","reflectedType","name","toLowerCase","relations","push","target","constructor","relationType","type","inverseSideProperty"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/relations/OneToMany.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,\n * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its\n * side of the relation.\n */\nexport function OneToMany(typeFunctionOrTarget, inverseSide, options) {\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true;\n        if (!isLazy && Reflect && Reflect.getMetadata) {\n            // automatic determination\n            const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,oBAAoB,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAClE,OAAO,UAAUC,MAAM,EAAEC,YAAY,EAAE;IACnC,IAAI,CAACF,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB;IACA,IAAIG,MAAM,GAAGH,OAAO,IAAIA,OAAO,CAACI,IAAI,KAAK,IAAI;IAC7C,IAAI,CAACD,MAAM,IAAIE,OAAO,IAAIA,OAAO,CAACC,WAAW,EAAE;MAC3C;MACA,MAAMC,aAAa,GAAGF,OAAO,CAACC,WAAW,CAAC,aAAa,EAAEL,MAAM,EAAEC,YAAY,CAAC;MAC9E,IAAIK,aAAa,IACb,OAAOA,aAAa,CAACC,IAAI,KAAK,QAAQ,IACtCD,aAAa,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAK,SAAS,EAC9CN,MAAM,GAAG,IAAI;IACrB;IACAP,sBAAsB,CAAC,CAAC,CAACc,SAAS,CAACC,IAAI,CAAC;MACpCC,MAAM,EAAEX,MAAM,CAACY,WAAW;MAC1BX,YAAY,EAAEA,YAAY;MAC1B;MACAC,MAAM,EAAEA,MAAM;MACdW,YAAY,EAAE,aAAa;MAC3BC,IAAI,EAAEjB,oBAAoB;MAC1BkB,mBAAmB,EAAEjB,WAAW;MAChCC,OAAO,EAAEA;IACb,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}