{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type, options) {\n  return function (target) {\n    getMetadataArgsStorage().trees.push({\n      target: target,\n      type: type,\n      options: type === \"closure-table\" ? options : undefined\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","Tree","type","options","target","trees","push","undefined"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/tree/Tree.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type, options) {\n    return function (target) {\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type,\n            options: type === \"closure-table\" ? options : undefined,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAChC,OAAO,UAAUC,MAAM,EAAE;IACrBJ,sBAAsB,CAAC,CAAC,CAACK,KAAK,CAACC,IAAI,CAAC;MAChCF,MAAM,EAAEA,MAAM;MACdF,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAED,IAAI,KAAK,eAAe,GAAGC,OAAO,GAAGI;IAClD,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}