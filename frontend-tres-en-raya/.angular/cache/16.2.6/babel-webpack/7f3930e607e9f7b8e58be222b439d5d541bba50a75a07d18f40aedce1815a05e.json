{"ast":null,"code":"/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableColumn\");\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    this.isNullable = false;\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    this.isGenerated = false;\n    /**\n     * Indicates if column is a primary key.\n     */\n    this.isPrimary = false;\n    /**\n     * Indicates if column has unique value.\n     */\n    this.isUnique = false;\n    /**\n     * Indicates if column stores array.\n     */\n    this.isArray = false;\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    this.length = \"\";\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    this.zerofill = false;\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    this.unsigned = false;\n    if (options) {\n      this.name = options.name;\n      this.type = options.type || \"\";\n      this.length = options.length || \"\";\n      this.width = options.width;\n      this.charset = options.charset;\n      this.collation = options.collation;\n      this.precision = options.precision;\n      this.scale = options.scale;\n      this.zerofill = options.zerofill || false;\n      this.unsigned = this.zerofill ? true : options.unsigned || false;\n      this.default = options.default;\n      this.onUpdate = options.onUpdate;\n      this.isNullable = options.isNullable || false;\n      this.isGenerated = options.isGenerated || false;\n      this.generationStrategy = options.generationStrategy;\n      this.generatedIdentity = options.generatedIdentity;\n      this.isPrimary = options.isPrimary || false;\n      this.isUnique = options.isUnique || false;\n      this.isArray = options.isArray || false;\n      this.comment = options.comment;\n      this.enum = options.enum;\n      this.enumName = options.enumName;\n      this.primaryKeyConstraintName = options.primaryKeyConstraintName;\n      this.asExpression = options.asExpression;\n      this.generatedType = options.generatedType;\n      this.spatialFeatureType = options.spatialFeatureType;\n      this.srid = options.srid;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Clones this column to a new column with exact same properties as this column has.\n   */\n  clone() {\n    return new TableColumn({\n      name: this.name,\n      type: this.type,\n      length: this.length,\n      width: this.width,\n      charset: this.charset,\n      collation: this.collation,\n      precision: this.precision,\n      scale: this.scale,\n      zerofill: this.zerofill,\n      unsigned: this.unsigned,\n      enum: this.enum,\n      enumName: this.enumName,\n      primaryKeyConstraintName: this.primaryKeyConstraintName,\n      asExpression: this.asExpression,\n      generatedType: this.generatedType,\n      default: this.default,\n      onUpdate: this.onUpdate,\n      isNullable: this.isNullable,\n      isGenerated: this.isGenerated,\n      generationStrategy: this.generationStrategy,\n      generatedIdentity: this.generatedIdentity,\n      isPrimary: this.isPrimary,\n      isUnique: this.isUnique,\n      isArray: this.isArray,\n      comment: this.comment,\n      spatialFeatureType: this.spatialFeatureType,\n      srid: this.srid\n    });\n  }\n}","map":{"version":3,"names":["TableColumn","constructor","options","Symbol","for","isNullable","isGenerated","isPrimary","isUnique","isArray","length","zerofill","unsigned","name","type","width","charset","collation","precision","scale","default","onUpdate","generationStrategy","generatedIdentity","comment","enum","enumName","primaryKeyConstraintName","asExpression","generatedType","spatialFeatureType","srid","clone"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/schema-builder/table/TableColumn.js"],"sourcesContent":["/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableColumn\");\n        /**\n         * Indicates if column is NULL, or is NOT NULL in the database.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is auto-generated sequence.\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if column has unique value.\n         */\n        this.isUnique = false;\n        /**\n         * Indicates if column stores array.\n         */\n        this.isArray = false;\n        /**\n         * Column type's length. Used only on some column types.\n         * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n         */\n        this.length = \"\";\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        if (options) {\n            this.name = options.name;\n            this.type = options.type || \"\";\n            this.length = options.length || \"\";\n            this.width = options.width;\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.zerofill = options.zerofill || false;\n            this.unsigned = this.zerofill ? true : options.unsigned || false;\n            this.default = options.default;\n            this.onUpdate = options.onUpdate;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.generatedIdentity = options.generatedIdentity;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.isArray = options.isArray || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n            this.enumName = options.enumName;\n            this.primaryKeyConstraintName = options.primaryKeyConstraintName;\n            this.asExpression = options.asExpression;\n            this.generatedType = options.generatedType;\n            this.spatialFeatureType = options.spatialFeatureType;\n            this.srid = options.srid;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone() {\n        return new TableColumn({\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            enumName: this.enumName,\n            primaryKeyConstraintName: this.primaryKeyConstraintName,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            generatedIdentity: this.generatedIdentity,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid,\n        });\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}