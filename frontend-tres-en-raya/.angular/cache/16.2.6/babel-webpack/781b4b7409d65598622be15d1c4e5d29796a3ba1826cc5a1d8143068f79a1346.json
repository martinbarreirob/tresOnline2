{"ast":null,"code":"import { MetadataUtils } from \"../metadata-builder/MetadataUtils\";\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n  constructor() {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n    this.tables = [];\n    this.trees = [];\n    this.entityRepositories = [];\n    this.transactionEntityManagers = [];\n    this.transactionRepositories = [];\n    this.namingStrategies = [];\n    this.entitySubscribers = [];\n    this.indices = [];\n    this.uniques = [];\n    this.checks = [];\n    this.exclusions = [];\n    this.columns = [];\n    this.generations = [];\n    this.relations = [];\n    this.joinColumns = [];\n    this.joinTables = [];\n    this.entityListeners = [];\n    this.relationCounts = [];\n    this.relationIds = [];\n    this.embeddeds = [];\n    this.inheritances = [];\n    this.discriminatorValues = [];\n  }\n  filterTables(target) {\n    return this.filterByTarget(this.tables, target);\n  }\n  filterColumns(target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n  }\n  findGenerated(target, propertyName) {\n    return this.generations.find(generated => {\n      return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n    });\n  }\n  findTree(target) {\n    return this.trees.find(tree => {\n      return Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target;\n    });\n  }\n  filterRelations(target) {\n    return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations, target);\n  }\n  filterRelationIds(target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n  }\n  filterRelationCounts(target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n  }\n  filterIndices(target) {\n    // todo: implement parent-entity overrides?\n    return this.indices.filter(index => {\n      return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;\n    });\n  }\n  filterUniques(target) {\n    return this.uniques.filter(unique => {\n      return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;\n    });\n  }\n  filterChecks(target) {\n    return this.checks.filter(check => {\n      return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;\n    });\n  }\n  filterExclusions(target) {\n    return this.exclusions.filter(exclusion => {\n      return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n    });\n  }\n  filterListeners(target) {\n    return this.filterByTarget(this.entityListeners, target);\n  }\n  filterEmbeddeds(target) {\n    return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n  }\n  findJoinTable(target, propertyName) {\n    return this.joinTables.find(joinTable => {\n      return joinTable.target === target && joinTable.propertyName === propertyName;\n    });\n  }\n  filterJoinColumns(target, propertyName) {\n    // todo: implement parent-entity overrides?\n    return this.joinColumns.filter(joinColumn => {\n      return joinColumn.target === target && joinColumn.propertyName === propertyName;\n    });\n  }\n  filterSubscribers(target) {\n    return this.filterByTarget(this.entitySubscribers, target);\n  }\n  filterNamingStrategies(target) {\n    return this.filterByTarget(this.namingStrategies, target);\n  }\n  filterTransactionEntityManagers(target, propertyName) {\n    return this.transactionEntityManagers.filter(transactionEm => {\n      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n    });\n  }\n  filterTransactionRepository(target, propertyName) {\n    return this.transactionRepositories.filter(transactionEm => {\n      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n    });\n  }\n  filterSingleTableChildren(target) {\n    return this.tables.filter(table => {\n      return typeof table.target === \"function\" && typeof target === \"function\" && MetadataUtils.isInherited(table.target, target) && table.type === \"entity-child\";\n    });\n  }\n  findInheritanceType(target) {\n    return this.inheritances.find(inheritance => inheritance.target === target);\n  }\n  findDiscriminatorValue(target) {\n    return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Filters given array by a given target or targets.\n   */\n  filterByTarget(array, target) {\n    return array.filter(table => {\n      return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;\n    });\n  }\n  /**\n   * Filters given array by a given target or targets and prevents duplicate property names.\n   */\n  filterByTargetAndWithoutDuplicateProperties(array, target) {\n    const newArray = [];\n    array.forEach(item => {\n      const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n      if (sameTarget) {\n        if (!newArray.find(newItem => newItem.propertyName === item.propertyName)) newArray.push(item);\n      }\n    });\n    return newArray;\n  }\n  /**\n   * Filters given array by a given target or targets and prevents duplicate relation property names.\n   */\n  filterByTargetAndWithoutDuplicateRelationProperties(array, target) {\n    const newArray = [];\n    array.forEach(item => {\n      const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n      if (sameTarget) {\n        const existingIndex = newArray.findIndex(newItem => newItem.propertyName === item.propertyName);\n        if (Array.isArray(target) && existingIndex !== -1 && target.indexOf(item.target) < target.indexOf(newArray[existingIndex].target)) {\n          const clone = Object.create(newArray[existingIndex]);\n          clone.type = item.type;\n          newArray[existingIndex] = clone;\n        } else if (existingIndex === -1) {\n          newArray.push(item);\n        }\n      }\n    });\n    return newArray;\n  }\n  /**\n   * Filters given array by a given target or targets and prevents duplicate embedded property names.\n   */\n  filterByTargetAndWithoutDuplicateEmbeddedProperties(array, target) {\n    const newArray = [];\n    array.forEach(item => {\n      const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n      if (sameTarget) {\n        const isDuplicateEmbeddedProperty = newArray.find(newItem => newItem.prefix === item.prefix && newItem.propertyName === item.propertyName);\n        if (!isDuplicateEmbeddedProperty) newArray.push(item);\n      }\n    });\n    return newArray;\n  }\n}","map":{"version":3,"names":["MetadataUtils","MetadataArgsStorage","constructor","tables","trees","entityRepositories","transactionEntityManagers","transactionRepositories","namingStrategies","entitySubscribers","indices","uniques","checks","exclusions","columns","generations","relations","joinColumns","joinTables","entityListeners","relationCounts","relationIds","embeddeds","inheritances","discriminatorValues","filterTables","target","filterByTarget","filterColumns","filterByTargetAndWithoutDuplicateProperties","findGenerated","propertyName","find","generated","Array","isArray","indexOf","findTree","tree","filterRelations","filterByTargetAndWithoutDuplicateRelationProperties","filterRelationIds","filterRelationCounts","filterIndices","filter","index","filterUniques","unique","filterChecks","check","filterExclusions","exclusion","filterListeners","filterEmbeddeds","filterByTargetAndWithoutDuplicateEmbeddedProperties","findJoinTable","joinTable","filterJoinColumns","joinColumn","filterSubscribers","filterNamingStrategies","filterTransactionEntityManagers","transactionEm","methodName","filterTransactionRepository","filterSingleTableChildren","table","isInherited","type","findInheritanceType","inheritance","findDiscriminatorValue","discriminatorValue","array","newArray","forEach","item","sameTarget","newItem","push","existingIndex","findIndex","clone","Object","create","isDuplicateEmbeddedProperty","prefix"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js"],"sourcesContent":["import { MetadataUtils } from \"../metadata-builder/MetadataUtils\";\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n    constructor() {\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this.tables = [];\n        this.trees = [];\n        this.entityRepositories = [];\n        this.transactionEntityManagers = [];\n        this.transactionRepositories = [];\n        this.namingStrategies = [];\n        this.entitySubscribers = [];\n        this.indices = [];\n        this.uniques = [];\n        this.checks = [];\n        this.exclusions = [];\n        this.columns = [];\n        this.generations = [];\n        this.relations = [];\n        this.joinColumns = [];\n        this.joinTables = [];\n        this.entityListeners = [];\n        this.relationCounts = [];\n        this.relationIds = [];\n        this.embeddeds = [];\n        this.inheritances = [];\n        this.discriminatorValues = [];\n    }\n    filterTables(target) {\n        return this.filterByTarget(this.tables, target);\n    }\n    filterColumns(target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n    }\n    findGenerated(target, propertyName) {\n        return this.generations.find((generated) => {\n            return ((Array.isArray(target)\n                ? target.indexOf(generated.target) !== -1\n                : generated.target === target) &&\n                generated.propertyName === propertyName);\n        });\n    }\n    findTree(target) {\n        return this.trees.find((tree) => {\n            return Array.isArray(target)\n                ? target.indexOf(tree.target) !== -1\n                : tree.target === target;\n        });\n    }\n    filterRelations(target) {\n        return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations, target);\n    }\n    filterRelationIds(target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n    }\n    filterRelationCounts(target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n    }\n    filterIndices(target) {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter((index) => {\n            return Array.isArray(target)\n                ? target.indexOf(index.target) !== -1\n                : index.target === target;\n        });\n    }\n    filterUniques(target) {\n        return this.uniques.filter((unique) => {\n            return Array.isArray(target)\n                ? target.indexOf(unique.target) !== -1\n                : unique.target === target;\n        });\n    }\n    filterChecks(target) {\n        return this.checks.filter((check) => {\n            return Array.isArray(target)\n                ? target.indexOf(check.target) !== -1\n                : check.target === target;\n        });\n    }\n    filterExclusions(target) {\n        return this.exclusions.filter((exclusion) => {\n            return Array.isArray(target)\n                ? target.indexOf(exclusion.target) !== -1\n                : exclusion.target === target;\n        });\n    }\n    filterListeners(target) {\n        return this.filterByTarget(this.entityListeners, target);\n    }\n    filterEmbeddeds(target) {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n    }\n    findJoinTable(target, propertyName) {\n        return this.joinTables.find((joinTable) => {\n            return (joinTable.target === target &&\n                joinTable.propertyName === propertyName);\n        });\n    }\n    filterJoinColumns(target, propertyName) {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter((joinColumn) => {\n            return (joinColumn.target === target &&\n                joinColumn.propertyName === propertyName);\n        });\n    }\n    filterSubscribers(target) {\n        return this.filterByTarget(this.entitySubscribers, target);\n    }\n    filterNamingStrategies(target) {\n        return this.filterByTarget(this.namingStrategies, target);\n    }\n    filterTransactionEntityManagers(target, propertyName) {\n        return this.transactionEntityManagers.filter((transactionEm) => {\n            return ((Array.isArray(target)\n                ? target.indexOf(transactionEm.target) !== -1\n                : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName);\n        });\n    }\n    filterTransactionRepository(target, propertyName) {\n        return this.transactionRepositories.filter((transactionEm) => {\n            return ((Array.isArray(target)\n                ? target.indexOf(transactionEm.target) !== -1\n                : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName);\n        });\n    }\n    filterSingleTableChildren(target) {\n        return this.tables.filter((table) => {\n            return (typeof table.target === \"function\" &&\n                typeof target === \"function\" &&\n                MetadataUtils.isInherited(table.target, target) &&\n                table.type === \"entity-child\");\n        });\n    }\n    findInheritanceType(target) {\n        return this.inheritances.find((inheritance) => inheritance.target === target);\n    }\n    findDiscriminatorValue(target) {\n        return this.discriminatorValues.find((discriminatorValue) => discriminatorValue.target === target);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Filters given array by a given target or targets.\n     */\n    filterByTarget(array, target) {\n        return array.filter((table) => {\n            return Array.isArray(target)\n                ? target.indexOf(table.target) !== -1\n                : table.target === target;\n        });\n    }\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    filterByTargetAndWithoutDuplicateProperties(array, target) {\n        const newArray = [];\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target;\n            if (sameTarget) {\n                if (!newArray.find((newItem) => newItem.propertyName === item.propertyName))\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n    /**\n     * Filters given array by a given target or targets and prevents duplicate relation property names.\n     */\n    filterByTargetAndWithoutDuplicateRelationProperties(array, target) {\n        const newArray = [];\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target;\n            if (sameTarget) {\n                const existingIndex = newArray.findIndex((newItem) => newItem.propertyName === item.propertyName);\n                if (Array.isArray(target) &&\n                    existingIndex !== -1 &&\n                    target.indexOf(item.target) <\n                        target.indexOf(newArray[existingIndex].target)) {\n                    const clone = Object.create(newArray[existingIndex]);\n                    clone.type = item.type;\n                    newArray[existingIndex] = clone;\n                }\n                else if (existingIndex === -1) {\n                    newArray.push(item);\n                }\n            }\n        });\n        return newArray;\n    }\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    filterByTargetAndWithoutDuplicateEmbeddedProperties(array, target) {\n        const newArray = [];\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target;\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find((newItem) => newItem.prefix === item.prefix &&\n                    newItem.propertyName === item.propertyName);\n                if (!isDuplicateEmbeddedProperty)\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}