{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../socket.service\";\nimport * as i3 from \"@angular/common\";\nfunction GameComponent_tr_10_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 5);\n    i0.ɵɵlistener(\"click\", function GameComponent_tr_10_td_1_Template_td_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const col_r3 = restoredCtx.$implicit;\n      const row_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.makeMove(row_r1, col_r3));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const col_r3 = ctx.$implicit;\n    const row_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.getCellValue(row_r1, col_r3), \" \");\n  }\n}\nconst _c0 = function () {\n  return [0, 1, 2];\n};\nfunction GameComponent_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, GameComponent_tr_10_td_1_Template, 2, 1, \"td\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\nexport class GameComponent {\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n    this.baseUrl = 'http://localhost:3000/';\n    this.playerId = 0;\n  }\n  ngOnInit() {\n    let playerLocalStorage = localStorage.getItem('player');\n    if (playerLocalStorage) {\n      this.player = JSON.parse(playerLocalStorage);\n    }\n    this.http.get(`${this.baseUrl}game/playerGame/${this.player.id}`).subscribe(game => {\n      this.game = game;\n      this.board = JSON.parse(game.board);\n    });\n    this.socketService.listen('new-player').subscribe(newPlayer => {\n      this.opponent = newPlayer;\n    });\n  }\n  getCellValue(row, col) {\n    return this.board[row][col];\n  }\n  makeMove(row, col) {\n    console.log('move');\n  }\n  static #_ = this.ɵfac = function GameComponent_Factory(t) {\n    return new (t || GameComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SocketService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameComponent,\n    selectors: [[\"app-game\"]],\n    decls: 11,\n    vars: 4,\n    consts: [[1, \"row\"], [1, \"col\"], [1, \"tablaTres\", \"m-5\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function GameComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"MESA\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 1)(4, \"h2\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 1)(7, \"h2\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"table\", 2);\n        i0.ɵɵtemplate(10, GameComponent_tr_10_Template, 2, 2, \"tr\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.player.nombre);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.opponent == null ? null : ctx.opponent.nombre);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(3, _c0));\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\".game-board[_ngcontent-%COMP%] {\\n  border-collapse: collapse;\\n  width: 300px;\\n  height: 300px;\\n}\\n\\n.game-board[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n  border: 12px solid rgb(72, 87, 255);\\n  width: 33.33%;\\n  height: 33.33%;\\n  text-align: center;\\n  vertical-align: middle;\\n  font-size: 24px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS9nYW1lLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGFBQWE7QUFDZjs7QUFFQTtFQUNFLG1DQUFtQztFQUNuQyxhQUFhO0VBQ2IsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixzQkFBc0I7RUFDdEIsZUFBZTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIi5nYW1lLWJvYXJkIHtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIHdpZHRoOiAzMDBweDtcclxuICBoZWlnaHQ6IDMwMHB4O1xyXG59XHJcblxyXG4uZ2FtZS1ib2FyZCB0ZCB7XHJcbiAgYm9yZGVyOiAxMnB4IHNvbGlkIHJnYig3MiwgODcsIDI1NSk7XHJcbiAgd2lkdGg6IDMzLjMzJTtcclxuICBoZWlnaHQ6IDMzLjMzJTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICBmb250LXNpemU6IDI0cHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","GameComponent_tr_10_td_1_Template_td_click_0_listener","restoredCtx","ɵɵrestoreView","_r6","col_r3","$implicit","row_r1","ɵɵnextContext","ctx_r4","ɵɵresetView","makeMove","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r2","getCellValue","ɵɵtemplate","GameComponent_tr_10_td_1_Template","ɵɵproperty","ɵɵpureFunction0","_c0","GameComponent","constructor","http","socketService","baseUrl","playerId","ngOnInit","playerLocalStorage","localStorage","getItem","player","JSON","parse","get","id","subscribe","game","board","listen","newPlayer","opponent","row","col","console","log","_","ɵɵdirectiveInject","i1","HttpClient","i2","SocketService","_2","selectors","decls","vars","consts","template","GameComponent_Template","rf","ctx","GameComponent_tr_10_Template","ɵɵtextInterpolate","nombre"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\game\\game.component.ts","C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\game\\game.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { SocketService } from '../socket.service'; // Asegúrate de importar tu servicio\nimport { HttpClient } from '@angular/common/http';\nimport { Player, Game } from '../models/interfaces.model';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})\nexport class GameComponent implements OnInit {\n  constructor (private http: HttpClient, private socketService: SocketService){}\n\n  private baseUrl: string = 'http://localhost:3000/';\n  board: any;\n  player: any;\n  playerId: number = 0;\n  game: any;\n  opponent: any;\n\n  ngOnInit(): void{\n    let playerLocalStorage = localStorage.getItem('player');\n    if(playerLocalStorage){\n      this.player = JSON.parse(playerLocalStorage);\n\n    }\n    this.http.get<Game>(`${this.baseUrl}game/playerGame/${this.player.id}`).subscribe((game)=>{\n      this.game = game;\n      this.board = JSON.parse(game.board);\n    })\n\n    this.socketService.listen('new-player').subscribe(newPlayer => {\n      this.opponent = newPlayer;\n    });\n  }\n\n  getCellValue(row: number, col: number): string {\n    return this.board[row][col];\n  }\n\n  makeMove(row: number, col: number): void{\n   console.log(\n    'move'\n   );\n\n  }\n\n\n}\n","<h1>MESA</h1>\n\n<div class=\"row\">\n  <div class=\"col\">\n    <h2>{{ this.player.nombre }}</h2>\n  </div>\n  <div class=\"col\">\n    <h2>{{ this.opponent?.nombre }}</h2>\n  </div>\n</div>\n<table class=\"tablaTres m-5\">\n  <tr *ngFor=\"let row of [0, 1, 2]\">\n    <td *ngFor=\"let col of [0, 1, 2]\" (click)=\"makeMove(row, col)\">\n      {{ getCellValue(row, col)}}\n    </td>\n  </tr>\n</table>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}