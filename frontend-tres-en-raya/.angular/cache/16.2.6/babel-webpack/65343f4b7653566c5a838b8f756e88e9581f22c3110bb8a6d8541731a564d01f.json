{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nexport class ExpoDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.database = this.options.database;\n    // load sqlite package\n    this.sqlite = this.options.driver;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Closes connection with database.\n   */\n  disconnect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((ok, fail) => {\n        try {\n          _this.queryRunner = undefined;\n          _this.databaseConnection._db.close();\n          _this.databaseConnection = undefined;\n          ok();\n        } catch (error) {\n          fail(error);\n        }\n      });\n    })();\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this);\n    return this.queryRunner;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      try {\n        const databaseConnection = this.sqlite.openDatabase(this.options.database);\n        /*\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n        */\n        databaseConnection.transaction(tsx => {\n          tsx.executeSql(`PRAGMA foreign_keys = ON`, [], (t, result) => {\n            ok(databaseConnection);\n          }, (t, err) => {\n            fail({\n              transaction: t,\n              error: err\n            });\n          });\n        }, err => {\n          fail(err);\n        });\n      } catch (error) {\n        fail(error);\n      }\n    });\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","ExpoQueryRunner","ExpoDriver","constructor","connection","database","options","sqlite","driver","disconnect","_this","_asyncToGenerator","Promise","ok","fail","queryRunner","undefined","databaseConnection","_db","close","error","createQueryRunner","mode","createDatabaseConnection","openDatabase","transaction","tsx","executeSql","t","result","err"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/expo/ExpoDriver.js"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nexport class ExpoDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.database = this.options.database;\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection._db.close();\n                this.databaseConnection = undefined;\n                ok();\n            }\n            catch (error) {\n                fail(error);\n            }\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoQueryRunner(this);\n        return this.queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    createDatabaseConnection() {\n        return new Promise((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(this.options.database);\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction((tsx) => {\n                    tsx.executeSql(`PRAGMA foreign_keys = ON`, [], (t, result) => {\n                        ok(databaseConnection);\n                    }, (t, err) => {\n                        fail({ transaction: t, error: err });\n                    });\n                }, (err) => {\n                    fail(err);\n                });\n            }\n            catch (error) {\n                fail(error);\n            }\n        });\n    }\n}\n\n"],"mappings":";AAAA,SAASA,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,eAAe,QAAQ,mBAAmB;AACnD,OAAO,MAAMC,UAAU,SAASF,oBAAoB,CAAC;EACjD;EACA;EACA;EACAG,WAAWA,CAACC,UAAU,EAAE;IACpB,KAAK,CAACA,UAAU,CAAC;IACjB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACD,QAAQ;IACrC;IACA,IAAI,CAACE,MAAM,GAAG,IAAI,CAACD,OAAO,CAACE,MAAM;EACrC;EACA;EACA;EACA;EACA;AACJ;AACA;EACUC,UAAUA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACf,OAAO,IAAIC,OAAO,CAAC,CAACC,EAAE,EAAEC,IAAI,KAAK;QAC7B,IAAI;UACAJ,KAAI,CAACK,WAAW,GAAGC,SAAS;UAC5BN,KAAI,CAACO,kBAAkB,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;UACnCT,KAAI,CAACO,kBAAkB,GAAGD,SAAS;UACnCH,EAAE,CAAC,CAAC;QACR,CAAC,CACD,OAAOO,KAAK,EAAE;UACVN,IAAI,CAACM,KAAK,CAAC;QACf;MACJ,CAAC,CAAC;IAAC;EACP;EACA;AACJ;AACA;EACIC,iBAAiBA,CAACC,IAAI,EAAE;IACpB,IAAI,CAAC,IAAI,CAACP,WAAW,EACjB,IAAI,CAACA,WAAW,GAAG,IAAId,eAAe,CAAC,IAAI,CAAC;IAChD,OAAO,IAAI,CAACc,WAAW;EAC3B;EACA;EACA;EACA;EACA;AACJ;AACA;EACIQ,wBAAwBA,CAAA,EAAG;IACvB,OAAO,IAAIX,OAAO,CAAC,CAACC,EAAE,EAAEC,IAAI,KAAK;MAC7B,IAAI;QACA,MAAMG,kBAAkB,GAAG,IAAI,CAACV,MAAM,CAACiB,YAAY,CAAC,IAAI,CAAClB,OAAO,CAACD,QAAQ,CAAC;QAC1E;AAChB;AACA;AACA;QACgBY,kBAAkB,CAACQ,WAAW,CAAEC,GAAG,IAAK;UACpCA,GAAG,CAACC,UAAU,CAAE,0BAAyB,EAAE,EAAE,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAK;YAC1DhB,EAAE,CAACI,kBAAkB,CAAC;UAC1B,CAAC,EAAE,CAACW,CAAC,EAAEE,GAAG,KAAK;YACXhB,IAAI,CAAC;cAAEW,WAAW,EAAEG,CAAC;cAAER,KAAK,EAAEU;YAAI,CAAC,CAAC;UACxC,CAAC,CAAC;QACN,CAAC,EAAGA,GAAG,IAAK;UACRhB,IAAI,CAACgB,GAAG,CAAC;QACb,CAAC,CAAC;MACN,CAAC,CACD,OAAOV,KAAK,EAAE;QACVN,IAAI,CAACM,KAAK,CAAC;MACf;IACJ,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}