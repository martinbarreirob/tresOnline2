{"ast":null,"code":"import * as io from 'socket.io-client';\nimport { Observable } from 'rxjs'; // No olvides importar Observable\nimport * as i0 from \"@angular/core\";\nexport class SocketService {\n  constructor() {\n    this.socket = io.connect('http://192.168.0.42:3000'); // Asume que tu servidor backend corre en el puerto 3000\n  }\n  // Método para emitir eventos\n  emit(eventName, data) {\n    this.socket.emit(eventName, data);\n  }\n  // Método para escuchar eventos desde el servidor\n  listen(eventName) {\n    return new Observable(subscriber => {\n      this.socket.on(eventName, data => {\n        subscriber.next(data);\n      });\n    });\n  }\n  onPlayerDisconnected() {\n    return this.socket.fromEvent('player-disconnected');\n  }\n  static #_ = this.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["io","Observable","SocketService","constructor","socket","connect","emit","eventName","data","listen","subscriber","on","next","onPlayerDisconnected","fromEvent","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\socket.service.ts"],"sourcesContent":["//socket.service.ts\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport * as io from 'socket.io-client';\r\nimport { Observable } from 'rxjs';  // No olvides importar Observable\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SocketService {\r\n  private socket: any;\r\n\r\n  constructor() {\r\n    this.socket = io.connect('http://192.168.0.42:3000'); // Asume que tu servidor backend corre en el puerto 3000\r\n  }\r\n\r\n  // Método para emitir eventos\r\n  emit(eventName: string, data: any) {\r\n    this.socket.emit(eventName, data);\r\n  }\r\n\r\n  // Método para escuchar eventos desde el servidor\r\n  listen(eventName: string) {\r\n    return new Observable((subscriber) => {\r\n      this.socket.on(eventName, (data:any) => {\r\n        subscriber.next(data);\r\n      });\r\n    });\r\n  }\r\n\r\n  onPlayerDisconnected(): Observable<any> {\r\n    return this.socket.fromEvent('player-disconnected');\r\n  }\r\n\r\n\r\n\r\n}\r\n"],"mappings":"AAGA,OAAO,KAAKA,EAAE,MAAM,kBAAkB;AACtC,SAASC,UAAU,QAAQ,MAAM,CAAC,CAAE;;AAKpC,OAAM,MAAOC,aAAa;EAGxBC,YAAA;IACE,IAAI,CAACC,MAAM,GAAGJ,EAAE,CAACK,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC;EACxD;EAEA;EACAC,IAAIA,CAACC,SAAiB,EAAEC,IAAS;IAC/B,IAAI,CAACJ,MAAM,CAACE,IAAI,CAACC,SAAS,EAAEC,IAAI,CAAC;EACnC;EAEA;EACAC,MAAMA,CAACF,SAAiB;IACtB,OAAO,IAAIN,UAAU,CAAES,UAAU,IAAI;MACnC,IAAI,CAACN,MAAM,CAACO,EAAE,CAACJ,SAAS,EAAGC,IAAQ,IAAI;QACrCE,UAAU,CAACE,IAAI,CAACJ,IAAI,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAK,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACT,MAAM,CAACU,SAAS,CAAC,qBAAqB,CAAC;EACrD;EAAC,QAAAC,CAAA,G;qBAvBUb,aAAa;EAAA;EAAA,QAAAc,EAAA,G;WAAbd,aAAa;IAAAe,OAAA,EAAbf,aAAa,CAAAgB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}