{"ast":null,"code":"//game.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\nexport let GameComponent = class GameComponent {\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n    this.disconnectionSubscription = new Subscription();\n    this.baseUrl = 'http://192.168.0.42:3000/';\n    this.board = [['', '', ''], ['', '', ''], ['', '', '']];\n    this.gameOver = false;\n    this.winner = null;\n    this.playerReadyRestart = false;\n    this.opponentReadyRestart = false;\n    this.opponentDisconnected = false;\n  }\n  ngOnInit() {\n    let playerLocalStorage = localStorage.getItem('player');\n    if (playerLocalStorage) {\n      this.player = JSON.parse(playerLocalStorage);\n    }\n    // Carga el juego en funcion del usuario que se acaba de registrar con el local storage\n    this.http.get(`${this.baseUrl}game/playerGame/${this.player.id}`).subscribe(game => {\n      this.game = game;\n      this.board = JSON.parse(game.board);\n      //Comprobar si Somos X o O\n      if (this.game.playerXid === this.player.id) {\n        this.currentPlayer = 'X';\n      } else if (this.game.playerOid === this.player.id) {\n        this.currentPlayer = 'O';\n        this.http.get(`${this.baseUrl}player/${this.game.playerXid}`).subscribe(playerX => {\n          this.opponent = playerX;\n        });\n      }\n    });\n    this.setupSocketListeners();\n  }\n  ngOnDestroy() {\n    this.disconnectionSubscription.unsubscribe();\n  }\n  setupSocketListeners() {\n    this.socketService.listen('player-connected').subscribe(newPlayer => {\n      this.opponent = newPlayer;\n    });\n    this.socketService.listen('winner-updated').subscribe(game => {\n      this.game = game;\n      this.game.turn = null;\n    });\n    this.socketService.listen('game-updated').subscribe(game => {\n      this.game = game;\n      this.board = JSON.parse(this.game.board);\n      this.winner = this.checkWinner();\n      //Con esta condición solo lanzo el update winner en el cliente que gana y este emite un evento para que se lance en el otro usuario\n      if (this.winner === 'X' && this.game.playerXid === this.player.id) {\n        this.updateWinner(this.winner);\n      } else if (this.winner === 'O' && this.game.playerOid === this.player.id) {\n        this.updateWinner(this.winner);\n      }\n    });\n    this.socketService.listen('restart-game').subscribe(game => {\n      this.opponentReadyRestart = true;\n      if (this.opponentReadyRestart && this.playerReadyRestart === true) {\n        this.restartGame();\n        this.socketService.emit('restart-game', this.player);\n      }\n    });\n    this.socketService.listen('player-disconnected').subscribe(game => {\n      this.opponentDisconnected = true;\n    });\n  }\n  makeMove(row, col) {\n    //Compruebo si hay oponente\n    if (!this.opponent) {\n      return;\n    }\n    //Compruebo si el juego está terminado\n    if (this.gameOver) {\n      return;\n    }\n    //Compruebo si la celda está vacia\n    if (this.board[row][col] !== '') {\n      return;\n    }\n    //Compruebo si es mi turno sindo X\n    if (this.game.turn === 'O' && this.game.playerXid === this.player.id) {\n      return;\n    }\n    //Compruebo si es mi turno sindo O\n    if (this.game.turn === 'X' && this.game.playerOid === this.player.id) {\n      return;\n    }\n    if (this.game.turn === 'X' && this.game.playerXid === this.player.id) {\n      this.board[row][col] = 'X';\n    } else if (this.game.turn === 'O' && this.game.playerOid === this.player.id) {\n      this.board[row][col] = 'O';\n    }\n    //Actualización del tablero\n    let boardString = JSON.stringify(this.board);\n    let nextTurn = this.game.turn === 'X' ? 'O' : 'X';\n    this.updateBoard(boardString, nextTurn);\n  }\n  checkWinner() {\n    // Comprobar filas, columnas y diagonales\n    const winningCombinations = [\n    // Filas\n    [this.board[0][0], this.board[0][1], this.board[0][2]], [this.board[1][0], this.board[1][1], this.board[1][2]], [this.board[2][0], this.board[2][1], this.board[2][2]],\n    // Columnas\n    [this.board[0][0], this.board[1][0], this.board[2][0]], [this.board[0][1], this.board[1][1], this.board[2][1]], [this.board[0][2], this.board[1][2], this.board[2][2]],\n    // Diagonales\n    [this.board[0][0], this.board[1][1], this.board[2][2]], [this.board[0][2], this.board[1][1], this.board[2][0]]];\n    for (let combination of winningCombinations) {\n      if (combination[0] && combination[0] === combination[1] && combination[1] === combination[2]) {\n        this.gameOver = true;\n        return combination[0];\n      }\n    }\n    // Comprobar empate\n    const isDraw = this.board.flat().every(cell => cell !== '');\n    if (isDraw) {\n      this.gameOver = true;\n    }\n    return null;\n  }\n  updateWinner(winner) {\n    let gameData;\n    if (winner === 'X') {\n      gameData = {\n        winX: ++this.game.winX\n      };\n    } else if (winner === 'O') {\n      gameData = {\n        winO: ++this.game.winO\n      };\n    }\n    this.http.put(`${this.baseUrl}game/${this.game.id}`, gameData).subscribe(game => {\n      this.socketService.emit('winner-updated', game);\n    });\n  }\n  updateBoard(board, turn) {\n    const gameData = {\n      board: board,\n      turn: turn\n    };\n    this.http.put(`${this.baseUrl}game/${this.game.id}`, gameData).subscribe(updateGame => {\n      this.socketService.emit(\"game-updated\", updateGame);\n    }, error => {\n      console.error('Error al actualizar el juego:', error);\n    });\n  }\n  emitRestartGame() {\n    this.playerReadyRestart = true;\n    this.socketService.emit('restart-game', this.player);\n  }\n  restartGame() {\n    let tableroLimpio = [['', '', ''], ['', '', ''], ['', '', '']];\n    let turno = Math.random() < 0.5 ? 'X' : 'O';\n    this.gameOver = false;\n    this.winner = null;\n    this.playerReadyRestart = false;\n    this.opponentReadyRestart = false;\n    this.updateBoard(JSON.stringify(tableroLimpio), turno);\n  }\n  reloadPage() {\n    window.location.reload();\n  }\n};\nGameComponent = __decorate([Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})], GameComponent);","map":{"version":3,"names":["Component","Subscription","GameComponent","constructor","http","socketService","disconnectionSubscription","baseUrl","board","gameOver","winner","playerReadyRestart","opponentReadyRestart","opponentDisconnected","ngOnInit","playerLocalStorage","localStorage","getItem","player","JSON","parse","get","id","subscribe","game","playerXid","currentPlayer","playerOid","playerX","opponent","setupSocketListeners","ngOnDestroy","unsubscribe","listen","newPlayer","turn","checkWinner","updateWinner","restartGame","emit","makeMove","row","col","boardString","stringify","nextTurn","updateBoard","winningCombinations","combination","isDraw","flat","every","cell","gameData","winX","winO","put","updateGame","error","console","emitRestartGame","tableroLimpio","turno","Math","random","reloadPage","window","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\game\\game.component.ts"],"sourcesContent":["//game.component.ts\r\n\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { SocketService } from '../socket.service'; // Asegúrate de importar tu servicio\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Player, Game } from '../models/interfaces.model';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-game',\r\n  templateUrl: './game.component.html',\r\n  styleUrls: ['./game.component.css']\r\n})\r\nexport class GameComponent implements OnInit, OnDestroy {\r\n  private disconnectionSubscription: Subscription= new Subscription();\r\n  private baseUrl: string = 'http://192.168.0.42:3000/';\r\n\r\n  board: string[][] = [\r\n    ['', '', ''],\r\n    ['', '', ''],\r\n    ['', '', '']\r\n  ];\r\n  player: any;\r\n  game: any;\r\n  opponent: any;\r\n  currentPlayer: any;\r\n  gameOver: boolean = false;\r\n  winner: string | null = null;\r\n  playerReadyRestart: boolean = false;\r\n  opponentReadyRestart: boolean = false;\r\n  opponentDisconnected: boolean = false;\r\n\r\n\r\n  constructor (private http: HttpClient, private socketService: SocketService){}\r\n\r\n  ngOnInit(): void{\r\n    let playerLocalStorage = localStorage.getItem('player');\r\n    if(playerLocalStorage){\r\n      this.player = JSON.parse(playerLocalStorage);\r\n    }\r\n\r\n    // Carga el juego en funcion del usuario que se acaba de registrar con el local storage\r\n    this.http.get<Game>(`${this.baseUrl}game/playerGame/${this.player.id}`).subscribe((game)=>{\r\n      this.game = game;\r\n      this.board = JSON.parse(game.board);\r\n\r\n      //Comprobar si Somos X o O\r\n      if (this.game.playerXid === this.player.id) {\r\n        this.currentPlayer = 'X';\r\n\r\n      } else if (this.game.playerOid === this.player.id) {\r\n        this.currentPlayer = 'O';\r\n\r\n        this.http.get<Player>(`${this.baseUrl}player/${this.game.playerXid}`).subscribe((playerX) => {\r\n          this.opponent = playerX;\r\n       });\r\n      }\r\n    });\r\n\r\n    this.setupSocketListeners();\r\n  }\r\n\r\n  ngOnDestroy(): void{\r\n    this.disconnectionSubscription.unsubscribe();\r\n  }\r\n\r\n  private setupSocketListeners(): void {\r\n    this.socketService.listen('player-connected').subscribe(newPlayer => {\r\n      this.opponent = newPlayer;\r\n    });\r\n\r\n    this.socketService.listen('winner-updated').subscribe(game => {\r\n      this.game = game;\r\n      this.game.turn = null;\r\n    });\r\n\r\n    this.socketService.listen('game-updated').subscribe(game => {\r\n      this.game = game;\r\n      this.board = JSON.parse(this.game.board);\r\n      this.winner = this.checkWinner();\r\n\r\n      //Con esta condición solo lanzo el update winner en el cliente que gana y este emite un evento para que se lance en el otro usuario\r\n      if( this.winner === 'X' && this.game.playerXid === this.player.id ){\r\n        this.updateWinner(this.winner);\r\n\r\n      }else if(this.winner === 'O' && this.game.playerOid === this.player.id ){\r\n        this.updateWinner(this.winner);\r\n\r\n      }\r\n    });\r\n\r\n    this.socketService.listen('restart-game').subscribe(game => {\r\n      this.opponentReadyRestart = true;\r\n\r\n      if(this.opponentReadyRestart && this.playerReadyRestart === true){\r\n        this.restartGame();\r\n        this.socketService.emit('restart-game', this.player);\r\n      }\r\n    });\r\n\r\n    this.socketService.listen('player-disconnected').subscribe(game => {\r\n      this.opponentDisconnected = true;\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  makeMove(row: number, col: number): void {\r\n    //Compruebo si hay oponente\r\n    if (!this.opponent) {\r\n        return;\r\n    }\r\n\r\n    //Compruebo si el juego está terminado\r\n    if (this.gameOver) {\r\n      return;\r\n    }\r\n\r\n    //Compruebo si la celda está vacia\r\n    if (this.board[row][col] !== '') {\r\n        return;\r\n    }\r\n\r\n    //Compruebo si es mi turno sindo X\r\n    if (this.game.turn === 'O' && this.game.playerXid === this.player.id) {\r\n      return;\r\n    }\r\n\r\n    //Compruebo si es mi turno sindo O\r\n    if (this.game.turn === 'X' && this.game.playerOid === this.player.id) {\r\n      return;\r\n    }\r\n\r\n    if (this.game.turn === 'X' && this.game.playerXid === this.player.id) {\r\n        this.board[row][col] = 'X';\r\n    }\r\n    else if (this.game.turn === 'O' && this.game.playerOid === this.player.id) {\r\n        this.board[row][col] = 'O';\r\n    }\r\n\r\n    //Actualización del tablero\r\n    let boardString = JSON.stringify(this.board);\r\n    let nextTurn = this.game.turn === 'X' ? 'O' : 'X';\r\n    this.updateBoard(boardString, nextTurn);\r\n  }\r\n\r\n  checkWinner(): string | null {  //PROBANDO TODAVÍA FALTA AÑADIR FUNCION UPDATEWINNER\r\n    // Comprobar filas, columnas y diagonales\r\n    const winningCombinations = [\r\n        // Filas\r\n        [this.board[0][0], this.board[0][1], this.board[0][2]],\r\n        [this.board[1][0], this.board[1][1], this.board[1][2]],\r\n        [this.board[2][0], this.board[2][1], this.board[2][2]],\r\n        // Columnas\r\n        [this.board[0][0], this.board[1][0], this.board[2][0]],\r\n        [this.board[0][1], this.board[1][1], this.board[2][1]],\r\n        [this.board[0][2], this.board[1][2], this.board[2][2]],\r\n        // Diagonales\r\n        [this.board[0][0], this.board[1][1], this.board[2][2]],\r\n        [this.board[0][2], this.board[1][1], this.board[2][0]]\r\n    ];\r\n\r\n    for (let combination of winningCombinations) {\r\n      if (combination[0] && combination[0] === combination[1] && combination[1] === combination[2]) {\r\n          this.gameOver = true;\r\n          return combination[0]\r\n      }\r\n    }\r\n\r\n    // Comprobar empate\r\n    const isDraw = this.board.flat().every(cell => cell !== '');\r\n    if (isDraw) {\r\n        this.gameOver = true;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  updateWinner(winner: string) {\r\n    let gameData: any;\r\n\r\n    if(winner === 'X'){\r\n      gameData = {\r\n        winX: ++this.game.winX\r\n      }\r\n    }else if(winner === 'O'){\r\n      gameData = {\r\n        winO: ++this.game.winO\r\n      }\r\n    }\r\n\r\n    this.http.put<Game>(`${this.baseUrl}game/${this.game.id}`, gameData).subscribe((game)=>{\r\n      this.socketService.emit('winner-updated', game);\r\n    });\r\n  }\r\n\r\n  updateBoard(board: string, turn: string) {\r\n    const gameData = {\r\n        board: board,\r\n        turn: turn,\r\n    }\r\n\r\n    this.http.put<Game>(`${this.baseUrl}game/${this.game.id}`, gameData).subscribe(\r\n        updateGame => {\r\n            this.socketService.emit(\"game-updated\", updateGame);\r\n        },\r\n        error => {\r\n            console.error('Error al actualizar el juego:', error);\r\n        }\r\n    );\r\n  }\r\n\r\n  emitRestartGame(){\r\n    this.playerReadyRestart = true;\r\n    this.socketService.emit('restart-game', this.player)\r\n  }\r\n\r\n\r\n  restartGame(){\r\n    let tableroLimpio = [\r\n      ['', '', ''],\r\n      ['', '', ''],\r\n      ['', '', '']\r\n    ];\r\n    let turno = Math.random() < 0.5 ? 'X' : 'O';\r\n\r\n    this.gameOver = false;\r\n    this.winner = null;\r\n    this.playerReadyRestart = false;\r\n    this.opponentReadyRestart = false;\r\n\r\n    this.updateBoard(JSON.stringify(tableroLimpio), turno);\r\n  }\r\n\r\n  reloadPage(): void {\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}