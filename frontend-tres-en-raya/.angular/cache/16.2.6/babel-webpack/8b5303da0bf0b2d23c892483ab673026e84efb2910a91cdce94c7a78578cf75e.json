{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nexport class CordovaDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.transactionSupport = \"none\";\n    // this.connection = connection;\n    // this.options = connection.options as CordovaConnectionOptions;\n    this.database = this.options.database;\n    // load sqlite package\n    this.loadDependencies();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Closes connection with database.\n   */\n  disconnect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.queryRunner = undefined;\n      return new Promise((ok, fail) => {\n        _this.databaseConnection.close(ok, fail);\n      });\n    })();\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this);\n    return this.queryRunner;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   */\n  createDatabaseConnection() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const options = Object.assign({}, {\n        name: _this2.options.database,\n        location: _this2.options.location\n      }, _this2.options.extra || {});\n      const connection = yield new Promise(resolve => {\n        _this2.sqlite.openDatabase(options, db => resolve(db));\n      });\n      yield new Promise((ok, fail) => {\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        connection.executeSql(`PRAGMA foreign_keys = ON`, [], () => ok(), err => fail(err));\n      });\n      return connection;\n    })();\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    try {\n      const sqlite = this.options.driver || window.sqlitePlugin;\n      this.sqlite = sqlite;\n    } catch (e) {\n      throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","CordovaQueryRunner","DriverPackageNotInstalledError","CordovaDriver","constructor","connection","transactionSupport","database","options","loadDependencies","disconnect","_this","_asyncToGenerator","queryRunner","undefined","Promise","ok","fail","databaseConnection","close","createQueryRunner","mode","createDatabaseConnection","_this2","Object","assign","name","location","extra","resolve","sqlite","openDatabase","db","executeSql","err","driver","window","sqlitePlugin","e"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/cordova/CordovaDriver.js"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nexport class CordovaDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        this.transactionSupport = \"none\";\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database;\n        // load sqlite package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        this.queryRunner = undefined;\n        return new Promise((ok, fail) => {\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new CordovaQueryRunner(this);\n        return this.queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    async createDatabaseConnection() {\n        const options = Object.assign({}, {\n            name: this.options.database,\n            location: this.options.location,\n        }, this.options.extra || {});\n        const connection = await new Promise((resolve) => {\n            this.sqlite.openDatabase(options, (db) => resolve(db));\n        });\n        await new Promise((ok, fail) => {\n            // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n            connection.executeSql(`PRAGMA foreign_keys = ON`, [], () => ok(), (err) => fail(err));\n        });\n        return connection;\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        try {\n            const sqlite = this.options.driver || window.sqlitePlugin;\n            this.sqlite = sqlite;\n        }\n        catch (e) {\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n        }\n    }\n}\n\n"],"mappings":";AAAA,SAASA,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,8BAA8B,QAAQ,4CAA4C;AAC3F,OAAO,MAAMC,aAAa,SAASH,oBAAoB,CAAC;EACpD;EACA;EACA;EACAI,WAAWA,CAACC,UAAU,EAAE;IACpB,KAAK,CAACA,UAAU,CAAC;IACjB,IAAI,CAACC,kBAAkB,GAAG,MAAM;IAChC;IACA;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACD,QAAQ;IACrC;IACA,IAAI,CAACE,gBAAgB,CAAC,CAAC;EAC3B;EACA;EACA;EACA;EACA;AACJ;AACA;EACUC,UAAUA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACfD,KAAI,CAACE,WAAW,GAAGC,SAAS;MAC5B,OAAO,IAAIC,OAAO,CAAC,CAACC,EAAE,EAAEC,IAAI,KAAK;QAC7BN,KAAI,CAACO,kBAAkB,CAACC,KAAK,CAACH,EAAE,EAAEC,IAAI,CAAC;MAC3C,CAAC,CAAC;IAAC;EACP;EACA;AACJ;AACA;EACIG,iBAAiBA,CAACC,IAAI,EAAE;IACpB,IAAI,CAAC,IAAI,CAACR,WAAW,EACjB,IAAI,CAACA,WAAW,GAAG,IAAIZ,kBAAkB,CAAC,IAAI,CAAC;IACnD,OAAO,IAAI,CAACY,WAAW;EAC3B;EACA;EACA;EACA;EACA;AACJ;AACA;EACUS,wBAAwBA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAX,iBAAA;MAC7B,MAAMJ,OAAO,GAAGgB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;QAC9BC,IAAI,EAAEH,MAAI,CAACf,OAAO,CAACD,QAAQ;QAC3BoB,QAAQ,EAAEJ,MAAI,CAACf,OAAO,CAACmB;MAC3B,CAAC,EAAEJ,MAAI,CAACf,OAAO,CAACoB,KAAK,IAAI,CAAC,CAAC,CAAC;MAC5B,MAAMvB,UAAU,SAAS,IAAIU,OAAO,CAAEc,OAAO,IAAK;QAC9CN,MAAI,CAACO,MAAM,CAACC,YAAY,CAACvB,OAAO,EAAGwB,EAAE,IAAKH,OAAO,CAACG,EAAE,CAAC,CAAC;MAC1D,CAAC,CAAC;MACF,MAAM,IAAIjB,OAAO,CAAC,CAACC,EAAE,EAAEC,IAAI,KAAK;QAC5B;QACA;QACAZ,UAAU,CAAC4B,UAAU,CAAE,0BAAyB,EAAE,EAAE,EAAE,MAAMjB,EAAE,CAAC,CAAC,EAAGkB,GAAG,IAAKjB,IAAI,CAACiB,GAAG,CAAC,CAAC;MACzF,CAAC,CAAC;MACF,OAAO7B,UAAU;IAAC;EACtB;EACA;AACJ;AACA;EACII,gBAAgBA,CAAA,EAAG;IACf,IAAI;MACA,MAAMqB,MAAM,GAAG,IAAI,CAACtB,OAAO,CAAC2B,MAAM,IAAIC,MAAM,CAACC,YAAY;MACzD,IAAI,CAACP,MAAM,GAAGA,MAAM;IACxB,CAAC,CACD,OAAOQ,CAAC,EAAE;MACN,MAAM,IAAIpC,8BAA8B,CAAC,gBAAgB,EAAE,wBAAwB,CAAC;IACxF;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}