{"ast":null,"code":"import { hash, shorten } from \"../util/StringUtils\";\nimport { VersionUtils } from \"../util/VersionUtils\";\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Returns true if given driver is SQLite-based driver.\n   */\n  static isSQLiteFamily(driver) {\n    return [\"sqlite\", \"cordova\", \"react-native\", \"nativescript\", \"sqljs\", \"expo\", \"better-sqlite3\", \"capacitor\"].includes(driver.options.type);\n  }\n  /**\n   * Returns true if given driver is MySQL-based driver.\n   */\n  static isMySQLFamily(driver) {\n    return [\"mysql\", \"mariadb\"].includes(driver.options.type);\n  }\n  static isReleaseVersionOrGreater(driver, version) {\n    return driver.version != null && VersionUtils.isGreaterOrEqual(driver.version, version);\n  }\n  static isPostgresFamily(driver) {\n    return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(driver.options.type);\n  }\n  /**\n   * Normalizes and builds a new driver options.\n   * Extracts settings from connection url and sets to a new options object.\n   */\n  static buildDriverOptions(options, buildOptions) {\n    if (options.url) {\n      const urlDriverOptions = this.parseConnectionUrl(options.url);\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n      for (const key of Object.keys(urlDriverOptions)) {\n        if (typeof urlDriverOptions[key] === \"undefined\") {\n          delete urlDriverOptions[key];\n        }\n      }\n      return Object.assign({}, options, urlDriverOptions);\n    }\n    return Object.assign({}, options);\n  }\n  /**\n   * buildDriverOptions for MongodDB only to support replica set\n   */\n  static buildMongoDBDriverOptions(options, buildOptions) {\n    if (options.url) {\n      const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n      for (const key of Object.keys(urlDriverOptions)) {\n        if (typeof urlDriverOptions[key] === \"undefined\") {\n          delete urlDriverOptions[key];\n        }\n      }\n      return Object.assign({}, options, urlDriverOptions);\n    }\n    return Object.assign({}, options);\n  }\n  /**\n   * Joins and shortens alias if needed.\n   *\n   * If the alias length is greater than the limit allowed by the current\n   * driver, replaces it with a shortend string, if the shortend string\n   * is still too long, it will then hash the alias.\n   *\n   * @param driver Current `Driver`.\n   * @param buildOptions Optional settings.\n   * @param alias Alias parts.\n   *\n   * @return An alias that is no longer than the divers max alias length.\n   */\n  static buildAlias({\n    maxAliasLength\n  }, buildOptions, ...alias) {\n    const newAlias = alias.length === 1 ? alias[0] : alias.join(buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\");\n    if (maxAliasLength && maxAliasLength > 0 && newAlias.length > maxAliasLength) {\n      if (buildOptions && buildOptions.shorten === true) {\n        const shortenedAlias = shorten(newAlias);\n        if (shortenedAlias.length < maxAliasLength) {\n          return shortenedAlias;\n        }\n      }\n      return hash(newAlias, {\n        length: maxAliasLength\n      });\n    }\n    return newAlias;\n  }\n  /**\n   * @deprecated use `buildAlias` instead.\n   */\n  static buildColumnAlias({\n    maxAliasLength\n  }, buildOptions, ...alias) {\n    if (typeof buildOptions === \"string\") {\n      alias.unshift(buildOptions);\n      buildOptions = {\n        shorten: false,\n        joiner: \"_\"\n      };\n    } else {\n      buildOptions = Object.assign({\n        shorten: false,\n        joiner: \"_\"\n      }, buildOptions);\n    }\n    return this.buildAlias({\n      maxAliasLength\n    }, buildOptions, ...alias);\n  }\n  // -------------------------------------------------------------------------\n  // Private Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Extracts connection data from the connection url.\n   */\n  static parseConnectionUrl(url) {\n    const type = url.split(\":\")[0];\n    const firstSlashes = url.indexOf(\"//\");\n    const preBase = url.substr(firstSlashes + 2);\n    const secondSlash = preBase.indexOf(\"/\");\n    const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n    // remove mongodb query params\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n    const lastAtSign = base.lastIndexOf(\"@\");\n    const usernameAndPassword = base.substr(0, lastAtSign);\n    const hostAndPort = base.substr(lastAtSign + 1);\n    let username = usernameAndPassword;\n    let password = \"\";\n    const firstColon = usernameAndPassword.indexOf(\":\");\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    }\n    const [host, port] = hostAndPort.split(\":\");\n    return {\n      type: type,\n      host: host,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n  }\n  /**\n   * Extracts connection data from the connection url for MongoDB to support replica set.\n   */\n  static parseMongoDBConnectionUrl(url) {\n    const type = url.split(\":\")[0];\n    const firstSlashes = url.indexOf(\"//\");\n    const preBase = url.substr(firstSlashes + 2);\n    const secondSlash = preBase.indexOf(\"/\");\n    const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n    let afterQuestionMark = \"\";\n    let host = undefined;\n    let port = undefined;\n    let hostReplicaSet = undefined;\n    let replicaSet = undefined;\n    let optionsObject = {};\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      // split params\n      afterQuestionMark = afterBase.substr(afterBase.indexOf(\"?\") + 1, afterBase.length);\n      const optionsList = afterQuestionMark.split(\"&\");\n      let optionKey;\n      let optionValue;\n      // create optionsObject for merge with connectionUrl object before return\n      optionsList.forEach(optionItem => {\n        optionKey = optionItem.split(\"=\")[0];\n        optionValue = optionItem.split(\"=\")[1];\n        optionsObject[optionKey] = optionValue;\n      });\n      // specific replicaSet value to set options about hostReplicaSet\n      replicaSet = optionsObject[\"replicaSet\"];\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n    const lastAtSign = base.lastIndexOf(\"@\");\n    const usernameAndPassword = base.substr(0, lastAtSign);\n    const hostAndPort = base.substr(lastAtSign + 1);\n    let username = usernameAndPassword;\n    let password = \"\";\n    const firstColon = usernameAndPassword.indexOf(\":\");\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    }\n    // If replicaSet have value set It as hostlist, If not set like standalone host\n    if (replicaSet) {\n      hostReplicaSet = hostAndPort;\n    } else {\n      ;\n      [host, port] = hostAndPort.split(\":\");\n    }\n    let connectionUrl = {\n      type: type,\n      host: host,\n      hostReplicaSet: hostReplicaSet,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n    // Loop to set every options in connectionUrl to object\n    for (const [key, value] of Object.entries(optionsObject)) {\n      connectionUrl[key] = value;\n    }\n    return connectionUrl;\n  }\n}","map":{"version":3,"names":["hash","shorten","VersionUtils","DriverUtils","isSQLiteFamily","driver","includes","options","type","isMySQLFamily","isReleaseVersionOrGreater","version","isGreaterOrEqual","isPostgresFamily","buildDriverOptions","buildOptions","url","urlDriverOptions","parseConnectionUrl","useSid","database","sid","key","Object","keys","assign","buildMongoDBDriverOptions","parseMongoDBConnectionUrl","buildAlias","maxAliasLength","alias","newAlias","length","join","joiner","shortenedAlias","buildColumnAlias","unshift","split","firstSlashes","indexOf","preBase","substr","secondSlash","base","afterBase","undefined","lastAtSign","lastIndexOf","usernameAndPassword","hostAndPort","username","password","firstColon","host","port","decodeURIComponent","parseInt","afterQuestionMark","hostReplicaSet","replicaSet","optionsObject","optionsList","optionKey","optionValue","forEach","optionItem","connectionUrl","value","entries"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/DriverUtils.js"],"sourcesContent":["import { hash, shorten } from \"../util/StringUtils\";\nimport { VersionUtils } from \"../util/VersionUtils\";\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver) {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type);\n    }\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver) {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type);\n    }\n    static isReleaseVersionOrGreater(driver, version) {\n        return (driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version));\n    }\n    static isPostgresFamily(driver) {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(driver.options.type);\n    }\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options, buildOptions) {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url);\n            if (buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(options, buildOptions) {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);\n            if (buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias({ maxAliasLength }, buildOptions, ...alias) {\n        const newAlias = alias.length === 1\n            ? alias[0]\n            : alias.join(buildOptions && buildOptions.joiner\n                ? buildOptions.joiner\n                : \"_\");\n        if (maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias);\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias;\n                }\n            }\n            return hash(newAlias, { length: maxAliasLength });\n        }\n        return newAlias;\n    }\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias({ maxAliasLength }, buildOptions, ...alias) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions);\n            buildOptions = { shorten: false, joiner: \"_\" };\n        }\n        else {\n            buildOptions = Object.assign({ shorten: false, joiner: \"_\" }, buildOptions);\n        }\n        return this.buildAlias({ maxAliasLength }, buildOptions, ...alias);\n    }\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Extracts connection data from the connection url.\n     */\n    static parseConnectionUrl(url) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        };\n    }\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    static parseMongoDBConnectionUrl(url) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n        let afterQuestionMark = \"\";\n        let host = undefined;\n        let port = undefined;\n        let hostReplicaSet = undefined;\n        let replicaSet = undefined;\n        let optionsObject = {};\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(afterBase.indexOf(\"?\") + 1, afterBase.length);\n            const optionsList = afterQuestionMark.split(\"&\");\n            let optionKey;\n            let optionValue;\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0];\n                optionValue = optionItem.split(\"=\")[1];\n                optionsObject[optionKey] = optionValue;\n            });\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"];\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort;\n        }\n        else {\n            ;\n            [host, port] = hostAndPort.split(\":\");\n        }\n        let connectionUrl = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        };\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value;\n        }\n        return connectionUrl;\n    }\n}\n\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,OAAO,QAAQ,qBAAqB;AACnD,SAASC,YAAY,QAAQ,sBAAsB;AACnD;AACA;AACA;AACA,OAAO,MAAMC,WAAW,CAAC;EACrB;EACA;EACA;EACA;AACJ;AACA;EACI,OAAOC,cAAcA,CAACC,MAAM,EAAE;IAC1B,OAAO,CACH,QAAQ,EACR,SAAS,EACT,cAAc,EACd,cAAc,EACd,OAAO,EACP,MAAM,EACN,gBAAgB,EAChB,WAAW,CACd,CAACC,QAAQ,CAACD,MAAM,CAACE,OAAO,CAACC,IAAI,CAAC;EACnC;EACA;AACJ;AACA;EACI,OAAOC,aAAaA,CAACJ,MAAM,EAAE;IACzB,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACD,MAAM,CAACE,OAAO,CAACC,IAAI,CAAC;EAC7D;EACA,OAAOE,yBAAyBA,CAACL,MAAM,EAAEM,OAAO,EAAE;IAC9C,OAAQN,MAAM,CAACM,OAAO,IAAI,IAAI,IAC1BT,YAAY,CAACU,gBAAgB,CAACP,MAAM,CAACM,OAAO,EAAEA,OAAO,CAAC;EAC9D;EACA,OAAOE,gBAAgBA,CAACR,MAAM,EAAE;IAC5B,OAAO,CAAC,UAAU,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAACC,QAAQ,CAACD,MAAM,CAACE,OAAO,CAACC,IAAI,CAAC;EACvF;EACA;AACJ;AACA;AACA;EACI,OAAOM,kBAAkBA,CAACP,OAAO,EAAEQ,YAAY,EAAE;IAC7C,IAAIR,OAAO,CAACS,GAAG,EAAE;MACb,MAAMC,gBAAgB,GAAG,IAAI,CAACC,kBAAkB,CAACX,OAAO,CAACS,GAAG,CAAC;MAC7D,IAAID,YAAY,IACZA,YAAY,CAACI,MAAM,IACnBF,gBAAgB,CAACG,QAAQ,EAAE;QAC3BH,gBAAgB,CAACI,GAAG,GAAGJ,gBAAgB,CAACG,QAAQ;MACpD;MACA,KAAK,MAAME,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACP,gBAAgB,CAAC,EAAE;QAC7C,IAAI,OAAOA,gBAAgB,CAACK,GAAG,CAAC,KAAK,WAAW,EAAE;UAC9C,OAAOL,gBAAgB,CAACK,GAAG,CAAC;QAChC;MACJ;MACA,OAAOC,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAElB,OAAO,EAAEU,gBAAgB,CAAC;IACvD;IACA,OAAOM,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAElB,OAAO,CAAC;EACrC;EACA;AACJ;AACA;EACI,OAAOmB,yBAAyBA,CAACnB,OAAO,EAAEQ,YAAY,EAAE;IACpD,IAAIR,OAAO,CAACS,GAAG,EAAE;MACb,MAAMC,gBAAgB,GAAG,IAAI,CAACU,yBAAyB,CAACpB,OAAO,CAACS,GAAG,CAAC;MACpE,IAAID,YAAY,IACZA,YAAY,CAACI,MAAM,IACnBF,gBAAgB,CAACG,QAAQ,EAAE;QAC3BH,gBAAgB,CAACI,GAAG,GAAGJ,gBAAgB,CAACG,QAAQ;MACpD;MACA,KAAK,MAAME,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACP,gBAAgB,CAAC,EAAE;QAC7C,IAAI,OAAOA,gBAAgB,CAACK,GAAG,CAAC,KAAK,WAAW,EAAE;UAC9C,OAAOL,gBAAgB,CAACK,GAAG,CAAC;QAChC;MACJ;MACA,OAAOC,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAElB,OAAO,EAAEU,gBAAgB,CAAC;IACvD;IACA,OAAOM,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAElB,OAAO,CAAC;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOqB,UAAUA,CAAC;IAAEC;EAAe,CAAC,EAAEd,YAAY,EAAE,GAAGe,KAAK,EAAE;IAC1D,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,KAAK,CAAC,GAC7BF,KAAK,CAAC,CAAC,CAAC,GACRA,KAAK,CAACG,IAAI,CAAClB,YAAY,IAAIA,YAAY,CAACmB,MAAM,GAC1CnB,YAAY,CAACmB,MAAM,GACnB,GAAG,CAAC;IACd,IAAIL,cAAc,IACdA,cAAc,GAAG,CAAC,IAClBE,QAAQ,CAACC,MAAM,GAAGH,cAAc,EAAE;MAClC,IAAId,YAAY,IAAIA,YAAY,CAACd,OAAO,KAAK,IAAI,EAAE;QAC/C,MAAMkC,cAAc,GAAGlC,OAAO,CAAC8B,QAAQ,CAAC;QACxC,IAAII,cAAc,CAACH,MAAM,GAAGH,cAAc,EAAE;UACxC,OAAOM,cAAc;QACzB;MACJ;MACA,OAAOnC,IAAI,CAAC+B,QAAQ,EAAE;QAAEC,MAAM,EAAEH;MAAe,CAAC,CAAC;IACrD;IACA,OAAOE,QAAQ;EACnB;EACA;AACJ;AACA;EACI,OAAOK,gBAAgBA,CAAC;IAAEP;EAAe,CAAC,EAAEd,YAAY,EAAE,GAAGe,KAAK,EAAE;IAChE,IAAI,OAAOf,YAAY,KAAK,QAAQ,EAAE;MAClCe,KAAK,CAACO,OAAO,CAACtB,YAAY,CAAC;MAC3BA,YAAY,GAAG;QAAEd,OAAO,EAAE,KAAK;QAAEiC,MAAM,EAAE;MAAI,CAAC;IAClD,CAAC,MACI;MACDnB,YAAY,GAAGQ,MAAM,CAACE,MAAM,CAAC;QAAExB,OAAO,EAAE,KAAK;QAAEiC,MAAM,EAAE;MAAI,CAAC,EAAEnB,YAAY,CAAC;IAC/E;IACA,OAAO,IAAI,CAACa,UAAU,CAAC;MAAEC;IAAe,CAAC,EAAEd,YAAY,EAAE,GAAGe,KAAK,CAAC;EACtE;EACA;EACA;EACA;EACA;AACJ;AACA;EACI,OAAOZ,kBAAkBA,CAACF,GAAG,EAAE;IAC3B,MAAMR,IAAI,GAAGQ,GAAG,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAMC,YAAY,GAAGvB,GAAG,CAACwB,OAAO,CAAC,IAAI,CAAC;IACtC,MAAMC,OAAO,GAAGzB,GAAG,CAAC0B,MAAM,CAACH,YAAY,GAAG,CAAC,CAAC;IAC5C,MAAMI,WAAW,GAAGF,OAAO,CAACD,OAAO,CAAC,GAAG,CAAC;IACxC,MAAMI,IAAI,GAAGD,WAAW,KAAK,CAAC,CAAC,GAAGF,OAAO,CAACC,MAAM,CAAC,CAAC,EAAEC,WAAW,CAAC,GAAGF,OAAO;IAC1E,IAAII,SAAS,GAAGF,WAAW,KAAK,CAAC,CAAC,GAAGF,OAAO,CAACC,MAAM,CAACC,WAAW,GAAG,CAAC,CAAC,GAAGG,SAAS;IAChF;IACA,IAAID,SAAS,IAAIA,SAAS,CAACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC5CK,SAAS,GAAGA,SAAS,CAACH,MAAM,CAAC,CAAC,EAAEG,SAAS,CAACL,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3D;IACA,MAAMO,UAAU,GAAGH,IAAI,CAACI,WAAW,CAAC,GAAG,CAAC;IACxC,MAAMC,mBAAmB,GAAGL,IAAI,CAACF,MAAM,CAAC,CAAC,EAAEK,UAAU,CAAC;IACtD,MAAMG,WAAW,GAAGN,IAAI,CAACF,MAAM,CAACK,UAAU,GAAG,CAAC,CAAC;IAC/C,IAAII,QAAQ,GAAGF,mBAAmB;IAClC,IAAIG,QAAQ,GAAG,EAAE;IACjB,MAAMC,UAAU,GAAGJ,mBAAmB,CAACT,OAAO,CAAC,GAAG,CAAC;IACnD,IAAIa,UAAU,KAAK,CAAC,CAAC,EAAE;MACnBF,QAAQ,GAAGF,mBAAmB,CAACP,MAAM,CAAC,CAAC,EAAEW,UAAU,CAAC;MACpDD,QAAQ,GAAGH,mBAAmB,CAACP,MAAM,CAACW,UAAU,GAAG,CAAC,CAAC;IACzD;IACA,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAGL,WAAW,CAACZ,KAAK,CAAC,GAAG,CAAC;IAC3C,OAAO;MACH9B,IAAI,EAAEA,IAAI;MACV8C,IAAI,EAAEA,IAAI;MACVH,QAAQ,EAAEK,kBAAkB,CAACL,QAAQ,CAAC;MACtCC,QAAQ,EAAEI,kBAAkB,CAACJ,QAAQ,CAAC;MACtCG,IAAI,EAAEA,IAAI,GAAGE,QAAQ,CAACF,IAAI,CAAC,GAAGT,SAAS;MACvC1B,QAAQ,EAAEyB,SAAS,IAAIC;IAC3B,CAAC;EACL;EACA;AACJ;AACA;EACI,OAAOnB,yBAAyBA,CAACX,GAAG,EAAE;IAClC,MAAMR,IAAI,GAAGQ,GAAG,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAMC,YAAY,GAAGvB,GAAG,CAACwB,OAAO,CAAC,IAAI,CAAC;IACtC,MAAMC,OAAO,GAAGzB,GAAG,CAAC0B,MAAM,CAACH,YAAY,GAAG,CAAC,CAAC;IAC5C,MAAMI,WAAW,GAAGF,OAAO,CAACD,OAAO,CAAC,GAAG,CAAC;IACxC,MAAMI,IAAI,GAAGD,WAAW,KAAK,CAAC,CAAC,GAAGF,OAAO,CAACC,MAAM,CAAC,CAAC,EAAEC,WAAW,CAAC,GAAGF,OAAO;IAC1E,IAAII,SAAS,GAAGF,WAAW,KAAK,CAAC,CAAC,GAAGF,OAAO,CAACC,MAAM,CAACC,WAAW,GAAG,CAAC,CAAC,GAAGG,SAAS;IAChF,IAAIY,iBAAiB,GAAG,EAAE;IAC1B,IAAIJ,IAAI,GAAGR,SAAS;IACpB,IAAIS,IAAI,GAAGT,SAAS;IACpB,IAAIa,cAAc,GAAGb,SAAS;IAC9B,IAAIc,UAAU,GAAGd,SAAS;IAC1B,IAAIe,aAAa,GAAG,CAAC,CAAC;IACtB,IAAIhB,SAAS,IAAIA,SAAS,CAACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC5C;MACAkB,iBAAiB,GAAGb,SAAS,CAACH,MAAM,CAACG,SAAS,CAACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEK,SAAS,CAACb,MAAM,CAAC;MAClF,MAAM8B,WAAW,GAAGJ,iBAAiB,CAACpB,KAAK,CAAC,GAAG,CAAC;MAChD,IAAIyB,SAAS;MACb,IAAIC,WAAW;MACf;MACAF,WAAW,CAACG,OAAO,CAAEC,UAAU,IAAK;QAChCH,SAAS,GAAGG,UAAU,CAAC5B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpC0B,WAAW,GAAGE,UAAU,CAAC5B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtCuB,aAAa,CAACE,SAAS,CAAC,GAAGC,WAAW;MAC1C,CAAC,CAAC;MACF;MACAJ,UAAU,GAAGC,aAAa,CAAC,YAAY,CAAC;MACxChB,SAAS,GAAGA,SAAS,CAACH,MAAM,CAAC,CAAC,EAAEG,SAAS,CAACL,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3D;IACA,MAAMO,UAAU,GAAGH,IAAI,CAACI,WAAW,CAAC,GAAG,CAAC;IACxC,MAAMC,mBAAmB,GAAGL,IAAI,CAACF,MAAM,CAAC,CAAC,EAAEK,UAAU,CAAC;IACtD,MAAMG,WAAW,GAAGN,IAAI,CAACF,MAAM,CAACK,UAAU,GAAG,CAAC,CAAC;IAC/C,IAAII,QAAQ,GAAGF,mBAAmB;IAClC,IAAIG,QAAQ,GAAG,EAAE;IACjB,MAAMC,UAAU,GAAGJ,mBAAmB,CAACT,OAAO,CAAC,GAAG,CAAC;IACnD,IAAIa,UAAU,KAAK,CAAC,CAAC,EAAE;MACnBF,QAAQ,GAAGF,mBAAmB,CAACP,MAAM,CAAC,CAAC,EAAEW,UAAU,CAAC;MACpDD,QAAQ,GAAGH,mBAAmB,CAACP,MAAM,CAACW,UAAU,GAAG,CAAC,CAAC;IACzD;IACA;IACA,IAAIO,UAAU,EAAE;MACZD,cAAc,GAAGT,WAAW;IAChC,CAAC,MACI;MACD;MACA,CAACI,IAAI,EAAEC,IAAI,CAAC,GAAGL,WAAW,CAACZ,KAAK,CAAC,GAAG,CAAC;IACzC;IACA,IAAI6B,aAAa,GAAG;MAChB3D,IAAI,EAAEA,IAAI;MACV8C,IAAI,EAAEA,IAAI;MACVK,cAAc,EAAEA,cAAc;MAC9BR,QAAQ,EAAEK,kBAAkB,CAACL,QAAQ,CAAC;MACtCC,QAAQ,EAAEI,kBAAkB,CAACJ,QAAQ,CAAC;MACtCG,IAAI,EAAEA,IAAI,GAAGE,QAAQ,CAACF,IAAI,CAAC,GAAGT,SAAS;MACvC1B,QAAQ,EAAEyB,SAAS,IAAIC;IAC3B,CAAC;IACD;IACA,KAAK,MAAM,CAACxB,GAAG,EAAE8C,KAAK,CAAC,IAAI7C,MAAM,CAAC8C,OAAO,CAACR,aAAa,CAAC,EAAE;MACtDM,aAAa,CAAC7C,GAAG,CAAC,GAAG8C,KAAK;IAC9B;IACA,OAAOD,aAAa;EACxB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}