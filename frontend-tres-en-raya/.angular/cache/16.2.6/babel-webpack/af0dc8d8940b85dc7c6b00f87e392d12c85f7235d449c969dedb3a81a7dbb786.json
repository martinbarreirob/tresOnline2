{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../socket.service\";\nimport * as i3 from \"@angular/forms\";\nexport class LoggingComponent {\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n    this.emitRegistered = new EventEmitter();\n    this.baseUrl = 'http://localhost:3000/';\n    this.inputNombre = '';\n    this.socket = this.socketService;\n  }\n  ngOnInit() {}\n  registroUser() {\n    this.insertPlayer(this.inputNombre).subscribe(player => {\n      localStorage.setItem('player', JSON.stringify(player));\n      this.searchForGame().subscribe(freeGame => {\n        if (freeGame) {\n          let enterFreeGame = {\n            playerOid: player.id,\n            status: 1\n          };\n          this.http.put(`${this.baseUrl}game/${freeGame.id}`, enterFreeGame).subscribe(updateGame => {\n            console.log('Usuario añadido a Juego Disponible');\n            this.socket.emit(\"player-connected\", player);\n            //Oculta formulario y muestra tablero\n            this.emitRegistered.emit();\n          }, error => {\n            console.error('Error al actualizar el juego:', error); // <-- Agrega esta línea\n          });\n        } else {\n          console.log('No hay juego libre. Creando uno nuevo...');\n          this.createGame(player.id).subscribe(game => {\n            this.emitRegistered.emit();\n          });\n        }\n      });\n    });\n  }\n  insertPlayer(nombre) {\n    const nombrePlayer = {\n      nombre: nombre\n    };\n    return this.http.post(`${this.baseUrl}player/`, nombrePlayer);\n  }\n  createGame(playerId) {\n    const gameData = {\n      board: JSON.stringify([['', '', ''], ['', '', ''], ['', '', '']]),\n      status: 0,\n      playerXid: playerId,\n      playerOid: \"\",\n      turn: 'X'\n    };\n    return this.http.post(`${this.baseUrl}game/`, gameData);\n  }\n  searchForGame() {\n    return this.http.get(`${this.baseUrl}game/free`).pipe(catchError(error => {\n      //console.error('Error al buscar juego libre:', error);\n      return of(null); // Devuelve un valor nulo si ocurre un error\n    }));\n  }\n  static #_ = this.ɵfac = function LoggingComponent_Factory(t) {\n    return new (t || LoggingComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SocketService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoggingComponent,\n    selectors: [[\"app-logging\"]],\n    outputs: {\n      emitRegistered: \"emitRegistered\"\n    },\n    decls: 15,\n    vars: 1,\n    consts: [[1, \"full-height\", \"d-flex\", \"flex-column\", \"justify-content-center\"], [1, \"container\", \"text-center\"], [1, \"row\", \"mb-4\"], [1, \"col\"], [1, \"titulo\"], [1, \"row\"], [\"type\", \"text\", 1, \"form-control\", \"mb-2\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function LoggingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n        i0.ɵɵtext(5, \"Tres \");\n        i0.ɵɵelement(6, \"br\");\n        i0.ɵɵtext(7, \"en\");\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" Raya\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 5)(11, \"div\", 3)(12, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function LoggingComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.inputNombre = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function LoggingComponent_Template_button_click_13_listener() {\n          return ctx.registroUser();\n        });\n        i0.ɵɵtext(14, \"Jugar\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngModel\", ctx.inputNombre);\n      }\n    },\n    dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.full-height[_ngcontent-%COMP%] {\\n  min-height: 90vh;\\n  padding: 15px 0;\\n}\\n\\n.titulo[_ngcontent-%COMP%] {\\n  font-size: calc(8vw); \\n\\n  margin-bottom: 20px;\\n  line-height: 1.1; \\n\\n  font-family: 'Montserrat', sans-serif;\\n  font-weight: 600;\\n}\\n\\ninput[type=\\\"text\\\"][_ngcontent-%COMP%] {\\n  max-width: 200px; \\n\\n  margin: 0 auto; \\n\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9nZ2luZy9sb2dnaW5nLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsWUFBWTtFQUNaLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0Usb0JBQW9CLEVBQUUsc0RBQXNEO0VBQzVFLG1CQUFtQjtFQUNuQixnQkFBZ0IsRUFBRSxvQ0FBb0M7RUFDdEQscUNBQXFDO0VBQ3JDLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQixFQUFFLCtCQUErQjtFQUNqRCxjQUFjLEVBQUUscUJBQXFCO0FBQ3ZDIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLmZ1bGwtaGVpZ2h0IHtcclxuICBtaW4taGVpZ2h0OiA5MHZoO1xyXG4gIHBhZGRpbmc6IDE1cHggMDtcclxufVxyXG5cclxuLnRpdHVsbyB7XHJcbiAgZm9udC1zaXplOiBjYWxjKDh2dyk7IC8qIFRhbWHDg8KxbyBkaW7Dg8KhbWljbyBiYXNhZG8gZW4gZWwgYW5jaG8gZGUgbGEgcGFudGFsbGEgKi9cclxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjE7IC8qIEVzcGFjaWFkbyBkZSBsw4PCrW5lYSBtw4PCoXMgYWp1c3RhZG8gKi9cclxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBzYW5zLXNlcmlmO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbn1cclxuXHJcbmlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcclxuICBtYXgtd2lkdGg6IDIwMHB4OyAvKiBBbmNobyBtw4PCoXhpbW8gcGFyYSBlbCBpbnB1dCAqL1xyXG4gIG1hcmdpbjogMCBhdXRvOyAvKiBDZW50cmFyIGVsIGlucHV0ICovXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","catchError","of","LoggingComponent","constructor","http","socketService","emitRegistered","baseUrl","inputNombre","socket","ngOnInit","registroUser","insertPlayer","subscribe","player","localStorage","setItem","JSON","stringify","searchForGame","freeGame","enterFreeGame","playerOid","id","status","put","updateGame","console","log","emit","error","createGame","game","nombre","nombrePlayer","post","playerId","gameData","board","playerXid","turn","get","pipe","_","i0","ɵɵdirectiveInject","i1","HttpClient","i2","SocketService","_2","selectors","outputs","decls","vars","consts","template","LoggingComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelement","ɵɵelementEnd","ɵɵlistener","LoggingComponent_Template_input_ngModelChange_12_listener","$event","LoggingComponent_Template_button_click_13_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\logging\\logging.component.ts","C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\logging\\logging.component.html"],"sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Player, Game } from '../models/interfaces.model';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { SocketService } from '../socket.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-logging',\r\n  templateUrl: './logging.component.html',\r\n  styleUrls: ['./logging.component.css']\r\n})\r\nexport class LoggingComponent implements OnInit{\r\n  @Output() emitRegistered = new EventEmitter<void>();\r\n\r\n\r\n  private baseUrl: string = 'http://localhost:3000/';\r\n  public inputNombre: string = '';\r\n  private socket: any;\r\n\r\n\r\n  constructor (private http: HttpClient, private socketService: SocketService){\r\n    this.socket = this.socketService;\r\n\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  registroUser(): void {\r\n    this.insertPlayer(this.inputNombre).subscribe((player: Player) => {\r\n\r\n      localStorage.setItem('player', JSON.stringify(player));\r\n\r\n      this.searchForGame().subscribe(freeGame => {\r\n        if (freeGame) {\r\n          let enterFreeGame = {\r\n            playerOid: player.id,\r\n            status: 1,\r\n          };\r\n\r\n          this.http.put<Game>(`${this.baseUrl}game/${freeGame.id}`, enterFreeGame).subscribe(\r\n            updateGame => {\r\n              console.log('Usuario añadido a Juego Disponible');\r\n              this.socket.emit(\"player-connected\", player);\r\n\r\n\r\n              //Oculta formulario y muestra tablero\r\n              this.emitRegistered.emit();\r\n            },\r\n            error => {\r\n              console.error('Error al actualizar el juego:', error); // <-- Agrega esta línea\r\n            }\r\n          );\r\n\r\n        } else {\r\n          console.log('No hay juego libre. Creando uno nuevo...');\r\n          this.createGame(player.id).subscribe((game: Game) => {\r\n            this.emitRegistered.emit();\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  insertPlayer(nombre: string) {\r\n    const nombrePlayer = { nombre: nombre};\r\n    return this.http.post<Player>(`${this.baseUrl}player/`, nombrePlayer);\r\n  }\r\n\r\n\r\n  createGame(playerId: number){\r\n    const gameData = {\r\n      board: JSON.stringify([\r\n        ['', '', ''],\r\n        ['', '', ''],\r\n        ['', '', '']\r\n      ]),\r\n      status: 0,\r\n      playerXid: playerId,\r\n      playerOid: \"\",\r\n      turn: 'X',\r\n    }\r\n    return this.http.post<Game>(`${this.baseUrl}game/`, gameData);\r\n  }\r\n\r\n\r\n  searchForGame(): Observable<Game | null> {\r\n    return this.http.get<Game>(`${this.baseUrl}game/free`).pipe(\r\n      catchError(error => {\r\n        //console.error('Error al buscar juego libre:', error);\r\n        return of(null); // Devuelve un valor nulo si ocurre un error\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"full-height d-flex flex-column justify-content-center\">\r\n  <div class=\"container text-center\">\r\n      <div class=\"row mb-4\">\r\n          <div class=\"col\">\r\n              <h1 class=\"titulo\">Tres <br>en<br> Raya</h1>\r\n          </div>\r\n      </div>\r\n      <div class=\"row\">\r\n          <div class=\"col\">\r\n              <input type=\"text\" [(ngModel)]=\"inputNombre\" class=\"form-control mb-2\">\r\n              <button type=\"button\" class=\"btn btn-primary\" (click)=\"registroUser()\">Jugar</button>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}