{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TypeORMError } from \"../../error\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n  beforeMigration() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.query(`PRAGMA foreign_keys = OFF`);\n    })();\n  }\n  /**\n   * Called after migrations are run.\n   */\n  afterMigration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.query(`PRAGMA foreign_keys = ON`);\n    })();\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  query(query, parameters, useStructuredResult = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.isReleased) throw new QueryRunnerAlreadyReleasedError();\n      const databaseConnection = yield _this3.connect();\n      _this3.driver.connection.logger.logQuery(query, parameters, _this3);\n      const queryStartTime = +new Date();\n      try {\n        const raw = yield new Promise( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (ok, fail) {\n            databaseConnection.executeSql(query, parameters, raw => ok(raw), err => fail(err));\n          });\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n        // log slow queries if maxQueryExecution time is set\n        const maxQueryExecutionTime = _this3.driver.options.maxQueryExecutionTime;\n        const queryEndTime = +new Date();\n        const queryExecutionTime = queryEndTime - queryStartTime;\n        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n          _this3.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this3);\n        }\n        const result = new QueryResult();\n        if (query.substr(0, 11) === \"INSERT INTO\") {\n          result.raw = raw.insertId;\n        } else {\n          let resultSet = [];\n          for (let i = 0; i < raw.rows.length; i++) {\n            resultSet.push(raw.rows.item(i));\n          }\n          result.records = resultSet;\n          result.raw = resultSet;\n        }\n        if (useStructuredResult) {\n          return result;\n        } else {\n          return result.raw;\n        }\n      } catch (err) {\n        _this3.driver.connection.logger.logQueryError(err, query, parameters, _this3);\n        throw new QueryFailedError(query, parameters, err);\n      }\n    })();\n  }\n  /**\n   * Insert a new row with given values into the given table.\n   * Returns value of the generated column if given and generate column exist in the table.\n   // todo: implement new syntax\n  async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n      const keys = Object.keys(keyValues);\n      const columns = keys.map(key => `\"${key}\"`).join(\", \");\n      const values = keys.map(key => \"?\").join(\",\");\n      const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n      const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n      const parameters = keys.map(key => keyValues[key]);\n       return new Promise<InsertResult>(async (ok, fail) => {\n          this.driver.connection.logger.logQuery(sql, parameters, this);\n          const __this = this;\n          const databaseConnection = await this.connect();\n          databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n              const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                  const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                  if (!value) return map;\n                  return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n              }, {} as ObjectLiteral);\n               ok({\n                  result: undefined,\n                  generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n              });\n          }, (err: any) => {\n              __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n              fail(err);\n          });\n      });\n  }*/\n  /**\n   * Would start a transaction but this driver does not support transactions.\n   */\n  startTransaction() {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    })();\n  }\n  /**\n   * Would start a transaction but this driver does not support transactions.\n   */\n  commitTransaction() {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    })();\n  }\n  /**\n   * Would start a transaction but this driver does not support transactions.\n   */\n  rollbackTransaction() {\n    return _asyncToGenerator(function* () {\n      throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    })();\n  }\n  /**\n   * Removes all tables from the currently connected database.\n   * Be careful with using this method and avoid using it in production or migrations\n   * (because it can clear all your database).\n   */\n  clearDatabase() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.query(`PRAGMA foreign_keys = OFF`);\n      try {\n        const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`;\n        const dropViewQueries = yield _this4.query(selectViewDropsQuery);\n        const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\n        const dropTableQueries = yield _this4.query(selectTableDropsQuery);\n        yield Promise.all(dropViewQueries.map(q => _this4.query(q[\"query\"])));\n        yield Promise.all(dropTableQueries.map(q => _this4.query(q[\"query\"])));\n      } finally {\n        yield _this4.query(`PRAGMA foreign_keys = ON`);\n      }\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n  parametrize(objectLiteral, startIndex = 0) {\n    return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","TypeORMError","QueryResult","CordovaQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","_this","_asyncToGenerator","query","afterMigration","_this2","parameters","useStructuredResult","_this3","isReleased","databaseConnection","connect","logger","logQuery","queryStartTime","Date","raw","Promise","_ref","ok","fail","executeSql","err","_x","_x2","apply","arguments","maxQueryExecutionTime","options","queryEndTime","queryExecutionTime","logQuerySlow","result","substr","insertId","resultSet","i","rows","length","push","item","records","logQueryError","startTransaction","commitTransaction","rollbackTransaction","clearDatabase","_this4","selectViewDropsQuery","dropViewQueries","selectTableDropsQuery","dropTableQueries","all","map","q","parametrize","objectLiteral","startIndex","Object","keys","key","index"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/cordova/CordovaQueryRunner.js"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TypeORMError } from \"../../error\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        const queryStartTime = +new Date();\n        try {\n            const raw = await new Promise(async (ok, fail) => {\n                databaseConnection.executeSql(query, parameters, (raw) => ok(raw), (err) => fail(err));\n            });\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime) {\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            }\n            const result = new QueryResult();\n            if (query.substr(0, 11) === \"INSERT INTO\") {\n                result.raw = raw.insertId;\n            }\n            else {\n                let resultSet = [];\n                for (let i = 0; i < raw.rows.length; i++) {\n                    resultSet.push(raw.rows.item(i));\n                }\n                result.records = resultSet;\n                result.raw = resultSet;\n            }\n            if (useStructuredResult) {\n                return result;\n            }\n            else {\n                return result.raw;\n            }\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     // todo: implement new syntax\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<InsertResult>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                    if (!value) return map;\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n                }, {} as ObjectLiteral);\n\n                ok({\n                    result: undefined,\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n                });\n            }, (err: any) => {\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n                fail(err);\n            });\n        });\n    }*/\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async startTransaction() {\n        throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    }\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async commitTransaction() {\n        throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    }\n    /**\n     * Would start a transaction but this driver does not support transactions.\n     */\n    async rollbackTransaction() {\n        throw new TypeORMError(\"Transactions are not supported by the Cordova driver\");\n    }\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful with using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    async clearDatabase() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n        try {\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`;\n            const dropViewQueries = await this.query(selectViewDropsQuery);\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\n            const dropTableQueries = await this.query(selectTableDropsQuery);\n            await Promise.all(dropViewQueries.map((q) => this.query(q[\"query\"])));\n            await Promise.all(dropTableQueries.map((q) => this.query(q[\"query\"])));\n        }\n        finally {\n            await this.query(`PRAGMA foreign_keys = ON`);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral, startIndex = 0) {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}