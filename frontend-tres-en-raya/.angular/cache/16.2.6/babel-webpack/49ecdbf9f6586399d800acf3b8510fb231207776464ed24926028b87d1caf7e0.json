{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n */\nclass LoadMapItem {\n  constructor(plainEntity, metadata, parentLoadMapItem, relation) {\n    this.plainEntity = plainEntity;\n    this.metadata = metadata;\n    this.parentLoadMapItem = parentLoadMapItem;\n    this.relation = relation;\n  }\n  get target() {\n    return this.metadata.target;\n  }\n  get id() {\n    return this.metadata.getEntityIdMixedMap(this.plainEntity);\n  }\n}\nclass LoadMap {\n  constructor() {\n    this.loadMapItems = [];\n  }\n  get mainLoadMapItem() {\n    return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n  }\n  addLoadMap(newLoadMap) {\n    const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n    if (!item) this.loadMapItems.push(newLoadMap);\n  }\n  fillEntities(target, entities) {\n    entities.forEach(entity => {\n      const item = this.loadMapItems.find(loadMapItem => {\n        return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n      });\n      if (item) item.entity = entity;\n    });\n  }\n  groupByTargetIds() {\n    const groups = [];\n    this.loadMapItems.forEach(loadMapItem => {\n      let group = groups.find(group => group.target === loadMapItem.target);\n      if (!group) {\n        group = {\n          target: loadMapItem.target,\n          ids: []\n        };\n        groups.push(group);\n      }\n      group.ids.push(loadMapItem.id);\n    });\n    return groups;\n  }\n}\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  transform(plainObject, metadata) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // if plain object does not have id then nothing to load really\n      if (!metadata.hasAllPrimaryKeys(plainObject)) return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n      // create a special load map that will hold all metadata that will be used to operate with entities easily\n      const loadMap = new LoadMap();\n      const fillLoadMap = (entity, entityMetadata, parentLoadMapItem, relation) => {\n        const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n        loadMap.addLoadMap(item);\n        entityMetadata.extractRelationValuesFromEntity(entity, metadata.relations).filter(value => value !== null && value !== undefined).forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n      };\n      fillLoadMap(plainObject, metadata);\n      // load all entities and store them in the load map\n      yield Promise.all(loadMap.groupByTargetIds().map(targetWithIds => {\n        // todo: fix type hinting\n        return _this.manager.findByIds(targetWithIds.target, targetWithIds.ids).then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n      }));\n      // go through each item in the load map and set their entity relationship using metadata stored in load map\n      loadMap.loadMapItems.forEach(loadMapItem => {\n        if (!loadMapItem.relation || !loadMapItem.entity || !loadMapItem.parentLoadMapItem || !loadMapItem.parentLoadMapItem.entity) return;\n        if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n          if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName]) loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n          loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n        } else {\n          loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n        }\n      });\n      return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n    })();\n  }\n}","map":{"version":3,"names":["LoadMapItem","constructor","plainEntity","metadata","parentLoadMapItem","relation","target","id","getEntityIdMixedMap","LoadMap","loadMapItems","mainLoadMapItem","find","item","addLoadMap","newLoadMap","push","fillEntities","entities","forEach","entity","loadMapItem","compareEntities","groupByTargetIds","groups","group","ids","PlainObjectToDatabaseEntityTransformer","manager","transform","plainObject","_this","_asyncToGenerator","hasAllPrimaryKeys","Promise","reject","loadMap","fillLoadMap","entityMetadata","extractRelationValuesFromEntity","relations","filter","value","undefined","inverseEntityMetadata","all","map","targetWithIds","findByIds","then","isManyToMany","isOneToMany","propertyName"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.js"],"sourcesContent":["/**\n */\nclass LoadMapItem {\n    constructor(plainEntity, metadata, parentLoadMapItem, relation) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n    get target() {\n        return this.metadata.target;\n    }\n    get id() {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n}\nclass LoadMap {\n    constructor() {\n        this.loadMapItems = [];\n    }\n    get mainLoadMapItem() {\n        return this.loadMapItems.find((item) => !item.relation && !item.parentLoadMapItem);\n    }\n    addLoadMap(newLoadMap) {\n        const item = this.loadMapItems.find((item) => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n    fillEntities(target, entities) {\n        entities.forEach((entity) => {\n            const item = this.loadMapItems.find((loadMapItem) => {\n                return (loadMapItem.target === target &&\n                    loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity));\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n    groupByTargetIds() {\n        const groups = [];\n        this.loadMapItems.forEach((loadMapItem) => {\n            let group = groups.find((group) => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n}\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n    constructor(manager) {\n        this.manager = manager;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    async transform(plainObject, metadata) {\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity, entityMetadata, parentLoadMapItem, relation) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter((value) => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map((targetWithIds) => {\n            // todo: fix type hinting\n            return this.manager\n                .findByIds(targetWithIds.target, targetWithIds.ids)\n                .then((entities) => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach((loadMapItem) => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n            if (loadMapItem.relation.isManyToMany ||\n                loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n            }\n            else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n        return loadMap.mainLoadMapItem\n            ? loadMap.mainLoadMapItem.entity\n            : undefined;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}