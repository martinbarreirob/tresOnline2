{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * Marks a entity property as a children of the tree.\n * \"Tree children\" will contain all children (bind) of this entity.\n */\nexport function TreeChildren(options) {\n  return function (object, propertyName) {\n    if (!options) options = {};\n    // now try to determine it its lazy relation\n    const reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n    const isLazy = reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\" || false;\n    // add one-to-many relation for this\n    getMetadataArgsStorage().relations.push({\n      isTreeChildren: true,\n      target: object.constructor,\n      propertyName: propertyName,\n      isLazy: isLazy,\n      relationType: \"one-to-many\",\n      type: () => object.constructor,\n      options: options\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","TreeChildren","options","object","propertyName","reflectedType","Reflect","getMetadata","undefined","isLazy","name","toLowerCase","relations","push","isTreeChildren","target","constructor","relationType","type"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/tree/TreeChildren.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * Marks a entity property as a children of the tree.\n * \"Tree children\" will contain all children (bind) of this entity.\n */\nexport function TreeChildren(options) {\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        const reflectedType = Reflect && Reflect.getMetadata\n            ? Reflect.getMetadata(\"design:type\", object, propertyName)\n            : undefined;\n        const isLazy = (reflectedType &&\n            typeof reflectedType.name === \"string\" &&\n            reflectedType.name.toLowerCase() === \"promise\") ||\n            false;\n        // add one-to-many relation for this\n        getMetadataArgsStorage().relations.push({\n            isTreeChildren: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: () => object.constructor,\n            options: options,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,OAAO,EAAE;EAClC,OAAO,UAAUC,MAAM,EAAEC,YAAY,EAAE;IACnC,IAAI,CAACF,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;IAChB;IACA,MAAMG,aAAa,GAAGC,OAAO,IAAIA,OAAO,CAACC,WAAW,GAC9CD,OAAO,CAACC,WAAW,CAAC,aAAa,EAAEJ,MAAM,EAAEC,YAAY,CAAC,GACxDI,SAAS;IACf,MAAMC,MAAM,GAAIJ,aAAa,IACzB,OAAOA,aAAa,CAACK,IAAI,KAAK,QAAQ,IACtCL,aAAa,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,KAAK,SAAS,IAC9C,KAAK;IACT;IACAX,sBAAsB,CAAC,CAAC,CAACY,SAAS,CAACC,IAAI,CAAC;MACpCC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAEZ,MAAM,CAACa,WAAW;MAC1BZ,YAAY,EAAEA,YAAY;MAC1BK,MAAM,EAAEA,MAAM;MACdQ,YAAY,EAAE,aAAa;MAC3BC,IAAI,EAAEA,CAAA,KAAMf,MAAM,CAACa,WAAW;MAC9Bd,OAAO,EAAEA;IACb,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}