{"ast":null,"code":"import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"Table\");\n    /**\n     * Table columns.\n     */\n    this.columns = [];\n    /**\n     * Table indices.\n     */\n    this.indices = [];\n    /**\n     * Table foreign keys.\n     */\n    this.foreignKeys = [];\n    /**\n     * Table unique constraints.\n     */\n    this.uniques = [];\n    /**\n     * Table check constraints.\n     */\n    this.checks = [];\n    /**\n     * Table exclusion constraints.\n     */\n    this.exclusions = [];\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    this.justCreated = false;\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    this.withoutRowid = false;\n    if (options) {\n      this.database = options.database;\n      this.schema = options.schema;\n      this.name = options.name;\n      if (options.columns) this.columns = options.columns.map(column => new TableColumn(column));\n      if (options.indices) this.indices = options.indices.map(index => new TableIndex(index));\n      if (options.foreignKeys) this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey({\n        ...foreignKey,\n        referencedDatabase: (foreignKey === null || foreignKey === void 0 ? void 0 : foreignKey.referencedDatabase) || options.database,\n        referencedSchema: (foreignKey === null || foreignKey === void 0 ? void 0 : foreignKey.referencedSchema) || options.schema\n      }));\n      if (options.uniques) this.uniques = options.uniques.map(unique => new TableUnique(unique));\n      if (options.checks) this.checks = options.checks.map(check => new TableCheck(check));\n      if (options.exclusions) this.exclusions = options.exclusions.map(exclusion => new TableExclusion(exclusion));\n      if (options.justCreated !== undefined) this.justCreated = options.justCreated;\n      if (options.withoutRowid) this.withoutRowid = options.withoutRowid;\n      this.engine = options.engine;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  get primaryColumns() {\n    return this.columns.filter(column => column.isPrimary);\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n  clone() {\n    return new Table({\n      schema: this.schema,\n      database: this.database,\n      name: this.name,\n      columns: this.columns.map(column => column.clone()),\n      indices: this.indices.map(constraint => constraint.clone()),\n      foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),\n      uniques: this.uniques.map(constraint => constraint.clone()),\n      checks: this.checks.map(constraint => constraint.clone()),\n      exclusions: this.exclusions.map(constraint => constraint.clone()),\n      justCreated: this.justCreated,\n      withoutRowid: this.withoutRowid,\n      engine: this.engine\n    });\n  }\n  /**\n   * Add column and creates its constraints.\n   */\n  addColumn(column) {\n    this.columns.push(column);\n  }\n  /**\n   * Remove column and its constraints.\n   */\n  removeColumn(column) {\n    const foundColumn = this.columns.find(c => c.name === column.name);\n    if (foundColumn) this.columns.splice(this.columns.indexOf(foundColumn), 1);\n  }\n  /**\n   * Adds unique constraint.\n   */\n  addUniqueConstraint(uniqueConstraint) {\n    this.uniques.push(uniqueConstraint);\n    if (uniqueConstraint.columnNames.length === 1) {\n      const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);\n      if (uniqueColumn) uniqueColumn.isUnique = true;\n    }\n  }\n  /**\n   * Removes unique constraint.\n   */\n  removeUniqueConstraint(removedUnique) {\n    const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);\n    if (foundUnique) {\n      this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n      if (foundUnique.columnNames.length === 1) {\n        const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);\n        if (uniqueColumn) uniqueColumn.isUnique = false;\n      }\n    }\n  }\n  /**\n   * Adds check constraint.\n   */\n  addCheckConstraint(checkConstraint) {\n    this.checks.push(checkConstraint);\n  }\n  /**\n   * Removes check constraint.\n   */\n  removeCheckConstraint(removedCheck) {\n    const foundCheck = this.checks.find(check => check.name === removedCheck.name);\n    if (foundCheck) {\n      this.checks.splice(this.checks.indexOf(foundCheck), 1);\n    }\n  }\n  /**\n   * Adds exclusion constraint.\n   */\n  addExclusionConstraint(exclusionConstraint) {\n    this.exclusions.push(exclusionConstraint);\n  }\n  /**\n   * Removes exclusion constraint.\n   */\n  removeExclusionConstraint(removedExclusion) {\n    const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);\n    if (foundExclusion) {\n      this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n    }\n  }\n  /**\n   * Adds foreign keys.\n   */\n  addForeignKey(foreignKey) {\n    this.foreignKeys.push(foreignKey);\n  }\n  /**\n   * Removes foreign key.\n   */\n  removeForeignKey(removedForeignKey) {\n    const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);\n    if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n  }\n  /**\n   * Adds index.\n   */\n  addIndex(index, isMysql = false) {\n    this.indices.push(index);\n    // in Mysql unique indices and unique constraints are the same thing\n    // if index is unique and have only one column, we mark this column as unique\n    if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n      const column = this.columns.find(c => c.name === index.columnNames[0]);\n      if (column) column.isUnique = true;\n    }\n  }\n  /**\n   * Removes index.\n   */\n  removeIndex(tableIndex, isMysql = false) {\n    const index = this.indices.find(index => index.name === tableIndex.name);\n    if (index) {\n      this.indices.splice(this.indices.indexOf(index), 1);\n      // in Mysql unique indices and unique constraints are the same thing\n      // if index is unique and have only one column, we move `unique` attribute from its column\n      if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n        const column = this.columns.find(c => c.name === index.columnNames[0]);\n        if (column) column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);\n      }\n    }\n  }\n  findColumnByName(name) {\n    return this.columns.find(column => column.name === name);\n  }\n  /**\n   * Returns all column indices.\n   */\n  findColumnIndices(column) {\n    return this.indices.filter(index => {\n      return !!index.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column foreign keys.\n   */\n  findColumnForeignKeys(column) {\n    return this.foreignKeys.filter(foreignKey => {\n      return !!foreignKey.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column uniques.\n   */\n  findColumnUniques(column) {\n    return this.uniques.filter(unique => {\n      return !!unique.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column checks.\n   */\n  findColumnChecks(column) {\n    return this.checks.filter(check => {\n      return !!check.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates table from a given entity metadata.\n   */\n  static create(entityMetadata, driver) {\n    const database = entityMetadata.database === driver.database ? undefined : entityMetadata.database;\n    const schema = entityMetadata.schema === driver.options.schema ? undefined : entityMetadata.schema;\n    const options = {\n      database: entityMetadata.database,\n      schema: entityMetadata.schema,\n      name: driver.buildTableName(entityMetadata.tableName, schema, database),\n      withoutRowid: entityMetadata.withoutRowid,\n      engine: entityMetadata.engine,\n      columns: entityMetadata.columns.filter(column => column && !column.isVirtualProperty).map(column => TableUtils.createTableColumnOptions(column, driver)),\n      indices: entityMetadata.indices.filter(index => index.synchronize === true).map(index => TableIndex.create(index)),\n      uniques: entityMetadata.uniques.map(unique => TableUnique.create(unique)),\n      checks: entityMetadata.checks.map(check => TableCheck.create(check)),\n      exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion.create(exclusion))\n    };\n    return new Table(options);\n  }\n}","map":{"version":3,"names":["TableColumn","TableIndex","TableForeignKey","TableUtils","TableUnique","TableCheck","TableExclusion","Table","constructor","options","Symbol","for","columns","indices","foreignKeys","uniques","checks","exclusions","justCreated","withoutRowid","database","schema","name","map","column","index","foreignKey","referencedDatabase","referencedSchema","unique","check","exclusion","undefined","engine","primaryColumns","filter","isPrimary","clone","constraint","addColumn","push","removeColumn","foundColumn","find","c","splice","indexOf","addUniqueConstraint","uniqueConstraint","columnNames","length","uniqueColumn","isUnique","removeUniqueConstraint","removedUnique","foundUnique","addCheckConstraint","checkConstraint","removeCheckConstraint","removedCheck","foundCheck","addExclusionConstraint","exclusionConstraint","removeExclusionConstraint","removedExclusion","foundExclusion","addForeignKey","removeForeignKey","removedForeignKey","fk","addIndex","isMysql","removeIndex","tableIndex","some","ind","findColumnByName","findColumnIndices","columnName","findColumnForeignKeys","findColumnUniques","findColumnChecks","create","entityMetadata","driver","buildTableName","tableName","isVirtualProperty","createTableColumnOptions","synchronize"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/schema-builder/table/Table.js"],"sourcesContent":["import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"Table\");\n        /**\n         * Table columns.\n         */\n        this.columns = [];\n        /**\n         * Table indices.\n         */\n        this.indices = [];\n        /**\n         * Table foreign keys.\n         */\n        this.foreignKeys = [];\n        /**\n         * Table unique constraints.\n         */\n        this.uniques = [];\n        /**\n         * Table check constraints.\n         */\n        this.checks = [];\n        /**\n         * Table exclusion constraints.\n         */\n        this.exclusions = [];\n        /**\n         * Indicates if table was just created.\n         * This is needed, for example to check if we need to skip primary keys creation\n         * for new tables.\n         */\n        this.justCreated = false;\n        /**\n         * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n         */\n        this.withoutRowid = false;\n        if (options) {\n            this.database = options.database;\n            this.schema = options.schema;\n            this.name = options.name;\n            if (options.columns)\n                this.columns = options.columns.map((column) => new TableColumn(column));\n            if (options.indices)\n                this.indices = options.indices.map((index) => new TableIndex(index));\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map((foreignKey) => new TableForeignKey({\n                    ...foreignKey,\n                    referencedDatabase: (foreignKey === null || foreignKey === void 0 ? void 0 : foreignKey.referencedDatabase) ||\n                        options.database,\n                    referencedSchema: (foreignKey === null || foreignKey === void 0 ? void 0 : foreignKey.referencedSchema) || options.schema,\n                }));\n            if (options.uniques)\n                this.uniques = options.uniques.map((unique) => new TableUnique(unique));\n            if (options.checks)\n                this.checks = options.checks.map((check) => new TableCheck(check));\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map((exclusion) => new TableExclusion(exclusion));\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated;\n            if (options.withoutRowid)\n                this.withoutRowid = options.withoutRowid;\n            this.engine = options.engine;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    get primaryColumns() {\n        return this.columns.filter((column) => column.isPrimary);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone() {\n        return new Table({\n            schema: this.schema,\n            database: this.database,\n            name: this.name,\n            columns: this.columns.map((column) => column.clone()),\n            indices: this.indices.map((constraint) => constraint.clone()),\n            foreignKeys: this.foreignKeys.map((constraint) => constraint.clone()),\n            uniques: this.uniques.map((constraint) => constraint.clone()),\n            checks: this.checks.map((constraint) => constraint.clone()),\n            exclusions: this.exclusions.map((constraint) => constraint.clone()),\n            justCreated: this.justCreated,\n            withoutRowid: this.withoutRowid,\n            engine: this.engine,\n        });\n    }\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column) {\n        const foundColumn = this.columns.find((c) => c.name === column.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint) {\n        this.uniques.push(uniqueConstraint);\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find((column) => column.name === uniqueConstraint.columnNames[0]);\n            if (uniqueColumn)\n                uniqueColumn.isUnique = true;\n        }\n    }\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique) {\n        const foundUnique = this.uniques.find((unique) => unique.name === removedUnique.name);\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find((column) => column.name === foundUnique.columnNames[0]);\n                if (uniqueColumn)\n                    uniqueColumn.isUnique = false;\n            }\n        }\n    }\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint) {\n        this.checks.push(checkConstraint);\n    }\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck) {\n        const foundCheck = this.checks.find((check) => check.name === removedCheck.name);\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1);\n        }\n    }\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint) {\n        this.exclusions.push(exclusionConstraint);\n    }\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion) {\n        const foundExclusion = this.exclusions.find((exclusion) => exclusion.name === removedExclusion.name);\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n        }\n    }\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey) {\n        this.foreignKeys.push(foreignKey);\n    }\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey) {\n        const fk = this.foreignKeys.find((foreignKey) => foreignKey.name === removedForeignKey.name);\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n    /**\n     * Adds index.\n     */\n    addIndex(index, isMysql = false) {\n        this.indices.push(index);\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find((c) => c.name === index.columnNames[0]);\n            if (column)\n                column.isUnique = true;\n        }\n    }\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex, isMysql = false) {\n        const index = this.indices.find((index) => index.name === tableIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find((c) => c.name === index.columnNames[0]);\n                if (column)\n                    column.isUnique = this.indices.some((ind) => ind.columnNames.length === 1 &&\n                        ind.columnNames[0] === column.name &&\n                        !!index.isUnique);\n            }\n        }\n    }\n    findColumnByName(name) {\n        return this.columns.find((column) => column.name === name);\n    }\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column) {\n        return this.indices.filter((index) => {\n            return !!index.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column) {\n        return this.foreignKeys.filter((foreignKey) => {\n            return !!foreignKey.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column) {\n        return this.uniques.filter((unique) => {\n            return !!unique.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column) {\n        return this.checks.filter((check) => {\n            return !!check.columnNames.find((columnName) => columnName === column.name);\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata, driver) {\n        const database = entityMetadata.database === driver.database\n            ? undefined\n            : entityMetadata.database;\n        const schema = entityMetadata.schema === driver.options.schema\n            ? undefined\n            : entityMetadata.schema;\n        const options = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(entityMetadata.tableName, schema, database),\n            withoutRowid: entityMetadata.withoutRowid,\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter((column) => column && !column.isVirtualProperty)\n                .map((column) => TableUtils.createTableColumnOptions(column, driver)),\n            indices: entityMetadata.indices\n                .filter((index) => index.synchronize === true)\n                .map((index) => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map((unique) => TableUnique.create(unique)),\n            checks: entityMetadata.checks.map((check) => TableCheck.create(check)),\n            exclusions: entityMetadata.exclusions.map((exclusion) => TableExclusion.create(exclusion)),\n        };\n        return new Table(options);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}