{"ast":null,"code":"import { RelationIdAttribute } from \"./RelationIdAttribute\";\nexport class RelationIdMetadataToAttributeTransformer {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(expressionMap) {\n    this.expressionMap = expressionMap;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  transform() {\n    // by example:\n    // post has relation id:\n    // @RelationId(post => post.categories) categoryIds\n    // category has relation id\n    // @RelationId(category => category.images) imageIds\n    // we load post and join category\n    // we expect post.categoryIds and post.category.imageIds to have relation ids\n    // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n    if (this.expressionMap.mainAlias) {\n      this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {\n        const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationId);\n        this.expressionMap.relationIdAttributes.push(attribute);\n      });\n    }\n    // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n    this.expressionMap.joinAttributes.forEach(join => {\n      // ensure this join has a metadata, because relation id can only work for real orm entities\n      if (!join.metadata || join.metadata.isJunction) return;\n      join.metadata.relationIds.forEach(relationId => {\n        const attribute = this.metadataToAttribute(join.alias.name, relationId);\n        this.expressionMap.relationIdAttributes.push(attribute);\n      });\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n  metadataToAttribute(parentAliasName, relationId) {\n    return new RelationIdAttribute(this.expressionMap, {\n      relationName: parentAliasName + \".\" + relationId.relation.propertyName,\n      mapToProperty: parentAliasName + \".\" + relationId.propertyName,\n      alias: relationId.alias,\n      queryBuilderFactory: relationId.queryBuilderFactory\n    });\n  }\n}","map":{"version":3,"names":["RelationIdAttribute","RelationIdMetadataToAttributeTransformer","constructor","expressionMap","transform","mainAlias","metadata","relationIds","forEach","relationId","attribute","metadataToAttribute","name","relationIdAttributes","push","joinAttributes","join","isJunction","alias","parentAliasName","relationName","relation","propertyName","mapToProperty","queryBuilderFactory"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js"],"sourcesContent":["import { RelationIdAttribute } from \"./RelationIdAttribute\";\nexport class RelationIdMetadataToAttributeTransformer {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    transform() {\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach((relationId) => {\n                const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        }\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach((join) => {\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationIds.forEach((relationId) => {\n                const attribute = this.metadataToAttribute(join.alias.name, relationId);\n                this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    metadataToAttribute(parentAliasName, relationId) {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName,\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName,\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory,\n        });\n    }\n}\n\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,uBAAuB;AAC3D,OAAO,MAAMC,wCAAwC,CAAC;EAClD;EACA;EACA;EACAC,WAAWA,CAACC,aAAa,EAAE;IACvB,IAAI,CAACA,aAAa,GAAGA,aAAa;EACtC;EACA;EACA;EACA;EACAC,SAASA,CAAA,EAAG;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACD,aAAa,CAACE,SAAS,EAAE;MAC9B,IAAI,CAACF,aAAa,CAACE,SAAS,CAACC,QAAQ,CAACC,WAAW,CAACC,OAAO,CAAEC,UAAU,IAAK;QACtE,MAAMC,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACR,aAAa,CAACE,SAAS,CAACO,IAAI,EAAEH,UAAU,CAAC;QACzF,IAAI,CAACN,aAAa,CAACU,oBAAoB,CAACC,IAAI,CAACJ,SAAS,CAAC;MAC3D,CAAC,CAAC;IACN;IACA;IACA,IAAI,CAACP,aAAa,CAACY,cAAc,CAACP,OAAO,CAAEQ,IAAI,IAAK;MAChD;MACA,IAAI,CAACA,IAAI,CAACV,QAAQ,IAAIU,IAAI,CAACV,QAAQ,CAACW,UAAU,EAC1C;MACJD,IAAI,CAACV,QAAQ,CAACC,WAAW,CAACC,OAAO,CAAEC,UAAU,IAAK;QAC9C,MAAMC,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAACK,IAAI,CAACE,KAAK,CAACN,IAAI,EAAEH,UAAU,CAAC;QACvE,IAAI,CAACN,aAAa,CAACU,oBAAoB,CAACC,IAAI,CAACJ,SAAS,CAAC;MAC3D,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACA;EACA;EACAC,mBAAmBA,CAACQ,eAAe,EAAEV,UAAU,EAAE;IAC7C,OAAO,IAAIT,mBAAmB,CAAC,IAAI,CAACG,aAAa,EAAE;MAC/CiB,YAAY,EAAED,eAAe,GAAG,GAAG,GAAGV,UAAU,CAACY,QAAQ,CAACC,YAAY;MACtEC,aAAa,EAAEJ,eAAe,GAAG,GAAG,GAAGV,UAAU,CAACa,YAAY;MAC9DJ,KAAK,EAAET,UAAU,CAACS,KAAK;MACvBM,mBAAmB,EAAEf,UAAU,CAACe;IACpC,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}