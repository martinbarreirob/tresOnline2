{"ast":null,"code":"/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableIndex\");\n    /**\n     * Columns included in this index.\n     */\n    this.columnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.isUnique = !!options.isUnique;\n    this.isSpatial = !!options.isSpatial;\n    this.isFulltext = !!options.isFulltext;\n    this.isNullFiltered = !!options.isNullFiltered;\n    this.parser = options.parser;\n    this.where = options.where ? options.where : \"\";\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new copy of this index with exactly same properties.\n   */\n  clone() {\n    return new TableIndex({\n      name: this.name,\n      columnNames: [...this.columnNames],\n      isUnique: this.isUnique,\n      isSpatial: this.isSpatial,\n      isFulltext: this.isFulltext,\n      isNullFiltered: this.isNullFiltered,\n      parser: this.parser,\n      where: this.where\n    });\n  }\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates index from the index metadata object.\n   */\n  static create(indexMetadata) {\n    return new TableIndex({\n      name: indexMetadata.name,\n      columnNames: indexMetadata.columns.map(column => column.databaseName),\n      isUnique: indexMetadata.isUnique,\n      isSpatial: indexMetadata.isSpatial,\n      isFulltext: indexMetadata.isFulltext,\n      isNullFiltered: indexMetadata.isNullFiltered,\n      parser: indexMetadata.parser,\n      where: indexMetadata.where\n    });\n  }\n}","map":{"version":3,"names":["TableIndex","constructor","options","Symbol","for","columnNames","name","isUnique","isSpatial","isFulltext","isNullFiltered","parser","where","clone","create","indexMetadata","columns","map","column","databaseName"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/schema-builder/table/TableIndex.js"],"sourcesContent":["/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"TableIndex\");\n        /**\n         * Columns included in this index.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.isUnique = !!options.isUnique;\n        this.isSpatial = !!options.isSpatial;\n        this.isFulltext = !!options.isFulltext;\n        this.isNullFiltered = !!options.isNullFiltered;\n        this.parser = options.parser;\n        this.where = options.where ? options.where : \"\";\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone() {\n        return new TableIndex({\n            name: this.name,\n            columnNames: [...this.columnNames],\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isFulltext: this.isFulltext,\n            isNullFiltered: this.isNullFiltered,\n            parser: this.parser,\n            where: this.where,\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata) {\n        return new TableIndex({\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map((column) => column.databaseName),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isFulltext: indexMetadata.isFulltext,\n            isNullFiltered: indexMetadata.isNullFiltered,\n            parser: indexMetadata.parser,\n            where: indexMetadata.where,\n        });\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,CAAC;EACpB;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC,aAAa,CAAC,GAAGC,MAAM,CAACC,GAAG,CAAC,YAAY,CAAC;IAC9C;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACxB,IAAI,CAACD,WAAW,GAAGH,OAAO,CAACG,WAAW;IACtC,IAAI,CAACE,QAAQ,GAAG,CAAC,CAACL,OAAO,CAACK,QAAQ;IAClC,IAAI,CAACC,SAAS,GAAG,CAAC,CAACN,OAAO,CAACM,SAAS;IACpC,IAAI,CAACC,UAAU,GAAG,CAAC,CAACP,OAAO,CAACO,UAAU;IACtC,IAAI,CAACC,cAAc,GAAG,CAAC,CAACR,OAAO,CAACQ,cAAc;IAC9C,IAAI,CAACC,MAAM,GAAGT,OAAO,CAACS,MAAM;IAC5B,IAAI,CAACC,KAAK,GAAGV,OAAO,CAACU,KAAK,GAAGV,OAAO,CAACU,KAAK,GAAG,EAAE;EACnD;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAIb,UAAU,CAAC;MAClBM,IAAI,EAAE,IAAI,CAACA,IAAI;MACfD,WAAW,EAAE,CAAC,GAAG,IAAI,CAACA,WAAW,CAAC;MAClCE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,KAAK,EAAE,IAAI,CAACA;IAChB,CAAC,CAAC;EACN;EACA;EACA;EACA;EACA;AACJ;AACA;EACI,OAAOE,MAAMA,CAACC,aAAa,EAAE;IACzB,OAAO,IAAIf,UAAU,CAAC;MAClBM,IAAI,EAAES,aAAa,CAACT,IAAI;MACxBD,WAAW,EAAEU,aAAa,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,YAAY,CAAC;MACvEZ,QAAQ,EAAEQ,aAAa,CAACR,QAAQ;MAChCC,SAAS,EAAEO,aAAa,CAACP,SAAS;MAClCC,UAAU,EAAEM,aAAa,CAACN,UAAU;MACpCC,cAAc,EAAEK,aAAa,CAACL,cAAc;MAC5CC,MAAM,EAAEI,aAAa,CAACJ,MAAM;MAC5BC,KAAK,EAAEG,aAAa,CAACH;IACzB,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}