{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Query } from \"../driver/Query\";\nimport { SqlInMemory } from \"../driver/SqlInMemory\";\nimport { TypeORMError } from \"../error/TypeORMError\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nexport class BaseQueryRunner {\n  constructor() {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    this.isReleased = false;\n    /**\n     * Indicates if transaction is in progress.\n     */\n    this.isTransactionActive = false;\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    this.data = {};\n    /**\n     * All synchronized tables in the database.\n     */\n    this.loadedTables = [];\n    /**\n     * All synchronized views in the database.\n     */\n    this.loadedViews = [];\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    this.sqlMemoryMode = false;\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    this.sqlInMemory = new SqlInMemory();\n    /**\n     * current depth of transaction.\n     * for transactionDepth > 0 will use SAVEPOINT to start and commit/rollback transaction blocks\n     */\n    this.transactionDepth = 0;\n    this.cachedTablePaths = {};\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Called before migrations are run.\n   */\n  beforeMigration() {\n    return _asyncToGenerator(function* () {})();\n  } // Do nothing\n  /**\n   * Called after migrations are run.\n   */\n  afterMigration() {\n    return _asyncToGenerator(function* () {})();\n  } // Do nothing\n  /**\n   * Loads given table's data from the database.\n   */\n  getTable(tablePath) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loadedTables = yield _this.loadTables([tablePath]);\n      return _this.loadedTables.length > 0 ? _this.loadedTables[0] : undefined;\n    })();\n  }\n  /**\n   * Loads all tables (with given names) from the database.\n   */\n  getTables(tableNames) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!tableNames) {\n        // Don't cache in this case.\n        // This is the new case & isn't used anywhere else anyway.\n        return yield _this2.loadTables(tableNames);\n      }\n      _this2.loadedTables = yield _this2.loadTables(tableNames);\n      return _this2.loadedTables;\n    })();\n  }\n  /**\n   * Loads given view's data from the database.\n   */\n  getView(viewPath) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.loadedViews = yield _this3.loadViews([viewPath]);\n      return _this3.loadedViews.length > 0 ? _this3.loadedViews[0] : undefined;\n    })();\n  }\n  /**\n   * Loads given view's data from the database.\n   */\n  getViews(viewPaths) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.loadedViews = yield _this4.loadViews(viewPaths);\n      return _this4.loadedViews;\n    })();\n  }\n  /**\n   * Enables special query runner mode in which sql queries won't be executed,\n   * instead they will be memorized into a special variable inside query runner.\n   * You can get memorized sql using getMemorySql() method.\n   */\n  enableSqlMemory() {\n    this.sqlInMemory = new SqlInMemory();\n    this.sqlMemoryMode = true;\n  }\n  /**\n   * Disables special query runner mode in which sql queries won't be executed\n   * started by calling enableSqlMemory() method.\n   *\n   * Previously memorized sql will be flushed.\n   */\n  disableSqlMemory() {\n    this.sqlInMemory = new SqlInMemory();\n    this.sqlMemoryMode = false;\n  }\n  /**\n   * Flushes all memorized sqls.\n   */\n  clearSqlMemory() {\n    this.sqlInMemory = new SqlInMemory();\n  }\n  /**\n   * Gets sql stored in the memory. Parameters in the sql are already replaced.\n   */\n  getMemorySql() {\n    return this.sqlInMemory;\n  }\n  /**\n   * Executes up sql queries.\n   */\n  executeMemoryUpSql() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      for (const {\n        query,\n        parameters\n      } of _this5.sqlInMemory.upQueries) {\n        yield _this5.query(query, parameters);\n      }\n    })();\n  }\n  /**\n   * Executes down sql queries.\n   */\n  executeMemoryDownSql() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      for (const {\n        query,\n        parameters\n      } of _this6.sqlInMemory.downQueries.reverse()) {\n        yield _this6.query(query, parameters);\n      }\n    })();\n  }\n  getReplicationMode() {\n    return this.mode;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets view from previously loaded views, otherwise loads it from database.\n   */\n  getCachedView(viewName) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const view = _this7.loadedViews.find(view => view.name === viewName);\n      if (view) return view;\n      const foundViews = yield _this7.loadViews([viewName]);\n      if (foundViews.length > 0) {\n        _this7.loadedViews.push(foundViews[0]);\n        return foundViews[0];\n      } else {\n        throw new TypeORMError(`View \"${viewName}\" does not exist.`);\n      }\n    })();\n  }\n  /**\n   * Gets table from previously loaded tables, otherwise loads it from database.\n   */\n  getCachedTable(tableName) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (tableName in _this8.cachedTablePaths) {\n        const tablePath = _this8.cachedTablePaths[tableName];\n        const table = _this8.loadedTables.find(table => _this8.getTablePath(table) === tablePath);\n        if (table) {\n          return table;\n        }\n      }\n      const foundTables = yield _this8.loadTables([tableName]);\n      if (foundTables.length > 0) {\n        const foundTablePath = _this8.getTablePath(foundTables[0]);\n        const cachedTable = _this8.loadedTables.find(table => _this8.getTablePath(table) === foundTablePath);\n        if (!cachedTable) {\n          _this8.cachedTablePaths[tableName] = _this8.getTablePath(foundTables[0]);\n          _this8.loadedTables.push(foundTables[0]);\n          return foundTables[0];\n        } else {\n          return cachedTable;\n        }\n      } else {\n        throw new TypeORMError(`Table \"${tableName}\" does not exist.`);\n      }\n    })();\n  }\n  /**\n   * Replaces loaded table with given changed table.\n   */\n  replaceCachedTable(table, changedTable) {\n    const oldTablePath = this.getTablePath(table);\n    const foundTable = this.loadedTables.find(loadedTable => this.getTablePath(loadedTable) === oldTablePath);\n    // Clean up the lookup cache..\n    for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\n      if (cachedPath === oldTablePath) {\n        this.cachedTablePaths[key] = this.getTablePath(changedTable);\n      }\n    }\n    if (foundTable) {\n      foundTable.database = changedTable.database;\n      foundTable.schema = changedTable.schema;\n      foundTable.name = changedTable.name;\n      foundTable.columns = changedTable.columns;\n      foundTable.indices = changedTable.indices;\n      foundTable.foreignKeys = changedTable.foreignKeys;\n      foundTable.uniques = changedTable.uniques;\n      foundTable.checks = changedTable.checks;\n      foundTable.justCreated = changedTable.justCreated;\n      foundTable.engine = changedTable.engine;\n    }\n  }\n  getTablePath(target) {\n    const parsed = this.connection.driver.parseTableName(target);\n    return this.connection.driver.buildTableName(parsed.tableName, parsed.schema, parsed.database);\n  }\n  getTypeormMetadataTableName() {\n    const options = this.connection.driver.options;\n    return this.connection.driver.buildTableName(this.connection.metadataTableName, options.schema, options.database);\n  }\n  /**\n   * Generates SQL query to select record from typeorm metadata table.\n   */\n  selectTypeormMetadataSql({\n    database,\n    schema,\n    table,\n    type,\n    name\n  }) {\n    const qb = this.connection.createQueryBuilder();\n    const selectQb = qb.select().from(this.getTypeormMetadataTableName(), \"t\").where(`${qb.escape(\"type\")} = :type`, {\n      type\n    }).andWhere(`${qb.escape(\"name\")} = :name`, {\n      name\n    });\n    if (database) {\n      selectQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n        database\n      });\n    }\n    if (schema) {\n      selectQb.andWhere(`${qb.escape(\"schema\")} = :schema`, {\n        schema\n      });\n    }\n    if (table) {\n      selectQb.andWhere(`${qb.escape(\"table\")} = :table`, {\n        table\n      });\n    }\n    const [query, parameters] = selectQb.getQueryAndParameters();\n    return new Query(query, parameters);\n  }\n  /**\n   * Generates SQL query to insert a record into typeorm metadata table.\n   */\n  insertTypeormMetadataSql({\n    database,\n    schema,\n    table,\n    type,\n    name,\n    value\n  }) {\n    const [query, parameters] = this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({\n      database: database,\n      schema: schema,\n      table: table,\n      type: type,\n      name: name,\n      value: value\n    }).getQueryAndParameters();\n    return new Query(query, parameters);\n  }\n  /**\n   * Generates SQL query to delete a record from typeorm metadata table.\n   */\n  deleteTypeormMetadataSql({\n    database,\n    schema,\n    table,\n    type,\n    name\n  }) {\n    const qb = this.connection.createQueryBuilder();\n    const deleteQb = qb.delete().from(this.getTypeormMetadataTableName()).where(`${qb.escape(\"type\")} = :type`, {\n      type\n    }).andWhere(`${qb.escape(\"name\")} = :name`, {\n      name\n    });\n    if (database) {\n      deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n        database\n      });\n    }\n    if (schema) {\n      deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, {\n        schema\n      });\n    }\n    if (table) {\n      deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, {\n        table\n      });\n    }\n    const [query, parameters] = deleteQb.getQueryAndParameters();\n    return new Query(query, parameters);\n  }\n  /**\n   * Checks if at least one of column properties was changed.\n   * Does not checks column type, length and autoincrement, because these properties changes separately.\n   */\n  isColumnChanged(oldColumn, newColumn, checkDefault, checkComment, checkEnum = true) {\n    // this logs need to debug issues in column change detection. Do not delete it!\n    // console.log(\"charset ---------------\");\n    // console.log(oldColumn.charset !== newColumn.charset);\n    // console.log(oldColumn.charset, newColumn.charset);\n    // console.log(\"collation ---------------\");\n    // console.log(oldColumn.collation !== newColumn.collation);\n    // console.log(oldColumn.collation, newColumn.collation);\n    // console.log(\"precision ---------------\");\n    // console.log(oldColumn.precision !== newColumn.precision);\n    // console.log(oldColumn.precision, newColumn.precision);\n    // console.log(\"scale ---------------\");\n    // console.log(oldColumn.scale !== newColumn.scale);\n    // console.log(oldColumn.scale, newColumn.scale);\n    // console.log(\"default ---------------\");\n    // console.log((checkDefault && oldColumn.default !== newColumn.default));\n    // console.log(oldColumn.default, newColumn.default);\n    // console.log(\"isNullable ---------------\");\n    // console.log(oldColumn.isNullable !== newColumn.isNullable);\n    // console.log(oldColumn.isNullable, newColumn.isNullable);\n    // console.log(\"comment ---------------\");\n    // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n    // console.log(oldColumn.comment, newColumn.comment);\n    // console.log(\"enum ---------------\");\n    // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\n    // console.log(oldColumn.enum, newColumn.enum);\n    return oldColumn.charset !== newColumn.charset || oldColumn.collation !== newColumn.collation || oldColumn.precision !== newColumn.precision || oldColumn.scale !== newColumn.scale || oldColumn.width !== newColumn.width ||\n    // MySQL only\n    oldColumn.zerofill !== newColumn.zerofill ||\n    // MySQL only\n    oldColumn.unsigned !== newColumn.unsigned ||\n    // MySQL only\n    oldColumn.asExpression !== newColumn.asExpression || checkDefault && oldColumn.default !== newColumn.default || oldColumn.onUpdate !== newColumn.onUpdate ||\n    // MySQL only\n    oldColumn.isNullable !== newColumn.isNullable || checkComment && oldColumn.comment !== newColumn.comment || checkEnum && this.isEnumChanged(oldColumn, newColumn);\n  }\n  isEnumChanged(oldColumn, newColumn) {\n    return !OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []);\n  }\n  /**\n   * Checks if column length is by default.\n   */\n  isDefaultColumnLength(table, column, length) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      const metadata = this.connection.getMetadata(table.name);\n      const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata) {\n        const columnMetadataLength = this.connection.driver.getColumnLength(columnMetadata);\n        if (columnMetadataLength) return false;\n      }\n    }\n    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].length) {\n      return this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString();\n    }\n    return false;\n  }\n  /**\n   * Checks if column precision is by default.\n   */\n  isDefaultColumnPrecision(table, column, precision) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      const metadata = this.connection.getMetadata(table.name);\n      const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined) return false;\n    }\n    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].precision !== null && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined) return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n    return false;\n  }\n  /**\n   * Checks if column scale is by default.\n   */\n  isDefaultColumnScale(table, column, scale) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      const metadata = this.connection.getMetadata(table.name);\n      const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined) return false;\n    }\n    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].scale !== null && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined) return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n    return false;\n  }\n  /**\n   * Executes sql used special for schema build.\n   */\n  executeQueries(upQueries, downQueries) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      if (InstanceChecker.isQuery(upQueries)) upQueries = [upQueries];\n      if (InstanceChecker.isQuery(downQueries)) downQueries = [downQueries];\n      _this9.sqlInMemory.upQueries.push(...upQueries);\n      _this9.sqlInMemory.downQueries.push(...downQueries);\n      // if sql-in-memory mode is enabled then simply store sql in memory and return\n      if (_this9.sqlMemoryMode === true) return Promise.resolve();\n      for (const {\n        query,\n        parameters\n      } of upQueries) {\n        yield _this9.query(query, parameters);\n      }\n    })();\n  }\n  /**\n   * Generated an index name for a table and index\n   */\n  generateIndexName(table, index) {\n    // new index may be passed without name. In this case we generate index name manually.\n    return this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n  }\n}","map":{"version":3,"names":["Query","SqlInMemory","TypeORMError","OrmUtils","InstanceChecker","BaseQueryRunner","constructor","isReleased","isTransactionActive","data","loadedTables","loadedViews","sqlMemoryMode","sqlInMemory","transactionDepth","cachedTablePaths","beforeMigration","_asyncToGenerator","afterMigration","getTable","tablePath","_this","loadTables","length","undefined","getTables","tableNames","_this2","getView","viewPath","_this3","loadViews","getViews","viewPaths","_this4","enableSqlMemory","disableSqlMemory","clearSqlMemory","getMemorySql","executeMemoryUpSql","_this5","query","parameters","upQueries","executeMemoryDownSql","_this6","downQueries","reverse","getReplicationMode","mode","getCachedView","viewName","_this7","view","find","name","foundViews","push","getCachedTable","tableName","_this8","table","getTablePath","foundTables","foundTablePath","cachedTable","replaceCachedTable","changedTable","oldTablePath","foundTable","loadedTable","key","cachedPath","Object","entries","database","schema","columns","indices","foreignKeys","uniques","checks","justCreated","engine","target","parsed","connection","driver","parseTableName","buildTableName","getTypeormMetadataTableName","options","metadataTableName","selectTypeormMetadataSql","type","qb","createQueryBuilder","selectQb","select","from","where","escape","andWhere","getQueryAndParameters","insertTypeormMetadataSql","value","insert","into","values","deleteTypeormMetadataSql","deleteQb","delete","isColumnChanged","oldColumn","newColumn","checkDefault","checkComment","checkEnum","charset","collation","precision","scale","width","zerofill","unsigned","asExpression","default","onUpdate","isNullable","comment","isEnumChanged","isArraysEqual","enum","isDefaultColumnLength","column","hasMetadata","metadata","getMetadata","columnMetadata","findColumnWithDatabaseName","columnMetadataLength","getColumnLength","dataTypeDefaults","toString","isDefaultColumnPrecision","isDefaultColumnScale","executeQueries","_this9","isQuery","Promise","resolve","generateIndexName","index","namingStrategy","indexName","columnNames"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-runner/BaseQueryRunner.js"],"sourcesContent":["import { Query } from \"../driver/Query\";\nimport { SqlInMemory } from \"../driver/SqlInMemory\";\nimport { TypeORMError } from \"../error/TypeORMError\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\nexport class BaseQueryRunner {\n    constructor() {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if connection for this query runner is released.\n         * Once its released, query runner cannot run queries anymore.\n         */\n        this.isReleased = false;\n        /**\n         * Indicates if transaction is in progress.\n         */\n        this.isTransactionActive = false;\n        /**\n         * Stores temporarily user data.\n         * Useful for sharing data with subscribers.\n         */\n        this.data = {};\n        /**\n         * All synchronized tables in the database.\n         */\n        this.loadedTables = [];\n        /**\n         * All synchronized views in the database.\n         */\n        this.loadedViews = [];\n        /**\n         * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n         */\n        this.sqlMemoryMode = false;\n        /**\n         * Sql-s stored if \"sql in memory\" mode is enabled.\n         */\n        this.sqlInMemory = new SqlInMemory();\n        /**\n         * current depth of transaction.\n         * for transactionDepth > 0 will use SAVEPOINT to start and commit/rollback transaction blocks\n         */\n        this.transactionDepth = 0;\n        this.cachedTablePaths = {};\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        // Do nothing\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        // Do nothing\n    }\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath) {\n        this.loadedTables = await this.loadTables([tablePath]);\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\n    }\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames) {\n        if (!tableNames) {\n            // Don't cache in this case.\n            // This is the new case & isn't used anywhere else anyway.\n            return await this.loadTables(tableNames);\n        }\n        this.loadedTables = await this.loadTables(tableNames);\n        return this.loadedTables;\n    }\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath) {\n        this.loadedViews = await this.loadViews([viewPath]);\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\n    }\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths) {\n        this.loadedViews = await this.loadViews(viewPaths);\n        return this.loadedViews;\n    }\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory() {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    }\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory() {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    }\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory() {\n        this.sqlInMemory = new SqlInMemory();\n    }\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql() {\n        return this.sqlInMemory;\n    }\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql() {\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql() {\n        for (const { query, parameters, } of this.sqlInMemory.downQueries.reverse()) {\n            await this.query(query, parameters);\n        }\n    }\n    getReplicationMode() {\n        return this.mode;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    async getCachedView(viewName) {\n        const view = this.loadedViews.find((view) => view.name === viewName);\n        if (view)\n            return view;\n        const foundViews = await this.loadViews([viewName]);\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0]);\n            return foundViews[0];\n        }\n        else {\n            throw new TypeORMError(`View \"${viewName}\" does not exist.`);\n        }\n    }\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    async getCachedTable(tableName) {\n        if (tableName in this.cachedTablePaths) {\n            const tablePath = this.cachedTablePaths[tableName];\n            const table = this.loadedTables.find((table) => this.getTablePath(table) === tablePath);\n            if (table) {\n                return table;\n            }\n        }\n        const foundTables = await this.loadTables([tableName]);\n        if (foundTables.length > 0) {\n            const foundTablePath = this.getTablePath(foundTables[0]);\n            const cachedTable = this.loadedTables.find((table) => this.getTablePath(table) === foundTablePath);\n            if (!cachedTable) {\n                this.cachedTablePaths[tableName] = this.getTablePath(foundTables[0]);\n                this.loadedTables.push(foundTables[0]);\n                return foundTables[0];\n            }\n            else {\n                return cachedTable;\n            }\n        }\n        else {\n            throw new TypeORMError(`Table \"${tableName}\" does not exist.`);\n        }\n    }\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    replaceCachedTable(table, changedTable) {\n        const oldTablePath = this.getTablePath(table);\n        const foundTable = this.loadedTables.find((loadedTable) => this.getTablePath(loadedTable) === oldTablePath);\n        // Clean up the lookup cache..\n        for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\n            if (cachedPath === oldTablePath) {\n                this.cachedTablePaths[key] = this.getTablePath(changedTable);\n            }\n        }\n        if (foundTable) {\n            foundTable.database = changedTable.database;\n            foundTable.schema = changedTable.schema;\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n        }\n    }\n    getTablePath(target) {\n        const parsed = this.connection.driver.parseTableName(target);\n        return this.connection.driver.buildTableName(parsed.tableName, parsed.schema, parsed.database);\n    }\n    getTypeormMetadataTableName() {\n        const options = this.connection.driver.options;\n        return this.connection.driver.buildTableName(this.connection.metadataTableName, options.schema, options.database);\n    }\n    /**\n     * Generates SQL query to select record from typeorm metadata table.\n     */\n    selectTypeormMetadataSql({ database, schema, table, type, name, }) {\n        const qb = this.connection.createQueryBuilder();\n        const selectQb = qb\n            .select()\n            .from(this.getTypeormMetadataTableName(), \"t\")\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name });\n        if (database) {\n            selectQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n                database,\n            });\n        }\n        if (schema) {\n            selectQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema });\n        }\n        if (table) {\n            selectQb.andWhere(`${qb.escape(\"table\")} = :table`, { table });\n        }\n        const [query, parameters] = selectQb.getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n    /**\n     * Generates SQL query to insert a record into typeorm metadata table.\n     */\n    insertTypeormMetadataSql({ database, schema, table, type, name, value, }) {\n        const [query, parameters] = this.connection\n            .createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({\n            database: database,\n            schema: schema,\n            table: table,\n            type: type,\n            name: name,\n            value: value,\n        })\n            .getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n    /**\n     * Generates SQL query to delete a record from typeorm metadata table.\n     */\n    deleteTypeormMetadataSql({ database, schema, table, type, name, }) {\n        const qb = this.connection.createQueryBuilder();\n        const deleteQb = qb\n            .delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name });\n        if (database) {\n            deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, {\n                database,\n            });\n        }\n        if (schema) {\n            deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema });\n        }\n        if (table) {\n            deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, { table });\n        }\n        const [query, parameters] = deleteQb.getQueryAndParameters();\n        return new Query(query, parameters);\n    }\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    isColumnChanged(oldColumn, newColumn, checkDefault, checkComment, checkEnum = true) {\n        // this logs need to debug issues in column change detection. Do not delete it!\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\n        // console.log(oldColumn.enum, newColumn.enum);\n        return (oldColumn.charset !== newColumn.charset ||\n            oldColumn.collation !== newColumn.collation ||\n            oldColumn.precision !== newColumn.precision ||\n            oldColumn.scale !== newColumn.scale ||\n            oldColumn.width !== newColumn.width || // MySQL only\n            oldColumn.zerofill !== newColumn.zerofill || // MySQL only\n            oldColumn.unsigned !== newColumn.unsigned || // MySQL only\n            oldColumn.asExpression !== newColumn.asExpression ||\n            (checkDefault && oldColumn.default !== newColumn.default) ||\n            oldColumn.onUpdate !== newColumn.onUpdate || // MySQL only\n            oldColumn.isNullable !== newColumn.isNullable ||\n            (checkComment && oldColumn.comment !== newColumn.comment) ||\n            (checkEnum && this.isEnumChanged(oldColumn, newColumn)));\n    }\n    isEnumChanged(oldColumn, newColumn) {\n        return !OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []);\n    }\n    /**\n     * Checks if column length is by default.\n     */\n    isDefaultColumnLength(table, column, length) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata) {\n                const columnMetadataLength = this.connection.driver.getColumnLength(columnMetadata);\n                if (columnMetadataLength)\n                    return false;\n            }\n        }\n        if (this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].length) {\n            return (this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString());\n        }\n        return false;\n    }\n    /**\n     * Checks if column precision is by default.\n     */\n    isDefaultColumnPrecision(table, column, precision) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata &&\n                columnMetadata.precision !== null &&\n                columnMetadata.precision !== undefined)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\n                null &&\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\n                undefined)\n            return (this.connection.driver.dataTypeDefaults[column.type]\n                .precision === precision);\n        return false;\n    }\n    /**\n     * Checks if column scale is by default.\n     */\n    isDefaultColumnScale(table, column, scale) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata &&\n                columnMetadata.scale !== null &&\n                columnMetadata.scale !== undefined)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults &&\n            this.connection.driver.dataTypeDefaults[column.type] &&\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\n                null &&\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\n                undefined)\n            return (this.connection.driver.dataTypeDefaults[column.type].scale ===\n                scale);\n        return false;\n    }\n    /**\n     * Executes sql used special for schema build.\n     */\n    async executeQueries(upQueries, downQueries) {\n        if (InstanceChecker.isQuery(upQueries))\n            upQueries = [upQueries];\n        if (InstanceChecker.isQuery(downQueries))\n            downQueries = [downQueries];\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve();\n        for (const { query, parameters } of upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n    /**\n     * Generated an index name for a table and index\n     */\n    generateIndexName(table, index) {\n        // new index may be passed without name. In this case we generate index name manually.\n        return this.connection.namingStrategy.indexName(table, index.columnNames, index.where);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}