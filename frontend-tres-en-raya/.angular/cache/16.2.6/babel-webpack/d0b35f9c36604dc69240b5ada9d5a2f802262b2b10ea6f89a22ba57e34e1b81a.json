{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../socket.service\";\nimport * as i3 from \"@angular/forms\";\nexport class LoggingComponent {\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n    this.emitRegistered = new EventEmitter();\n    this.baseUrl = 'http://localhost:3000/';\n    this.inputNombre = '';\n    this.isRegistered = false;\n  }\n  ngOnInit() {}\n  registroUser() {\n    this.insertPlayer(this.inputNombre).subscribe(player => {\n      localStorage.setItem('player', JSON.stringify(player));\n      this.searchForGame().subscribe(freeGame => {\n        if (freeGame) {\n          let enterFreeGame = {\n            playerOid: player.id,\n            status: 1\n          };\n          this.http.put(`${this.baseUrl}game/${freeGame.id}`, enterFreeGame).subscribe(updateGame => {\n            console.log('Usuario añadido a Juego Disponible');\n            this.socketService.io('');\n            //Oculta formulario y muestra tablero\n            this.emitRegistered.emit();\n          }, error => {\n            console.error('Error al actualizar el juego:', error); // <-- Agrega esta línea\n          });\n        } else {\n          console.log('No hay juego libre. Creando uno nuevo...');\n          this.createGame(player.id).subscribe(game => {\n            console.log(game);\n            this.emitRegistered.emit();\n          });\n        }\n      });\n    });\n  }\n  insertPlayer(nombre) {\n    const nombrePlayer = {\n      nombre: nombre\n    };\n    return this.http.post(`${this.baseUrl}player/`, nombrePlayer);\n  }\n  createGame(playerId) {\n    const gameData = {\n      board: JSON.stringify([['', '', ''], ['', '', ''], ['', '', '']]),\n      status: 0,\n      playerXid: playerId,\n      playerOid: \"\",\n      turn: 'X'\n    };\n    return this.http.post(`${this.baseUrl}game/`, gameData);\n  }\n  searchForGame() {\n    return this.http.get(`${this.baseUrl}game/free`).pipe(catchError(error => {\n      //console.error('Error al buscar juego libre:', error);\n      return of(null); // Devuelve un valor nulo si ocurre un error\n    }));\n  }\n  static #_ = this.ɵfac = function LoggingComponent_Factory(t) {\n    return new (t || LoggingComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SocketService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoggingComponent,\n    selectors: [[\"app-logging\"]],\n    outputs: {\n      emitRegistered: \"emitRegistered\"\n    },\n    decls: 8,\n    vars: 1,\n    consts: [[\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"button\"]],\n    template: function LoggingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"logging works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function LoggingComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.inputNombre = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function LoggingComponent_Template_button_click_3_listener() {\n          return ctx.registroUser();\n        });\n        i0.ɵɵtext(4, \"Jugar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"div\");\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵtext(7, \"Movimiento\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.inputNombre);\n      }\n    },\n    dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","catchError","of","LoggingComponent","constructor","http","socketService","emitRegistered","baseUrl","inputNombre","isRegistered","ngOnInit","registroUser","insertPlayer","subscribe","player","localStorage","setItem","JSON","stringify","searchForGame","freeGame","enterFreeGame","playerOid","id","status","put","updateGame","console","log","io","emit","error","createGame","game","nombre","nombrePlayer","post","playerId","gameData","board","playerXid","turn","get","pipe","_","i0","ɵɵdirectiveInject","i1","HttpClient","i2","SocketService","_2","selectors","outputs","decls","vars","consts","template","LoggingComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","LoggingComponent_Template_input_ngModelChange_2_listener","$event","LoggingComponent_Template_button_click_3_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\logging\\logging.component.ts","C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\logging\\logging.component.html"],"sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Player, Game } from '../models/interfaces.model';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { SocketService } from '../socket.service';\n\n\n\n@Component({\n  selector: 'app-logging',\n  templateUrl: './logging.component.html',\n  styleUrls: ['./logging.component.css']\n})\nexport class LoggingComponent implements OnInit{\n  @Output() emitRegistered = new EventEmitter<void>();\n\n  private baseUrl: string = 'http://localhost:3000/';\n  inputNombre: string = '';\n  freeGame: any;\n  isRegistered: boolean = false;\n\n  constructor (private http: HttpClient, private socketService: SocketService){}\n\n  ngOnInit(): void {\n\n  }\n\n  registroUser(): void {\n    this.insertPlayer(this.inputNombre).subscribe((player: Player) => {\n\n      localStorage.setItem('player', JSON.stringify(player));\n\n      this.searchForGame().subscribe(freeGame => {\n        if (freeGame) {\n          let enterFreeGame = {\n            playerOid: player.id,\n            status: 1,\n          };\n\n          this.http.put<Game>(`${this.baseUrl}game/${freeGame.id}`, enterFreeGame).subscribe(\n            updateGame => {\n              console.log('Usuario añadido a Juego Disponible');\n\n              this.socketService.io('')\n              //Oculta formulario y muestra tablero\n              this.emitRegistered.emit();\n            },\n            error => {\n              console.error('Error al actualizar el juego:', error); // <-- Agrega esta línea\n            }\n          );\n\n        } else {\n          console.log('No hay juego libre. Creando uno nuevo...');\n          this.createGame(player.id).subscribe((game: Game) => {\n            console.log(game);\n\n            this.emitRegistered.emit();\n          });\n        }\n      });\n    });\n  }\n\n\n  insertPlayer(nombre: string) {\n    const nombrePlayer = { nombre: nombre};\n    return this.http.post<Player>(`${this.baseUrl}player/`, nombrePlayer);\n  }\n\n\n  createGame(playerId: number){\n    const gameData = {\n      board: JSON.stringify([\n        ['', '', ''],\n        ['', '', ''],\n        ['', '', '']\n      ]),\n      status: 0,\n      playerXid: playerId,\n      playerOid: \"\",\n      turn: 'X',\n    }\n    return this.http.post<Game>(`${this.baseUrl}game/`, gameData);\n  }\n\n\n  searchForGame(): Observable<Game | null> {\n    return this.http.get<Game>(`${this.baseUrl}game/free`).pipe(\n      catchError(error => {\n        //console.error('Error al buscar juego libre:', error);\n        return of(null); // Devuelve un valor nulo si ocurre un error\n      })\n    );\n  }\n\n}\n","<p>logging works!</p>\n\n<input type=\"text\" [(ngModel)]=\"inputNombre\">\n<button type=\"button\" (click)=\"registroUser()\">Jugar</button>\n<div></div>\n<button type=\"button\">Movimiento</button>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}