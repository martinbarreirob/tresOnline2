{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(nameOrOptions, maybeOptions) {\n  const options = (ObjectUtils.isObject(nameOrOptions) ? nameOrOptions : maybeOptions) || {};\n  const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n  return function (target) {\n    getMetadataArgsStorage().tables.push({\n      target: target,\n      name: name,\n      expression: options.expression,\n      dependsOn: options.dependsOn ? new Set(options.dependsOn) : undefined,\n      type: \"view\",\n      database: options.database ? options.database : undefined,\n      schema: options.schema ? options.schema : undefined,\n      synchronize: options.synchronize === false ? false : true,\n      materialized: !!options.materialized\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","ViewEntity","nameOrOptions","maybeOptions","options","isObject","name","target","tables","push","expression","dependsOn","Set","undefined","type","database","schema","synchronize","materialized"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/entity-view/ViewEntity.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(nameOrOptions, maybeOptions) {\n    const options = (ObjectUtils.isObject(nameOrOptions)\n        ? nameOrOptions\n        : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            expression: options.expression,\n            dependsOn: options.dependsOn\n                ? new Set(options.dependsOn)\n                : undefined,\n            type: \"view\",\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize === false ? false : true,\n            materialized: !!options.materialized,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD,SAASC,WAAW,QAAQ,wBAAwB;AACpD;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,aAAa,EAAEC,YAAY,EAAE;EACpD,MAAMC,OAAO,GAAG,CAACJ,WAAW,CAACK,QAAQ,CAACH,aAAa,CAAC,GAC9CA,aAAa,GACbC,YAAY,KAAK,CAAC,CAAC;EACzB,MAAMG,IAAI,GAAG,OAAOJ,aAAa,KAAK,QAAQ,GAAGA,aAAa,GAAGE,OAAO,CAACE,IAAI;EAC7E,OAAO,UAAUC,MAAM,EAAE;IACrBR,sBAAsB,CAAC,CAAC,CAACS,MAAM,CAACC,IAAI,CAAC;MACjCF,MAAM,EAAEA,MAAM;MACdD,IAAI,EAAEA,IAAI;MACVI,UAAU,EAAEN,OAAO,CAACM,UAAU;MAC9BC,SAAS,EAAEP,OAAO,CAACO,SAAS,GACtB,IAAIC,GAAG,CAACR,OAAO,CAACO,SAAS,CAAC,GAC1BE,SAAS;MACfC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAEX,OAAO,CAACW,QAAQ,GAAGX,OAAO,CAACW,QAAQ,GAAGF,SAAS;MACzDG,MAAM,EAAEZ,OAAO,CAACY,MAAM,GAAGZ,OAAO,CAACY,MAAM,GAAGH,SAAS;MACnDI,WAAW,EAAEb,OAAO,CAACa,WAAW,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;MACzDC,YAAY,EAAE,CAAC,CAACd,OAAO,CAACc;IAC5B,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}