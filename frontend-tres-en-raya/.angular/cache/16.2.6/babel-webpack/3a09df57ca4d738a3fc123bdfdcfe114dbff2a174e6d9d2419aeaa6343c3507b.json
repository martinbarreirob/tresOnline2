{"ast":null,"code":"import { InstanceChecker } from \"../util/InstanceChecker\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(type, value, useParameter = true, multipleParameters = false, getSql, objectLiteralParameters) {\n    this[\"@instanceof\"] = Symbol.for(\"FindOperator\");\n    this._type = type;\n    this._value = value;\n    this._useParameter = useParameter;\n    this._multipleParameters = multipleParameters;\n    this._getSql = getSql;\n    this._objectLiteralParameters = objectLiteralParameters;\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  /**\n   * Indicates if parameter is used or not for this operator.\n   * Extracts final value if value is another find operator.\n   */\n  get useParameter() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.useParameter;\n    return this._useParameter;\n  }\n  /**\n   * Indicates if multiple parameters must be used for this operator.\n   * Extracts final value if value is another find operator.\n   */\n  get multipleParameters() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.multipleParameters;\n    return this._multipleParameters;\n  }\n  /**\n   * Gets the Type of this FindOperator\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * Gets the final value needs to be used as parameter value.\n   */\n  get value() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.value;\n    return this._value;\n  }\n  /**\n   * Gets ObjectLiteral parameters.\n   */\n  get objectLiteralParameters() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.objectLiteralParameters;\n    return this._objectLiteralParameters;\n  }\n  /**\n   * Gets the child FindOperator if it exists\n   */\n  get child() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value;\n    return undefined;\n  }\n  /**\n   * Gets the SQL generator\n   */\n  get getSql() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.getSql;\n    return this._getSql;\n  }\n  transformValue(transformer) {\n    if (this._value instanceof FindOperator) {\n      this._value.transformValue(transformer);\n    } else {\n      this._value = Array.isArray(this._value) && this._multipleParameters ? this._value.map(v => transformer && ApplyValueTransformers.transformTo(transformer, v)) : ApplyValueTransformers.transformTo(transformer, this._value);\n    }\n  }\n}","map":{"version":3,"names":["InstanceChecker","ApplyValueTransformers","FindOperator","constructor","type","value","useParameter","multipleParameters","getSql","objectLiteralParameters","Symbol","for","_type","_value","_useParameter","_multipleParameters","_getSql","_objectLiteralParameters","isFindOperator","child","undefined","transformValue","transformer","Array","isArray","map","v","transformTo"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/find-options/FindOperator.js"],"sourcesContent":["import { InstanceChecker } from \"../util/InstanceChecker\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(type, value, useParameter = true, multipleParameters = false, getSql, objectLiteralParameters) {\n        this[\"@instanceof\"] = Symbol.for(\"FindOperator\");\n        this._type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n        this._getSql = getSql;\n        this._objectLiteralParameters = objectLiteralParameters;\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.useParameter;\n        return this._useParameter;\n    }\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.multipleParameters;\n        return this._multipleParameters;\n    }\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.value;\n        return this._value;\n    }\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.objectLiteralParameters;\n        return this._objectLiteralParameters;\n    }\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value;\n        return undefined;\n    }\n    /**\n     * Gets the SQL generator\n     */\n    get getSql() {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.getSql;\n        return this._getSql;\n    }\n    transformValue(transformer) {\n        if (this._value instanceof FindOperator) {\n            this._value.transformValue(transformer);\n        }\n        else {\n            this._value =\n                Array.isArray(this._value) && this._multipleParameters\n                    ? this._value.map((v) => transformer &&\n                        ApplyValueTransformers.transformTo(transformer, v))\n                    : ApplyValueTransformers.transformTo(transformer, this._value);\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}