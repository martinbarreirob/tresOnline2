{"ast":null,"code":"import shajs from \"sha.js\";\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str, firstCapital = false) {\n  if (firstCapital) str = \" \" + str;\n  return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2) {\n    if (p2) return p2.toUpperCase();\n    return p1.toLowerCase();\n  });\n}\n/**\n * Converts string into snake_case.\n *\n */\nexport function snakeCase(str) {\n  return str\n  // ABc -> a_bc\n  .replace(/([A-Z])([A-Z])([a-z])/g, \"$1_$2$3\")\n  // aC -> a_c\n  .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str) {\n  return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str, abbrLettersCount = 1) {\n  const words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n  return words.reduce((res, word) => {\n    res += word.substr(0, abbrLettersCount);\n    return res;\n  }, \"\");\n}\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\nexport function shorten(input, options = {}) {\n  const {\n    segmentLength = 4,\n    separator = \"__\",\n    termLength = 2\n  } = options;\n  const segments = input.split(separator);\n  const shortSegments = segments.reduce((acc, val) => {\n    // split the given segment into many terms based on an eventual camel cased name\n    const segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \");\n    // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n    const length = segmentTerms.length > 1 ? termLength : segmentLength;\n    const shortSegment = segmentTerms.map(term => term.substr(0, length)).join(\"\");\n    acc.push(shortSegment);\n    return acc;\n  }, []);\n  return shortSegments.join(separator);\n}\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input, options = {}) {\n  const hashFunction = shajs(\"sha1\");\n  hashFunction.update(input, \"utf8\");\n  const hashedInput = hashFunction.digest(\"hex\");\n  if (options.length) {\n    return hashedInput.slice(0, options.length);\n  }\n  return hashedInput;\n}","map":{"version":3,"names":["shajs","camelCase","str","firstCapital","replace","match","p1","p2","toUpperCase","toLowerCase","snakeCase","titleCase","txt","charAt","substr","abbreviate","abbrLettersCount","words","split","reduce","res","word","shorten","input","options","segmentLength","separator","termLength","segments","shortSegments","acc","val","segmentTerms","length","shortSegment","map","term","join","push","hash","hashFunction","update","hashedInput","digest","slice"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/util/StringUtils.js"],"sourcesContent":["import shajs from \"sha.js\";\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str, firstCapital = false) {\n    if (firstCapital)\n        str = \" \" + str;\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2) {\n        if (p2)\n            return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n/**\n * Converts string into snake_case.\n *\n */\nexport function snakeCase(str) {\n    return (str\n        // ABc -> a_bc\n        .replace(/([A-Z])([A-Z])([a-z])/g, \"$1_$2$3\")\n        // aC -> a_c\n        .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\")\n        .toLowerCase());\n}\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str) {\n    return str.replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str, abbrLettersCount = 1) {\n    const words = str\n        .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\")\n        .split(\" \");\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount);\n        return res;\n    }, \"\");\n}\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\nexport function shorten(input, options = {}) {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options;\n    const segments = input.split(separator);\n    const shortSegments = segments.reduce((acc, val) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val\n            .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\")\n            .split(\" \");\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength;\n        const shortSegment = segmentTerms\n            .map((term) => term.substr(0, length))\n            .join(\"\");\n        acc.push(shortSegment);\n        return acc;\n    }, []);\n    return shortSegments.join(separator);\n}\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input, options = {}) {\n    const hashFunction = shajs(\"sha1\");\n    hashFunction.update(input, \"utf8\");\n    const hashedInput = hashFunction.digest(\"hex\");\n    if (options.length) {\n        return hashedInput.slice(0, options.length);\n    }\n    return hashedInput;\n}\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,GAAG,EAAEC,YAAY,GAAG,KAAK,EAAE;EACjD,IAAIA,YAAY,EACZD,GAAG,GAAG,GAAG,GAAGA,GAAG;EACnB,OAAOA,GAAG,CAACE,OAAO,CAAC,sBAAsB,EAAE,UAAUC,KAAK,EAAEC,EAAE,EAAEC,EAAE,EAAE;IAChE,IAAIA,EAAE,EACF,OAAOA,EAAE,CAACC,WAAW,CAAC,CAAC;IAC3B,OAAOF,EAAE,CAACG,WAAW,CAAC,CAAC;EAC3B,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACR,GAAG,EAAE;EAC3B,OAAQA;EACJ;EAAA,CACCE,OAAO,CAAC,wBAAwB,EAAE,SAAS;EAC5C;EAAA,CACCA,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC,CACtCK,WAAW,CAAC,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,SAASA,CAACT,GAAG,EAAE;EAC3B,OAAOA,GAAG,CAACE,OAAO,CAAC,QAAQ,EAAGQ,GAAG,IAAKA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACL,WAAW,CAAC,CAAC,GAAGI,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAACL,WAAW,CAAC,CAAC,CAAC;AACpG;AACA;AACA;AACA;AACA,OAAO,SAASM,UAAUA,CAACb,GAAG,EAAEc,gBAAgB,GAAG,CAAC,EAAE;EAClD,MAAMC,KAAK,GAAGf,GAAG,CACZE,OAAO,CAAC,kCAAkC,EAAE,OAAO,CAAC,CACpDc,KAAK,CAAC,GAAG,CAAC;EACf,OAAOD,KAAK,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IAC/BD,GAAG,IAAIC,IAAI,CAACP,MAAM,CAAC,CAAC,EAAEE,gBAAgB,CAAC;IACvC,OAAOI,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,OAAOA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzC,MAAM;IAAEC,aAAa,GAAG,CAAC;IAAEC,SAAS,GAAG,IAAI;IAAEC,UAAU,GAAG;EAAE,CAAC,GAAGH,OAAO;EACvE,MAAMI,QAAQ,GAAGL,KAAK,CAACL,KAAK,CAACQ,SAAS,CAAC;EACvC,MAAMG,aAAa,GAAGD,QAAQ,CAACT,MAAM,CAAC,CAACW,GAAG,EAAEC,GAAG,KAAK;IAChD;IACA,MAAMC,YAAY,GAAGD,GAAG,CACnB3B,OAAO,CAAC,mCAAmC,EAAE,OAAO,CAAC,CACrDc,KAAK,CAAC,GAAG,CAAC;IACf;IACA,MAAMe,MAAM,GAAGD,YAAY,CAACC,MAAM,GAAG,CAAC,GAAGN,UAAU,GAAGF,aAAa;IACnE,MAAMS,YAAY,GAAGF,YAAY,CAC5BG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACtB,MAAM,CAAC,CAAC,EAAEmB,MAAM,CAAC,CAAC,CACrCI,IAAI,CAAC,EAAE,CAAC;IACbP,GAAG,CAACQ,IAAI,CAACJ,YAAY,CAAC;IACtB,OAAOJ,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;EACN,OAAOD,aAAa,CAACQ,IAAI,CAACX,SAAS,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,IAAIA,CAAChB,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACtC,MAAMgB,YAAY,GAAGxC,KAAK,CAAC,MAAM,CAAC;EAClCwC,YAAY,CAACC,MAAM,CAAClB,KAAK,EAAE,MAAM,CAAC;EAClC,MAAMmB,WAAW,GAAGF,YAAY,CAACG,MAAM,CAAC,KAAK,CAAC;EAC9C,IAAInB,OAAO,CAACS,MAAM,EAAE;IAChB,OAAOS,WAAW,CAACE,KAAK,CAAC,CAAC,EAAEpB,OAAO,CAACS,MAAM,CAAC;EAC/C;EACA,OAAOS,WAAW;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}