{"ast":null,"code":"import { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\nimport { TypeORMError } from \"../../error/TypeORMError\";\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(queryExpressionMap, relationIdAttribute) {\n    this.queryExpressionMap = queryExpressionMap;\n    /**\n     * Indicates if relation id should NOT be loaded as id map.\n     */\n    this.disableMixedMap = false;\n    ObjectUtils.assign(this, relationIdAttribute || {});\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  get joinInverseSideMetadata() {\n    return this.relation.inverseEntityMetadata;\n  }\n  /**\n   * Alias of the parent of this join.\n   * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n   * This value is extracted from entityOrProperty value.\n   * This is available when join was made using \"post.category\" syntax.\n   */\n  get parentAlias() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value must be a string representation of alias property`);\n    return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n  }\n  /**\n   * Relation property name of the parent.\n   * This is used to understand what is joined.\n   * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n   * This value is extracted from entityOrProperty value.\n   * This is available when join was made using \"post.category\" syntax.\n   */\n  get relationPropertyPath() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value must be a string representation of alias property`);\n    return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n  }\n  /**\n   * Relation of the parent.\n   * This is used to understand what is joined.\n   * This is available when join was made using \"post.category\" syntax.\n   */\n  get relation() {\n    if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new TypeORMError(`Given value must be a string representation of alias property`);\n    const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);\n    const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n    if (!relation) throw new TypeORMError(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n    return relation;\n  }\n  /**\n   * Generates alias of junction table, whose ids we get.\n   */\n  get junctionAlias() {\n    const [parentAlias, relationProperty] = this.relationName.split(\".\");\n    return parentAlias + \"_\" + relationProperty + \"_rid\";\n  }\n  /**\n   * Metadata of the joined entity.\n   * If extra condition without entity was joined, then it will return undefined.\n   */\n  get junctionMetadata() {\n    return this.relation.junctionEntityMetadata;\n  }\n  get mapToPropertyParentAlias() {\n    return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n  }\n  get mapToPropertyPropertyPath() {\n    return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n  }\n}","map":{"version":3,"names":["QueryBuilderUtils","ObjectUtils","TypeORMError","RelationIdAttribute","constructor","queryExpressionMap","relationIdAttribute","disableMixedMap","assign","joinInverseSideMetadata","relation","inverseEntityMetadata","parentAlias","isAliasProperty","relationName","substr","indexOf","relationPropertyPath","relationOwnerSelection","findAliasByName","metadata","findRelationWithPropertyPath","junctionAlias","relationProperty","split","junctionMetadata","junctionEntityMetadata","mapToPropertyParentAlias","mapToProperty","mapToPropertyPropertyPath"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js"],"sourcesContent":["import { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\nimport { TypeORMError } from \"../../error/TypeORMError\";\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(queryExpressionMap, relationIdAttribute) {\n        this.queryExpressionMap = queryExpressionMap;\n        /**\n         * Indicates if relation id should NOT be loaded as id map.\n         */\n        this.disableMixedMap = false;\n        ObjectUtils.assign(this, relationIdAttribute || {});\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    get joinInverseSideMetadata() {\n        return this.relation.inverseEntityMetadata;\n    }\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    }\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    }\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation() {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new TypeORMError(`Given value must be a string representation of alias property`);\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n        if (!relation)\n            throw new TypeORMError(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias() {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rid\";\n    }\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get junctionMetadata() {\n        return this.relation.junctionEntityMetadata;\n    }\n    get mapToPropertyParentAlias() {\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    }\n    get mapToPropertyPropertyPath() {\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    }\n}\n\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,YAAY,QAAQ,0BAA0B;AACvD;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,CAAC;EAC7B;EACA;EACA;EACAC,WAAWA,CAACC,kBAAkB,EAAEC,mBAAmB,EAAE;IACjD,IAAI,CAACD,kBAAkB,GAAGA,kBAAkB;IAC5C;AACR;AACA;IACQ,IAAI,CAACE,eAAe,GAAG,KAAK;IAC5BN,WAAW,CAACO,MAAM,CAAC,IAAI,EAAEF,mBAAmB,IAAI,CAAC,CAAC,CAAC;EACvD;EACA;EACA;EACA;EACA,IAAIG,uBAAuBA,CAAA,EAAG;IAC1B,OAAO,IAAI,CAACC,QAAQ,CAACC,qBAAqB;EAC9C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,WAAWA,CAAA,EAAG;IACd,IAAI,CAACZ,iBAAiB,CAACa,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIZ,YAAY,CAAE,+DAA8D,CAAC;IAC3F,OAAO,IAAI,CAACY,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE,IAAI,CAACD,YAAY,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,oBAAoBA,CAAA,EAAG;IACvB,IAAI,CAACjB,iBAAiB,CAACa,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIZ,YAAY,CAAE,+DAA8D,CAAC;IAC3F,OAAO,IAAI,CAACY,YAAY,CAACC,MAAM,CAAC,IAAI,CAACD,YAAY,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIN,QAAQA,CAAA,EAAG;IACX,IAAI,CAACV,iBAAiB,CAACa,eAAe,CAAC,IAAI,CAACC,YAAY,CAAC,EACrD,MAAM,IAAIZ,YAAY,CAAE,+DAA8D,CAAC;IAC3F,MAAMgB,sBAAsB,GAAG,IAAI,CAACb,kBAAkB,CAACc,eAAe,CAAC,IAAI,CAACP,WAAW,CAAC;IACxF,MAAMF,QAAQ,GAAGQ,sBAAsB,CAACE,QAAQ,CAACC,4BAA4B,CAAC,IAAI,CAACJ,oBAAoB,CAAC;IACxG,IAAI,CAACP,QAAQ,EACT,MAAM,IAAIR,YAAY,CAAE,+BAA8B,IAAI,CAACe,oBAAqB,2BAA0B,CAAC;IAC/G,OAAOP,QAAQ;EACnB;EACA;AACJ;AACA;EACI,IAAIY,aAAaA,CAAA,EAAG;IAChB,MAAM,CAACV,WAAW,EAAEW,gBAAgB,CAAC,GAAG,IAAI,CAACT,YAAY,CAACU,KAAK,CAAC,GAAG,CAAC;IACpE,OAAOZ,WAAW,GAAG,GAAG,GAAGW,gBAAgB,GAAG,MAAM;EACxD;EACA;AACJ;AACA;AACA;EACI,IAAIE,gBAAgBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACf,QAAQ,CAACgB,sBAAsB;EAC/C;EACA,IAAIC,wBAAwBA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAACC,aAAa,CAACb,MAAM,CAAC,CAAC,EAAE,IAAI,CAACa,aAAa,CAACZ,OAAO,CAAC,GAAG,CAAC,CAAC;EACxE;EACA,IAAIa,yBAAyBA,CAAA,EAAG;IAC5B,OAAO,IAAI,CAACD,aAAa,CAACb,MAAM,CAAC,IAAI,CAACa,aAAa,CAACZ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACzE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}