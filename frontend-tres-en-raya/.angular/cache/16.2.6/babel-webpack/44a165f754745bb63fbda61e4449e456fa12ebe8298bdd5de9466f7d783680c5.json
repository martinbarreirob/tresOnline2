{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class RedisQueryResultCache {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection, clientType) {\n    this.connection = connection;\n    this.clientType = clientType;\n    this.redis = this.loadRedis();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a connection with given cache provider.\n   */\n  connect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const cacheOptions = _this.connection.options.cache;\n      if (_this.clientType === \"redis\") {\n        _this.client = _this.redis.createClient({\n          ...(cacheOptions === null || cacheOptions === void 0 ? void 0 : cacheOptions.options),\n          legacyMode: true\n        });\n        if (typeof _this.connection.options.cache === \"object\" && _this.connection.options.cache.ignoreErrors) {\n          _this.client.on(\"error\", err => {\n            _this.connection.logger.log(\"warn\", err);\n          });\n        }\n        if (\"connect\" in _this.client) {\n          yield _this.client.connect();\n        }\n      } else if (_this.clientType === \"ioredis\") {\n        if (cacheOptions && cacheOptions.port) {\n          if (cacheOptions.options) {\n            _this.client = new _this.redis(cacheOptions.port, cacheOptions.options);\n          } else {\n            _this.client = new _this.redis(cacheOptions.port);\n          }\n        } else if (cacheOptions && cacheOptions.options) {\n          _this.client = new _this.redis(cacheOptions.options);\n        } else {\n          _this.client = new _this.redis();\n        }\n      } else if (_this.clientType === \"ioredis/cluster\") {\n        if (cacheOptions && cacheOptions.options && Array.isArray(cacheOptions.options)) {\n          _this.client = new _this.redis.Cluster(cacheOptions.options);\n        } else if (cacheOptions && cacheOptions.options && cacheOptions.options.startupNodes) {\n          _this.client = new _this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);\n        } else {\n          throw new TypeORMError(`options.startupNodes required for ${_this.clientType}.`);\n        }\n      }\n    })();\n  }\n  /**\n   * Disconnects the connection\n   */\n  disconnect() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((ok, fail) => {\n        _this2.client.quit((err, result) => {\n          if (err) return fail(err);\n          ok();\n          _this2.client = undefined;\n        });\n      });\n    })();\n  }\n  /**\n   * Creates table for storing cache if it does not exist yet.\n   */\n  synchronize(queryRunner) {\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Get data from cache.\n   * Returns cache result if found.\n   * Returns undefined if result is not cached.\n   */\n  getFromCache(options, queryRunner) {\n    return new Promise((ok, fail) => {\n      if (options.identifier) {\n        this.client.get(options.identifier, (err, result) => {\n          if (err) return fail(err);\n          ok(JSON.parse(result));\n        });\n      } else if (options.query) {\n        this.client.get(options.query, (err, result) => {\n          if (err) return fail(err);\n          ok(JSON.parse(result));\n        });\n      } else {\n        ok(undefined);\n      }\n    });\n  }\n  /**\n   * Checks if cache is expired or not.\n   */\n  isExpired(savedCache) {\n    return savedCache.time + savedCache.duration < new Date().getTime();\n  }\n  /**\n   * Stores given query result in the cache.\n   */\n  storeInCache(options, savedCache, queryRunner) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((ok, fail) => {\n        if (options.identifier) {\n          _this3.client.set(options.identifier, JSON.stringify(options), \"PX\", options.duration, (err, result) => {\n            if (err) return fail(err);\n            ok();\n          });\n        } else if (options.query) {\n          _this3.client.set(options.query, JSON.stringify(options), \"PX\", options.duration, (err, result) => {\n            if (err) return fail(err);\n            ok();\n          });\n        }\n      });\n    })();\n  }\n  /**\n   * Clears everything stored in the cache.\n   */\n  clear(queryRunner) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((ok, fail) => {\n        _this4.client.flushdb((err, result) => {\n          if (err) return fail(err);\n          ok();\n        });\n      });\n    })();\n  }\n  /**\n   * Removes all cached results by given identifiers from cache.\n   */\n  remove(identifiers, queryRunner) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield Promise.all(identifiers.map(identifier => {\n        return _this5.deleteKey(identifier);\n      }));\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Removes a single key from redis database.\n   */\n  deleteKey(key) {\n    return new Promise((ok, fail) => {\n      this.client.del(key, (err, result) => {\n        if (err) return fail(err);\n        ok();\n      });\n    });\n  }\n  /**\n   * Loads redis dependency.\n   */\n  loadRedis() {\n    try {\n      if (this.clientType === \"ioredis/cluster\") {\n        return PlatformTools.load(\"ioredis\");\n      } else {\n        return PlatformTools.load(this.clientType);\n      }\n    } catch (e) {\n      throw new TypeORMError(`Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`);\n    }\n  }\n}","map":{"version":3,"names":["PlatformTools","TypeORMError","RedisQueryResultCache","constructor","connection","clientType","redis","loadRedis","connect","_this","_asyncToGenerator","cacheOptions","options","cache","client","createClient","legacyMode","ignoreErrors","on","err","logger","log","port","Array","isArray","Cluster","startupNodes","disconnect","_this2","Promise","ok","fail","quit","result","undefined","synchronize","queryRunner","getFromCache","identifier","get","JSON","parse","query","isExpired","savedCache","time","duration","Date","getTime","storeInCache","_this3","set","stringify","clear","_this4","flushdb","remove","identifiers","_this5","all","map","deleteKey","key","del","load","e"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/cache/RedisQueryResultCache.js"],"sourcesContent":["import { PlatformTools } from \"../platform/PlatformTools\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class RedisQueryResultCache {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection, clientType) {\n        this.connection = connection;\n        this.clientType = clientType;\n        this.redis = this.loadRedis();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a connection with given cache provider.\n     */\n    async connect() {\n        const cacheOptions = this.connection.options.cache;\n        if (this.clientType === \"redis\") {\n            this.client = this.redis.createClient({\n                ...cacheOptions === null || cacheOptions === void 0 ? void 0 : cacheOptions.options,\n                legacyMode: true,\n            });\n            if (typeof this.connection.options.cache === \"object\" &&\n                this.connection.options.cache.ignoreErrors) {\n                this.client.on(\"error\", (err) => {\n                    this.connection.logger.log(\"warn\", err);\n                });\n            }\n            if (\"connect\" in this.client) {\n                await this.client.connect();\n            }\n        }\n        else if (this.clientType === \"ioredis\") {\n            if (cacheOptions && cacheOptions.port) {\n                if (cacheOptions.options) {\n                    this.client = new this.redis(cacheOptions.port, cacheOptions.options);\n                }\n                else {\n                    this.client = new this.redis(cacheOptions.port);\n                }\n            }\n            else if (cacheOptions && cacheOptions.options) {\n                this.client = new this.redis(cacheOptions.options);\n            }\n            else {\n                this.client = new this.redis();\n            }\n        }\n        else if (this.clientType === \"ioredis/cluster\") {\n            if (cacheOptions &&\n                cacheOptions.options &&\n                Array.isArray(cacheOptions.options)) {\n                this.client = new this.redis.Cluster(cacheOptions.options);\n            }\n            else if (cacheOptions &&\n                cacheOptions.options &&\n                cacheOptions.options.startupNodes) {\n                this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);\n            }\n            else {\n                throw new TypeORMError(`options.startupNodes required for ${this.clientType}.`);\n            }\n        }\n    }\n    /**\n     * Disconnects the connection\n     */\n    async disconnect() {\n        return new Promise((ok, fail) => {\n            this.client.quit((err, result) => {\n                if (err)\n                    return fail(err);\n                ok();\n                this.client = undefined;\n            });\n        });\n    }\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    async synchronize(queryRunner) { }\n    /**\n     * Get data from cache.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    getFromCache(options, queryRunner) {\n        return new Promise((ok, fail) => {\n            if (options.identifier) {\n                this.client.get(options.identifier, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok(JSON.parse(result));\n                });\n            }\n            else if (options.query) {\n                this.client.get(options.query, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok(JSON.parse(result));\n                });\n            }\n            else {\n                ok(undefined);\n            }\n        });\n    }\n    /**\n     * Checks if cache is expired or not.\n     */\n    isExpired(savedCache) {\n        return savedCache.time + savedCache.duration < new Date().getTime();\n    }\n    /**\n     * Stores given query result in the cache.\n     */\n    async storeInCache(options, savedCache, queryRunner) {\n        return new Promise((ok, fail) => {\n            if (options.identifier) {\n                this.client.set(options.identifier, JSON.stringify(options), \"PX\", options.duration, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok();\n                });\n            }\n            else if (options.query) {\n                this.client.set(options.query, JSON.stringify(options), \"PX\", options.duration, (err, result) => {\n                    if (err)\n                        return fail(err);\n                    ok();\n                });\n            }\n        });\n    }\n    /**\n     * Clears everything stored in the cache.\n     */\n    async clear(queryRunner) {\n        return new Promise((ok, fail) => {\n            this.client.flushdb((err, result) => {\n                if (err)\n                    return fail(err);\n                ok();\n            });\n        });\n    }\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    async remove(identifiers, queryRunner) {\n        await Promise.all(identifiers.map((identifier) => {\n            return this.deleteKey(identifier);\n        }));\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes a single key from redis database.\n     */\n    deleteKey(key) {\n        return new Promise((ok, fail) => {\n            this.client.del(key, (err, result) => {\n                if (err)\n                    return fail(err);\n                ok();\n            });\n        });\n    }\n    /**\n     * Loads redis dependency.\n     */\n    loadRedis() {\n        try {\n            if (this.clientType === \"ioredis/cluster\") {\n                return PlatformTools.load(\"ioredis\");\n            }\n            else {\n                return PlatformTools.load(this.clientType);\n            }\n        }\n        catch (e) {\n            throw new TypeORMError(`Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`);\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}