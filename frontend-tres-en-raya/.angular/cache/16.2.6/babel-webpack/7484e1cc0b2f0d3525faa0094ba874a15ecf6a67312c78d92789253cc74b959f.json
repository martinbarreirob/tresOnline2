{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n  beforeMigration() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.query(`PRAGMA foreign_keys = OFF`);\n    })();\n  }\n  /**\n   * Called after migrations are run.\n   */\n  afterMigration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.query(`PRAGMA foreign_keys = ON`);\n    })();\n  }\n  executeSet(set) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.isReleased) throw new QueryRunnerAlreadyReleasedError();\n      const databaseConnection = yield _this3.connect();\n      return databaseConnection.executeSet(set, false);\n    })();\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  query(query, parameters, useStructuredResult = false) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.isReleased) throw new QueryRunnerAlreadyReleasedError();\n      const databaseConnection = yield _this4.connect();\n      _this4.driver.connection.logger.logQuery(query, parameters, _this4);\n      const command = query.substr(0, query.indexOf(\" \"));\n      try {\n        let raw;\n        if ([\"BEGIN\", \"ROLLBACK\", \"COMMIT\", \"CREATE\", \"ALTER\", \"DROP\"].indexOf(command) !== -1) {\n          raw = yield databaseConnection.execute(query, false);\n        } else if ([\"INSERT\", \"UPDATE\", \"DELETE\"].indexOf(command) !== -1) {\n          raw = yield databaseConnection.run(query, parameters, false);\n        } else {\n          raw = yield databaseConnection.query(query, parameters || []);\n        }\n        const result = new QueryResult();\n        if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"values\")) {\n          result.raw = raw.values;\n          result.records = raw.values;\n        }\n        if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"changes\")) {\n          result.affected = raw.changes.changes;\n          result.raw = raw.changes.lastId || raw.changes.changes;\n        }\n        if (!useStructuredResult) {\n          return result.raw;\n        }\n        return result;\n      } catch (err) {\n        _this4.driver.connection.logger.logQueryError(err, query, parameters, _this4);\n        throw new QueryFailedError(query, parameters, err);\n      }\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n  parametrize(objectLiteral) {\n    return Object.keys(objectLiteral).map(key => `\"${key}\"` + \"=?\");\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","QueryResult","CapacitorQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","_this","_asyncToGenerator","query","afterMigration","_this2","executeSet","set","_this3","isReleased","databaseConnection","connect","parameters","useStructuredResult","_this4","logger","logQuery","command","substr","indexOf","raw","execute","run","result","hasOwnProperty","values","records","affected","changes","lastId","err","logQueryError","parametrize","objectLiteral","Object","keys","map","key"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/capacitor/CapacitorQueryRunner.js"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    async executeSet(set) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        return databaseConnection.executeSet(set, false);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const databaseConnection = await this.connect();\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        const command = query.substr(0, query.indexOf(\" \"));\n        try {\n            let raw;\n            if ([\n                \"BEGIN\",\n                \"ROLLBACK\",\n                \"COMMIT\",\n                \"CREATE\",\n                \"ALTER\",\n                \"DROP\",\n            ].indexOf(command) !== -1) {\n                raw = await databaseConnection.execute(query, false);\n            }\n            else if ([\"INSERT\", \"UPDATE\", \"DELETE\"].indexOf(command) !== -1) {\n                raw = await databaseConnection.run(query, parameters, false);\n            }\n            else {\n                raw = await databaseConnection.query(query, parameters || []);\n            }\n            const result = new QueryResult();\n            if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"values\")) {\n                result.raw = raw.values;\n                result.records = raw.values;\n            }\n            if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"changes\")) {\n                result.affected = raw.changes.changes;\n                result.raw = raw.changes.lastId || raw.changes.changes;\n            }\n            if (!useStructuredResult) {\n                return result.raw;\n            }\n            return result;\n        }\n        catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral) {\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}