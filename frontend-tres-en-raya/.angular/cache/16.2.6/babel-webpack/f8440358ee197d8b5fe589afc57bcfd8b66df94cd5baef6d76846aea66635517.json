{"ast":null,"code":"import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    this.connection = connection;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a new query result cache based on connection options.\n   */\n  create() {\n    if (!this.connection.options.cache) throw new TypeORMError(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n    const cache = this.connection.options.cache;\n    if (cache.provider && typeof cache.provider === \"function\") {\n      return cache.provider(this.connection);\n    }\n    if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n      return new RedisQueryResultCache(this.connection, cache.type);\n    } else {\n      return new DbQueryResultCache(this.connection);\n    }\n  }\n}","map":{"version":3,"names":["RedisQueryResultCache","DbQueryResultCache","TypeORMError","QueryResultCacheFactory","constructor","connection","create","options","cache","provider","type"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/cache/QueryResultCacheFactory.js"],"sourcesContent":["import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create() {\n        if (!this.connection.options.cache)\n            throw new TypeORMError(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n        const cache = this.connection.options.cache;\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection);\n        }\n        if (cache.type === \"redis\" ||\n            cache.type === \"ioredis\" ||\n            cache.type === \"ioredis/cluster\") {\n            return new RedisQueryResultCache(this.connection, cache.type);\n        }\n        else {\n            return new DbQueryResultCache(this.connection);\n        }\n    }\n}\n\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,YAAY,QAAQ,uBAAuB;AACpD;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,CAAC;EACjC;EACA;EACA;EACAC,WAAWA,CAACC,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACD,UAAU,CAACE,OAAO,CAACC,KAAK,EAC9B,MAAM,IAAIN,YAAY,CAAE,uKAAsK,CAAC;IACnM,MAAMM,KAAK,GAAG,IAAI,CAACH,UAAU,CAACE,OAAO,CAACC,KAAK;IAC3C,IAAIA,KAAK,CAACC,QAAQ,IAAI,OAAOD,KAAK,CAACC,QAAQ,KAAK,UAAU,EAAE;MACxD,OAAOD,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACJ,UAAU,CAAC;IAC1C;IACA,IAAIG,KAAK,CAACE,IAAI,KAAK,OAAO,IACtBF,KAAK,CAACE,IAAI,KAAK,SAAS,IACxBF,KAAK,CAACE,IAAI,KAAK,iBAAiB,EAAE;MAClC,OAAO,IAAIV,qBAAqB,CAAC,IAAI,CAACK,UAAU,EAAEG,KAAK,CAACE,IAAI,CAAC;IACjE,CAAC,MACI;MACD,OAAO,IAAIT,kBAAkB,CAAC,IAAI,CAACI,UAAU,CAAC;IAClD;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}