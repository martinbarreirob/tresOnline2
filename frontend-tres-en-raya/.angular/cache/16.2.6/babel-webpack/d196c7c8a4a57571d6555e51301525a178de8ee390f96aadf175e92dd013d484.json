{"ast":null,"code":"import { getMetadataArgsStorage } from \"../globals\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {\n  // normalize parameters\n  const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n  const fields = typeof nameOrFieldsOrOptions === \"string\" ? maybeFieldsOrOptions : nameOrFieldsOrOptions;\n  let options = ObjectUtils.isObject(nameOrFieldsOrOptions) && !Array.isArray(nameOrFieldsOrOptions) ? nameOrFieldsOrOptions : maybeOptions;\n  if (!options) options = ObjectUtils.isObject(maybeFieldsOrOptions) && !Array.isArray(maybeFieldsOrOptions) ? maybeFieldsOrOptions : maybeOptions;\n  return function (clsOrObject, propertyName) {\n    getMetadataArgsStorage().indices.push({\n      target: propertyName ? clsOrObject.constructor : clsOrObject,\n      name: name,\n      columns: propertyName ? [propertyName] : fields,\n      synchronize: options && options.synchronize === false ? false : true,\n      where: options ? options.where : undefined,\n      unique: options && options.unique ? true : false,\n      spatial: options && options.spatial ? true : false,\n      fulltext: options && options.fulltext ? true : false,\n      nullFiltered: options && options.nullFiltered ? true : false,\n      parser: options ? options.parser : undefined,\n      sparse: options && options.sparse ? true : false,\n      background: options && options.background ? true : false,\n      expireAfterSeconds: options ? options.expireAfterSeconds : undefined\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","Index","nameOrFieldsOrOptions","maybeFieldsOrOptions","maybeOptions","name","undefined","fields","options","isObject","Array","isArray","clsOrObject","propertyName","indices","push","target","constructor","columns","synchronize","where","unique","spatial","fulltext","nullFiltered","parser","sparse","background","expireAfterSeconds"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/Index.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {\n    // normalize parameters\n    const name = typeof nameOrFieldsOrOptions === \"string\"\n        ? nameOrFieldsOrOptions\n        : undefined;\n    const fields = typeof nameOrFieldsOrOptions === \"string\"\n        ? maybeFieldsOrOptions\n        : nameOrFieldsOrOptions;\n    let options = ObjectUtils.isObject(nameOrFieldsOrOptions) &&\n        !Array.isArray(nameOrFieldsOrOptions)\n        ? nameOrFieldsOrOptions\n        : maybeOptions;\n    if (!options)\n        options =\n            ObjectUtils.isObject(maybeFieldsOrOptions) &&\n                !Array.isArray(maybeFieldsOrOptions)\n                ? maybeFieldsOrOptions\n                : maybeOptions;\n    return function (clsOrObject, propertyName) {\n        getMetadataArgsStorage().indices.push({\n            target: propertyName\n                ? clsOrObject.constructor\n                : clsOrObject,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize: options &&\n                options.synchronize === false\n                ? false\n                : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            nullFiltered: options && options.nullFiltered ? true : false,\n            parser: options ? options.parser : undefined,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            expireAfterSeconds: options\n                ? options.expireAfterSeconds\n                : undefined,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,YAAY;AACnD,SAASC,WAAW,QAAQ,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,qBAAqB,EAAEC,oBAAoB,EAAEC,YAAY,EAAE;EAC7E;EACA,MAAMC,IAAI,GAAG,OAAOH,qBAAqB,KAAK,QAAQ,GAChDA,qBAAqB,GACrBI,SAAS;EACf,MAAMC,MAAM,GAAG,OAAOL,qBAAqB,KAAK,QAAQ,GAClDC,oBAAoB,GACpBD,qBAAqB;EAC3B,IAAIM,OAAO,GAAGR,WAAW,CAACS,QAAQ,CAACP,qBAAqB,CAAC,IACrD,CAACQ,KAAK,CAACC,OAAO,CAACT,qBAAqB,CAAC,GACnCA,qBAAqB,GACrBE,YAAY;EAClB,IAAI,CAACI,OAAO,EACRA,OAAO,GACHR,WAAW,CAACS,QAAQ,CAACN,oBAAoB,CAAC,IACtC,CAACO,KAAK,CAACC,OAAO,CAACR,oBAAoB,CAAC,GAClCA,oBAAoB,GACpBC,YAAY;EAC1B,OAAO,UAAUQ,WAAW,EAAEC,YAAY,EAAE;IACxCd,sBAAsB,CAAC,CAAC,CAACe,OAAO,CAACC,IAAI,CAAC;MAClCC,MAAM,EAAEH,YAAY,GACdD,WAAW,CAACK,WAAW,GACvBL,WAAW;MACjBP,IAAI,EAAEA,IAAI;MACVa,OAAO,EAAEL,YAAY,GAAG,CAACA,YAAY,CAAC,GAAGN,MAAM;MAC/CY,WAAW,EAAEX,OAAO,IAChBA,OAAO,CAACW,WAAW,KAAK,KAAK,GAC3B,KAAK,GACL,IAAI;MACVC,KAAK,EAAEZ,OAAO,GAAGA,OAAO,CAACY,KAAK,GAAGd,SAAS;MAC1Ce,MAAM,EAAEb,OAAO,IAAIA,OAAO,CAACa,MAAM,GAAG,IAAI,GAAG,KAAK;MAChDC,OAAO,EAAEd,OAAO,IAAIA,OAAO,CAACc,OAAO,GAAG,IAAI,GAAG,KAAK;MAClDC,QAAQ,EAAEf,OAAO,IAAIA,OAAO,CAACe,QAAQ,GAAG,IAAI,GAAG,KAAK;MACpDC,YAAY,EAAEhB,OAAO,IAAIA,OAAO,CAACgB,YAAY,GAAG,IAAI,GAAG,KAAK;MAC5DC,MAAM,EAAEjB,OAAO,GAAGA,OAAO,CAACiB,MAAM,GAAGnB,SAAS;MAC5CoB,MAAM,EAAElB,OAAO,IAAIA,OAAO,CAACkB,MAAM,GAAG,IAAI,GAAG,KAAK;MAChDC,UAAU,EAAEnB,OAAO,IAAIA,OAAO,CAACmB,UAAU,GAAG,IAAI,GAAG,KAAK;MACxDC,kBAAkB,EAAEpB,OAAO,GACrBA,OAAO,CAACoB,kBAAkB,GAC1BtB;IACV,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}