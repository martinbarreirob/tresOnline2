{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    /**\n     * Flag to determine if a modification has happened since the last time this query runner has requested a save.\n     */\n    this.isDirty = false;\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  // -------------------------------------------------------------------------\n  // Public methods\n  // -------------------------------------------------------------------------\n  /**\n   * Called before migrations are run.\n   */\n  beforeMigration() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.query(`PRAGMA foreign_keys = OFF`);\n    })();\n  }\n  /**\n   * Called after migrations are run.\n   */\n  afterMigration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.query(`PRAGMA foreign_keys = ON`);\n    })();\n  }\n  flush() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.isDirty) {\n        yield _this3.driver.autoSave();\n        _this3.isDirty = false;\n      }\n    })();\n  }\n  release() {\n    var _superprop_getRelease = () => super.release,\n      _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4.flush();\n      return _superprop_getRelease().call(_this4);\n    })();\n  }\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n  commitTransaction() {\n    var _superprop_getCommitTransaction = () => super.commitTransaction,\n      _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _superprop_getCommitTransaction().call(_this5);\n      if (!_this5.isTransactionActive) {\n        yield _this5.flush();\n      }\n    })();\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  query(query, parameters = [], useStructuredResult = false) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      if (_this6.isReleased) throw new QueryRunnerAlreadyReleasedError();\n      const command = query.trim().split(\" \", 1)[0];\n      const databaseConnection = _this6.driver.databaseConnection;\n      _this6.driver.connection.logger.logQuery(query, parameters, _this6);\n      const queryStartTime = +new Date();\n      let statement;\n      try {\n        statement = databaseConnection.prepare(query);\n        if (parameters) {\n          parameters = parameters.map(p => typeof p !== \"undefined\" ? p : null);\n          statement.bind(parameters);\n        }\n        // log slow queries if maxQueryExecution time is set\n        const maxQueryExecutionTime = _this6.driver.options.maxQueryExecutionTime;\n        const queryEndTime = +new Date();\n        const queryExecutionTime = queryEndTime - queryStartTime;\n        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this6.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this6);\n        const records = [];\n        while (statement.step()) {\n          records.push(statement.getAsObject());\n        }\n        const result = new QueryResult();\n        result.affected = databaseConnection.getRowsModified();\n        result.records = records;\n        result.raw = records;\n        statement.free();\n        if (command !== \"SELECT\") {\n          _this6.isDirty = true;\n        }\n        if (useStructuredResult) {\n          return result;\n        } else {\n          return result.raw;\n        }\n      } catch (e) {\n        if (statement) {\n          statement.free();\n        }\n        _this6.driver.connection.logger.logQueryError(e, query, parameters, _this6);\n        throw new QueryFailedError(query, parameters, e);\n      }\n    })();\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","AbstractSqliteQueryRunner","Broadcaster","QueryFailedError","QueryResult","SqljsQueryRunner","constructor","driver","isDirty","connection","broadcaster","beforeMigration","_this","_asyncToGenerator","query","afterMigration","_this2","flush","_this3","autoSave","release","_superprop_getRelease","_this4","call","commitTransaction","_superprop_getCommitTransaction","_this5","isTransactionActive","parameters","useStructuredResult","_this6","isReleased","command","trim","split","databaseConnection","logger","logQuery","queryStartTime","Date","statement","prepare","map","p","bind","maxQueryExecutionTime","options","queryEndTime","queryExecutionTime","logQuerySlow","records","step","push","getAsObject","result","affected","getRowsModified","raw","free","e","logQueryError"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/sqljs/SqljsQueryRunner.js"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        /**\n         * Flag to determine if a modification has happened since the last time this query runner has requested a save.\n         */\n        this.isDirty = false;\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    async flush() {\n        if (this.isDirty) {\n            await this.driver.autoSave();\n            this.isDirty = false;\n        }\n    }\n    async release() {\n        await this.flush();\n        return super.release();\n    }\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction() {\n        await super.commitTransaction();\n        if (!this.isTransactionActive) {\n            await this.flush();\n        }\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters = [], useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        const command = query.trim().split(\" \", 1)[0];\n        const databaseConnection = this.driver.databaseConnection;\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        const queryStartTime = +new Date();\n        let statement;\n        try {\n            statement = databaseConnection.prepare(query);\n            if (parameters) {\n                parameters = parameters.map((p) => typeof p !== \"undefined\" ? p : null);\n                statement.bind(parameters);\n            }\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime &&\n                queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            const records = [];\n            while (statement.step()) {\n                records.push(statement.getAsObject());\n            }\n            const result = new QueryResult();\n            result.affected = databaseConnection.getRowsModified();\n            result.records = records;\n            result.raw = records;\n            statement.free();\n            if (command !== \"SELECT\") {\n                this.isDirty = true;\n            }\n            if (useStructuredResult) {\n                return result;\n            }\n            else {\n                return result.raw;\n            }\n        }\n        catch (e) {\n            if (statement) {\n                statement.free();\n            }\n            this.driver.connection.logger.logQueryError(e, query, parameters, this);\n            throw new QueryFailedError(query, parameters, e);\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}