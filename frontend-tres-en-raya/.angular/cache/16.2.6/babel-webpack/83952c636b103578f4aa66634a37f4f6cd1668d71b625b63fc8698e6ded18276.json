{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n  beforeMigration() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.query(`PRAGMA foreign_keys = OFF`);\n    })();\n  }\n  /**\n   * Called after migrations are run.\n   */\n  afterMigration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.query(`PRAGMA foreign_keys = ON`);\n    })();\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  query(query, parameters, useStructuredResult = false) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.isReleased) {\n        throw new QueryRunnerAlreadyReleasedError();\n      }\n      const connection = _this3.driver.connection;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (ok, fail) {\n          const databaseConnection = yield _this3.connect();\n          const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n          connection.logger.logQuery(query, parameters, _this3);\n          const handler = (err, raw) => {\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = _this3.driver.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n              connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this3);\n            }\n            if (err) {\n              connection.logger.logQueryError(err, query, parameters, _this3);\n              fail(new QueryFailedError(query, parameters, err));\n            }\n            const result = new QueryResult();\n            result.raw = raw;\n            if (!isInsertQuery && Array.isArray(raw)) {\n              result.records = raw;\n            }\n            if (useStructuredResult) {\n              ok(result);\n            } else {\n              ok(result.raw);\n            }\n          };\n          const queryStartTime = +new Date();\n          if (isInsertQuery) {\n            databaseConnection.execSQL(query, parameters, handler);\n          } else {\n            databaseConnection.all(query, parameters, handler);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n  parametrize(objectLiteral, startIndex = 0) {\n    return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","QueryResult","NativescriptQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","_this","_asyncToGenerator","query","afterMigration","_this2","parameters","useStructuredResult","_this3","isReleased","Promise","_ref","ok","fail","databaseConnection","connect","isInsertQuery","substr","logger","logQuery","handler","err","raw","maxQueryExecutionTime","options","queryEndTime","Date","queryExecutionTime","queryStartTime","logQuerySlow","logQueryError","result","Array","isArray","records","execSQL","all","_x","_x2","apply","arguments","parametrize","objectLiteral","startIndex","Object","keys","map","key","index"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/nativescript/NativescriptQueryRunner.js"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased) {\n            throw new QueryRunnerAlreadyReleasedError();\n        }\n        const connection = this.driver.connection;\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n            connection.logger.logQuery(query, parameters, this);\n            const handler = (err, raw) => {\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime &&\n                    queryExecutionTime > maxQueryExecutionTime) {\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                }\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                }\n                const result = new QueryResult();\n                result.raw = raw;\n                if (!isInsertQuery && Array.isArray(raw)) {\n                    result.records = raw;\n                }\n                if (useStructuredResult) {\n                    ok(result);\n                }\n                else {\n                    ok(result.raw);\n                }\n            };\n            const queryStartTime = +new Date();\n            if (isInsertQuery) {\n                databaseConnection.execSQL(query, parameters, handler);\n            }\n            else {\n                databaseConnection.all(query, parameters, handler);\n            }\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral, startIndex = 0) {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}