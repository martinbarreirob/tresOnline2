{"ast":null,"code":"import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(subjects) {\n    this.subjects = subjects;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds operations for any changes in the many-to-many relations of the subjects.\n   */\n  build() {\n    this.subjects.forEach(subject => {\n      // if subject doesn't have entity then no need to find something that should be inserted or removed\n      if (!subject.entity) return;\n      // go through all persistence enabled many-to-many relations and build subject operations for them\n      subject.metadata.manyToManyRelations.forEach(relation => {\n        // skip relations for which persistence is disabled\n        if (relation.persistenceEnabled === false) return;\n        this.buildForSubjectRelation(subject, relation);\n      });\n    });\n  }\n  /**\n   * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n   */\n  buildForAllRemoval(subject) {\n    // if subject does not have a database entity then it means it does not exist in the database\n    // if it does not exist in the database then we don't have anything for deletion\n    if (!subject.databaseEntity) return;\n    // go through all persistence enabled many-to-many relations and build subject operations for them\n    subject.metadata.manyToManyRelations.forEach(relation => {\n      // skip relations for which persistence is disabled\n      if (relation.persistenceEnabled === false) return;\n      // get all related entities (actually related entity relation ids) bind to this subject entity\n      // by example: returns category ids of the post we are currently working with (subject.entity is post)\n      const relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);\n      // go through all related entities and create a new junction subject for each row in junction table\n      relatedEntityRelationIdsInDatabase.forEach(relationId => {\n        const junctionSubject = new Subject({\n          metadata: relation.junctionEntityMetadata,\n          parentSubject: subject,\n          mustBeRemoved: true,\n          identifier: this.buildJunctionIdentifier(subject, relation, relationId)\n        });\n        // we use unshift because we need to perform those operations before post deletion is performed\n        // but post deletion was already added as an subject\n        // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n        this.subjects.push(junctionSubject);\n      });\n    });\n  }\n  // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds operations for a given subject and relation.\n   *\n   * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n   */\n  buildForSubjectRelation(subject, relation) {\n    // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n    let databaseRelatedEntityIds = [];\n    // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n    // and we don't need to remove something that is not exist\n    if (subject.databaseEntity) databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n    // extract entity's relation value\n    // by example: categories inside our post (subject.entity is post)\n    let relatedEntities = relation.getEntityValue(subject.entity);\n    if (relatedEntities === null)\n      // if value set to null its equal if we set it to empty array - all items must be removed from the database\n      relatedEntities = [];\n    if (!Array.isArray(relatedEntities)) return;\n    // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n    relatedEntities.forEach(relatedEntity => {\n      // by example: relatedEntity is category from categories saved with post\n      // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n      // extract only relation id from the related entities, since we only need it for comparison\n      // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n      let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n      // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n      const relatedEntitySubject = this.subjects.find(subject => {\n        return subject.entity === relatedEntity;\n      });\n      // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n      if (relatedEntitySubject) relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n      // if related entity relation id map is empty it means related entity is newly persisted\n      if (!relatedEntityRelationIdMap) {\n        // we decided to remove this error because it brings complications when saving object with non-saved entities\n        // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n        // in this persistence because he didn't pass this entity for save or he did not set cascades\n        // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n        // we decided to remove this error because it brings complications when saving object with non-saved entities\n        // if (!relatedEntitySubject)\n        //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n        //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n        //         `Please setup cascade insertion or save entities before binding it.`);\n        if (!relatedEntitySubject) return;\n      }\n      // try to find related entity in the database\n      // by example: find post's category in the database post's categories\n      const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(databaseRelatedEntityRelationId => {\n        return OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n      });\n      // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n      if (relatedEntityExistInDatabase) return;\n      const ownerValue = relation.isOwning ? subject : relatedEntitySubject || relatedEntity; // by example: ownerEntityMap is post from subject here\n      const inverseValue = relation.isOwning ? relatedEntitySubject || relatedEntity : subject; // by example: inverseEntityMap is category from categories array here\n      // create a new subject for insert operation of junction rows\n      const junctionSubject = new Subject({\n        metadata: relation.junctionEntityMetadata,\n        parentSubject: subject,\n        canBeInserted: true\n      });\n      this.subjects.push(junctionSubject);\n      relation.junctionEntityMetadata.ownerColumns.forEach(column => {\n        junctionSubject.changeMaps.push({\n          column: column,\n          value: ownerValue\n          // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n        });\n      });\n\n      relation.junctionEntityMetadata.inverseColumns.forEach(column => {\n        junctionSubject.changeMaps.push({\n          column: column,\n          value: inverseValue\n          // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n        });\n      });\n    });\n    // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n    const changedInverseEntityRelationIds = [];\n    relatedEntities.forEach(relatedEntity => {\n      // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n      let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n      // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n      const relatedEntitySubject = this.subjects.find(subject => {\n        return subject.entity === relatedEntity;\n      });\n      // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n      if (relatedEntitySubject) relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n      if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null) changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n    });\n    // now from all entities in the persisted entity find only those which aren't found in the db\n    const removedJunctionEntityIds = databaseRelatedEntityIds.filter(existRelationId => {\n      return !changedInverseEntityRelationIds.find(changedRelationId => {\n        return OrmUtils.compareIds(changedRelationId, existRelationId);\n      });\n    });\n    // finally create a new junction remove operations for missing related entities\n    removedJunctionEntityIds.forEach(removedEntityRelationId => {\n      const junctionSubject = new Subject({\n        metadata: relation.junctionEntityMetadata,\n        parentSubject: subject,\n        mustBeRemoved: true,\n        identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n      });\n      this.subjects.push(junctionSubject);\n    });\n  }\n  /**\n   * Creates identifiers for junction table.\n   * Example: { postId: 1, categoryId: 2 }\n   */\n  buildJunctionIdentifier(subject, relation, relationId) {\n    const ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n    const inverseEntityMap = relation.isOwning ? relationId : subject.entity;\n    const identifier = {};\n    relation.junctionEntityMetadata.ownerColumns.forEach(column => {\n      OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n    });\n    relation.junctionEntityMetadata.inverseColumns.forEach(column => {\n      OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n    });\n    return identifier;\n  }\n}","map":{"version":3,"names":["Subject","OrmUtils","ManyToManySubjectBuilder","constructor","subjects","build","forEach","subject","entity","metadata","manyToManyRelations","relation","persistenceEnabled","buildForSubjectRelation","buildForAllRemoval","databaseEntity","relatedEntityRelationIdsInDatabase","getEntityValue","relationId","junctionSubject","junctionEntityMetadata","parentSubject","mustBeRemoved","identifier","buildJunctionIdentifier","push","databaseRelatedEntityIds","relatedEntities","Array","isArray","relatedEntity","relatedEntityRelationIdMap","inverseEntityMetadata","getEntityIdMap","relatedEntitySubject","find","relatedEntityExistInDatabase","databaseRelatedEntityRelationId","compareIds","ownerValue","isOwning","inverseValue","canBeInserted","ownerColumns","column","changeMaps","value","inverseColumns","changedInverseEntityRelationIds","undefined","removedJunctionEntityIds","filter","existRelationId","changedRelationId","removedEntityRelationId","ownerEntityMap","inverseEntityMap","mergeDeep","createValueMap","referencedColumn"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js"],"sourcesContent":["import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build() {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    }\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(subject, relation, relationId),\n                });\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject);\n            });\n        });\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    buildForSubjectRelation(subject, relation) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds = [];\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!Array.isArray(relatedEntities))\n            return;\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find((databaseRelatedEntityRelationId) => {\n                return OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity; // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject; // by example: inverseEntityMap is category from categories array here\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            this.subjects.push(junctionSubject);\n            relation.junctionEntityMetadata.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                });\n            });\n            relation.junctionEntityMetadata.inverseColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                });\n            });\n        });\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds = [];\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            if (relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter((existRelationId) => {\n            return !changedInverseEntityRelationIds.find((changedRelationId) => {\n                return OrmUtils.compareIds(changedRelationId, existRelationId);\n            });\n        });\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId),\n            });\n            this.subjects.push(junctionSubject);\n        });\n    }\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    buildJunctionIdentifier(subject, relation, relationId) {\n        const ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity;\n        const identifier = {};\n        relation.junctionEntityMetadata.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}