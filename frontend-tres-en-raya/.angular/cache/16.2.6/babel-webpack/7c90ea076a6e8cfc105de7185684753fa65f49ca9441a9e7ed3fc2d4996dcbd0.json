{"ast":null,"code":"/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    this.target = options.args.target;\n    this.propertyName = options.args.propertyName;\n    this.type = options.args.type;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Checks if entity listener is allowed to be executed on the given entity.\n   */\n  isAllowed(entity) {\n    // todo: create in entity metadata method like isInherited?\n    return this.entityMetadata.target === entity.constructor ||\n    // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n    typeof this.entityMetadata.target === \"function\" && entity.constructor.prototype instanceof this.entityMetadata.target; // todo: also need to implement entity schema inheritance\n  }\n  /**\n   * Executes listener method of the given entity.\n   */\n  execute(entity) {\n    if (!this.embeddedMetadata) return entity[this.propertyName]();\n    this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n  }\n  // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Calls embedded entity listener method no matter how nested it is.\n   */\n  callEntityEmbeddedMethod(entity, propertyPaths) {\n    const propertyPath = propertyPaths.shift();\n    if (!propertyPath || !entity[propertyPath]) return;\n    if (propertyPaths.length === 0) {\n      if (Array.isArray(entity[propertyPath])) {\n        entity[propertyPath].map(embedded => embedded[this.propertyName]());\n      } else {\n        entity[propertyPath][this.propertyName]();\n      }\n    } else {\n      if (entity[propertyPath]) this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n    }\n  }\n}","map":{"version":3,"names":["EntityListenerMetadata","constructor","options","entityMetadata","embeddedMetadata","target","args","propertyName","type","isAllowed","entity","prototype","execute","callEntityEmbeddedMethod","propertyPath","split","propertyPaths","shift","length","Array","isArray","map","embedded"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata/EntityListenerMetadata.js"],"sourcesContent":["/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.type = options.args.type;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity) {\n        // todo: create in entity metadata method like isInherited?\n        return (this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (typeof this.entityMetadata.target === \"function\" &&\n                entity.constructor.prototype instanceof\n                    this.entityMetadata.target)); // todo: also need to implement entity schema inheritance\n    }\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity) {\n        if (!this.embeddedMetadata)\n            return entity[this.propertyName]();\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    callEntityEmbeddedMethod(entity, propertyPaths) {\n        const propertyPath = propertyPaths.shift();\n        if (!propertyPath || !entity[propertyPath])\n            return;\n        if (propertyPaths.length === 0) {\n            if (Array.isArray(entity[propertyPath])) {\n                entity[propertyPath].map((embedded) => embedded[this.propertyName]());\n            }\n            else {\n                entity[propertyPath][this.propertyName]();\n            }\n        }\n        else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n        }\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,sBAAsB,CAAC;EAChC;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;IAC5C,IAAI,CAACC,gBAAgB,GAAGF,OAAO,CAACE,gBAAgB;IAChD,IAAI,CAACC,MAAM,GAAGH,OAAO,CAACI,IAAI,CAACD,MAAM;IACjC,IAAI,CAACE,YAAY,GAAGL,OAAO,CAACI,IAAI,CAACC,YAAY;IAC7C,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACI,IAAI,CAACE,IAAI;EACjC;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,SAASA,CAACC,MAAM,EAAE;IACd;IACA,OAAQ,IAAI,CAACP,cAAc,CAACE,MAAM,KAAKK,MAAM,CAACT,WAAW;IAAI;IACxD,OAAO,IAAI,CAACE,cAAc,CAACE,MAAM,KAAK,UAAU,IAC7CK,MAAM,CAACT,WAAW,CAACU,SAAS,YACxB,IAAI,CAACR,cAAc,CAACE,MAAO,CAAE,CAAC;EAC9C;EACA;AACJ;AACA;EACIO,OAAOA,CAACF,MAAM,EAAE;IACZ,IAAI,CAAC,IAAI,CAACN,gBAAgB,EACtB,OAAOM,MAAM,CAAC,IAAI,CAACH,YAAY,CAAC,CAAC,CAAC;IACtC,IAAI,CAACM,wBAAwB,CAACH,MAAM,EAAE,IAAI,CAACN,gBAAgB,CAACU,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;EACxF;EACA;EACA;EACA;EACA;AACJ;AACA;EACIF,wBAAwBA,CAACH,MAAM,EAAEM,aAAa,EAAE;IAC5C,MAAMF,YAAY,GAAGE,aAAa,CAACC,KAAK,CAAC,CAAC;IAC1C,IAAI,CAACH,YAAY,IAAI,CAACJ,MAAM,CAACI,YAAY,CAAC,EACtC;IACJ,IAAIE,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;MAC5B,IAAIC,KAAK,CAACC,OAAO,CAACV,MAAM,CAACI,YAAY,CAAC,CAAC,EAAE;QACrCJ,MAAM,CAACI,YAAY,CAAC,CAACO,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,IAAI,CAACf,YAAY,CAAC,CAAC,CAAC,CAAC;MACzE,CAAC,MACI;QACDG,MAAM,CAACI,YAAY,CAAC,CAAC,IAAI,CAACP,YAAY,CAAC,CAAC,CAAC;MAC7C;IACJ,CAAC,MACI;MACD,IAAIG,MAAM,CAACI,YAAY,CAAC,EACpB,IAAI,CAACD,wBAAwB,CAACH,MAAM,CAACI,YAAY,CAAC,EAAEE,aAAa,CAAC;IAC1E;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}