{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n  beforeMigration() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.query(`PRAGMA foreign_keys = OFF`);\n    })();\n  }\n  /**\n   * Called after migrations are run.\n   */\n  afterMigration() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.query(`PRAGMA foreign_keys = ON`);\n    })();\n  }\n  /**\n   * Executes a given SQL query.\n   */\n  query(query, parameters, useStructuredResult = false) {\n    var _this3 = this;\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    return new Promise( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (ok, fail) {\n        const databaseConnection = yield _this3.connect();\n        _this3.driver.connection.logger.logQuery(query, parameters, _this3);\n        const queryStartTime = +new Date();\n        databaseConnection.executeSql(query, parameters, raw => {\n          // log slow queries if maxQueryExecution time is set\n          const maxQueryExecutionTime = _this3.driver.options.maxQueryExecutionTime;\n          const queryEndTime = +new Date();\n          const queryExecutionTime = queryEndTime - queryStartTime;\n          if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this3.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this3);\n          const result = new QueryResult();\n          if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"rowsAffected\")) {\n            result.affected = raw.rowsAffected;\n          }\n          if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"rows\")) {\n            let records = [];\n            for (let i = 0; i < raw.rows.length; i++) {\n              records.push(raw.rows.item(i));\n            }\n            result.raw = records;\n            result.records = records;\n          }\n          // return id of inserted row, if query was insert statement.\n          if (query.substr(0, 11) === \"INSERT INTO\") {\n            result.raw = raw.insertId;\n          }\n          if (useStructuredResult) {\n            ok(result);\n          } else {\n            ok(result.raw);\n          }\n        }, err => {\n          _this3.driver.connection.logger.logQueryError(err, query, parameters, _this3);\n          fail(new QueryFailedError(query, parameters, err));\n        });\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n  parametrize(objectLiteral, startIndex = 0) {\n    return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n  }\n}","map":{"version":3,"names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","QueryResult","ReactNativeQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","_this","_asyncToGenerator","query","afterMigration","_this2","parameters","useStructuredResult","_this3","isReleased","Promise","_ref","ok","fail","databaseConnection","connect","logger","logQuery","queryStartTime","Date","executeSql","raw","maxQueryExecutionTime","options","queryEndTime","queryExecutionTime","logQuerySlow","result","hasOwnProperty","affected","rowsAffected","records","i","rows","length","push","item","substr","insertId","err","logQueryError","_x","_x2","apply","arguments","parametrize","objectLiteral","startIndex","Object","keys","map","key","index"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js"],"sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(driver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration() {\n        await this.query(`PRAGMA foreign_keys = OFF`);\n    }\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration() {\n        await this.query(`PRAGMA foreign_keys = ON`);\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    query(query, parameters, useStructuredResult = false) {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            databaseConnection.executeSql(query, parameters, (raw) => {\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime &&\n                    queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                const result = new QueryResult();\n                if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"rowsAffected\")) {\n                    result.affected = raw.rowsAffected;\n                }\n                if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"rows\")) {\n                    let records = [];\n                    for (let i = 0; i < raw.rows.length; i++) {\n                        records.push(raw.rows.item(i));\n                    }\n                    result.raw = records;\n                    result.records = records;\n                }\n                // return id of inserted row, if query was insert statement.\n                if (query.substr(0, 11) === \"INSERT INTO\") {\n                    result.raw = raw.insertId;\n                }\n                if (useStructuredResult) {\n                    ok(result);\n                }\n                else {\n                    ok(result.raw);\n                }\n            }, (err) => {\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, err));\n            });\n        });\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    parametrize(objectLiteral, startIndex = 0) {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}\n\n"],"mappings":";AAAA,SAASA,+BAA+B,QAAQ,6CAA6C;AAC7F,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,yBAAyB,QAAQ,8CAA8C;AACxF,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,WAAW,QAAQ,gCAAgC;AAC5D;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,SAASH,yBAAyB,CAAC;EAClE;EACA;EACA;EACAI,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAGD,MAAM,CAACC,UAAU;IACnC,IAAI,CAACC,WAAW,GAAG,IAAIN,WAAW,CAAC,IAAI,CAAC;EAC5C;EACA;AACJ;AACA;EACUO,eAAeA,CAAA,EAAG;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACpB,MAAMD,KAAI,CAACE,KAAK,CAAE,2BAA0B,CAAC;IAAC;EAClD;EACA;AACJ;AACA;EACUC,cAAcA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAH,iBAAA;MACnB,MAAMG,MAAI,CAACF,KAAK,CAAE,0BAAyB,CAAC;IAAC;EACjD;EACA;AACJ;AACA;EACIA,KAAKA,CAACA,KAAK,EAAEG,UAAU,EAAEC,mBAAmB,GAAG,KAAK,EAAE;IAAA,IAAAC,MAAA;IAClD,IAAI,IAAI,CAACC,UAAU,EACf,MAAM,IAAInB,+BAA+B,CAAC,CAAC;IAC/C,OAAO,IAAIoB,OAAO;MAAA,IAAAC,IAAA,GAAAT,iBAAA,CAAC,WAAOU,EAAE,EAAEC,IAAI,EAAK;QACnC,MAAMC,kBAAkB,SAASN,MAAI,CAACO,OAAO,CAAC,CAAC;QAC/CP,MAAI,CAACX,MAAM,CAACC,UAAU,CAACkB,MAAM,CAACC,QAAQ,CAACd,KAAK,EAAEG,UAAU,EAAEE,MAAI,CAAC;QAC/D,MAAMU,cAAc,GAAG,CAAC,IAAIC,IAAI,CAAC,CAAC;QAClCL,kBAAkB,CAACM,UAAU,CAACjB,KAAK,EAAEG,UAAU,EAAGe,GAAG,IAAK;UACtD;UACA,MAAMC,qBAAqB,GAAGd,MAAI,CAACX,MAAM,CAAC0B,OAAO,CAACD,qBAAqB;UACvE,MAAME,YAAY,GAAG,CAAC,IAAIL,IAAI,CAAC,CAAC;UAChC,MAAMM,kBAAkB,GAAGD,YAAY,GAAGN,cAAc;UACxD,IAAII,qBAAqB,IACrBG,kBAAkB,GAAGH,qBAAqB,EAC1Cd,MAAI,CAACX,MAAM,CAACC,UAAU,CAACkB,MAAM,CAACU,YAAY,CAACD,kBAAkB,EAAEtB,KAAK,EAAEG,UAAU,EAAEE,MAAI,CAAC;UAC3F,MAAMmB,MAAM,GAAG,IAAIjC,WAAW,CAAC,CAAC;UAChC,IAAI2B,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACO,cAAc,CAAC,cAAc,CAAC,EAAE;YAC9ED,MAAM,CAACE,QAAQ,GAAGR,GAAG,CAACS,YAAY;UACtC;UACA,IAAIT,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACO,cAAc,CAAC,MAAM,CAAC,EAAE;YACtE,IAAIG,OAAO,GAAG,EAAE;YAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,GAAG,CAACY,IAAI,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;cACtCD,OAAO,CAACI,IAAI,CAACd,GAAG,CAACY,IAAI,CAACG,IAAI,CAACJ,CAAC,CAAC,CAAC;YAClC;YACAL,MAAM,CAACN,GAAG,GAAGU,OAAO;YACpBJ,MAAM,CAACI,OAAO,GAAGA,OAAO;UAC5B;UACA;UACA,IAAI5B,KAAK,CAACkC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,aAAa,EAAE;YACvCV,MAAM,CAACN,GAAG,GAAGA,GAAG,CAACiB,QAAQ;UAC7B;UACA,IAAI/B,mBAAmB,EAAE;YACrBK,EAAE,CAACe,MAAM,CAAC;UACd,CAAC,MACI;YACDf,EAAE,CAACe,MAAM,CAACN,GAAG,CAAC;UAClB;QACJ,CAAC,EAAGkB,GAAG,IAAK;UACR/B,MAAI,CAACX,MAAM,CAACC,UAAU,CAACkB,MAAM,CAACwB,aAAa,CAACD,GAAG,EAAEpC,KAAK,EAAEG,UAAU,EAAEE,MAAI,CAAC;UACzEK,IAAI,CAAC,IAAItB,gBAAgB,CAACY,KAAK,EAAEG,UAAU,EAAEiC,GAAG,CAAC,CAAC;QACtD,CAAC,CAAC;MACN,CAAC;MAAA,iBAAAE,EAAA,EAAAC,GAAA;QAAA,OAAA/B,IAAA,CAAAgC,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;EACN;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,WAAWA,CAACC,aAAa,EAAEC,UAAU,GAAG,CAAC,EAAE;IACvC,OAAOC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC,CAACI,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAM,IAAGD,GAAI,GAAE,GAAG,IAAI,CAAC;EAC5E;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}