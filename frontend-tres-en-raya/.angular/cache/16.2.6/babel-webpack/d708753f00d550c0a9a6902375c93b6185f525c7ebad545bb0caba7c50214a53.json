{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions, maybeOptions) {\n  const options = (ObjectUtils.isObject(nameOrOptions) ? nameOrOptions : maybeOptions) || {};\n  const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n  return function (target) {\n    getMetadataArgsStorage().tables.push({\n      target: target,\n      name: name,\n      type: \"regular\",\n      orderBy: options.orderBy ? options.orderBy : undefined,\n      engine: options.engine ? options.engine : undefined,\n      database: options.database ? options.database : undefined,\n      schema: options.schema ? options.schema : undefined,\n      synchronize: options.synchronize,\n      withoutRowid: options.withoutRowid\n    });\n  };\n}","map":{"version":3,"names":["getMetadataArgsStorage","ObjectUtils","Entity","nameOrOptions","maybeOptions","options","isObject","name","target","tables","push","type","orderBy","undefined","engine","database","schema","synchronize","withoutRowid"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/decorator/entity/Entity.js"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions, maybeOptions) {\n    const options = (ObjectUtils.isObject(nameOrOptions)\n        ? nameOrOptions\n        : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid,\n        });\n    };\n}\n\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,eAAe;AACtD,SAASC,WAAW,QAAQ,wBAAwB;AACpD;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,aAAa,EAAEC,YAAY,EAAE;EAChD,MAAMC,OAAO,GAAG,CAACJ,WAAW,CAACK,QAAQ,CAACH,aAAa,CAAC,GAC9CA,aAAa,GACbC,YAAY,KAAK,CAAC,CAAC;EACzB,MAAMG,IAAI,GAAG,OAAOJ,aAAa,KAAK,QAAQ,GAAGA,aAAa,GAAGE,OAAO,CAACE,IAAI;EAC7E,OAAO,UAAUC,MAAM,EAAE;IACrBR,sBAAsB,CAAC,CAAC,CAACS,MAAM,CAACC,IAAI,CAAC;MACjCF,MAAM,EAAEA,MAAM;MACdD,IAAI,EAAEA,IAAI;MACVI,IAAI,EAAE,SAAS;MACfC,OAAO,EAAEP,OAAO,CAACO,OAAO,GAAGP,OAAO,CAACO,OAAO,GAAGC,SAAS;MACtDC,MAAM,EAAET,OAAO,CAACS,MAAM,GAAGT,OAAO,CAACS,MAAM,GAAGD,SAAS;MACnDE,QAAQ,EAAEV,OAAO,CAACU,QAAQ,GAAGV,OAAO,CAACU,QAAQ,GAAGF,SAAS;MACzDG,MAAM,EAAEX,OAAO,CAACW,MAAM,GAAGX,OAAO,CAACW,MAAM,GAAGH,SAAS;MACnDI,WAAW,EAAEZ,OAAO,CAACY,WAAW;MAChCC,YAAY,EAAEb,OAAO,CAACa;IAC1B,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}