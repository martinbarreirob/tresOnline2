{"ast":null,"code":"import { PlatformTools } from \"../platform/PlatformTools\";\nexport class AbstractLogger {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this.options = options;\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Logs query and parameters used in it.\n   */\n  logQuery(query, parameters, queryRunner) {\n    if (!this.isLogEnabledFor(\"query\")) {\n      return;\n    }\n    this.writeLog(\"query\", {\n      type: \"query\",\n      prefix: \"query\",\n      message: query,\n      format: \"sql\",\n      parameters\n    }, queryRunner);\n  }\n  /**\n   * Logs query that is failed.\n   */\n  logQueryError(error, query, parameters, queryRunner) {\n    if (!this.isLogEnabledFor(\"query-error\")) {\n      return;\n    }\n    this.writeLog(\"warn\", [{\n      type: \"query-error\",\n      prefix: \"query failed\",\n      message: query,\n      format: \"sql\",\n      parameters\n    }, {\n      type: \"query-error\",\n      prefix: \"error\",\n      message: error\n    }], queryRunner);\n  }\n  /**\n   * Logs query that is slow.\n   */\n  logQuerySlow(time, query, parameters, queryRunner) {\n    if (!this.isLogEnabledFor(\"query-slow\")) {\n      return;\n    }\n    this.writeLog(\"warn\", [{\n      type: \"query-slow\",\n      prefix: \"query is slow\",\n      message: query,\n      format: \"sql\",\n      parameters,\n      additionalInfo: {\n        time\n      }\n    }, {\n      type: \"query-slow\",\n      prefix: \"execution time\",\n      message: time\n    }], queryRunner);\n  }\n  /**\n   * Logs events from the schema build process.\n   */\n  logSchemaBuild(message, queryRunner) {\n    if (!this.isLogEnabledFor(\"schema-build\")) {\n      return;\n    }\n    this.writeLog(\"schema\", {\n      type: \"schema-build\",\n      message\n    }, queryRunner);\n  }\n  /**\n   * Logs events from the migration run process.\n   */\n  logMigration(message, queryRunner) {\n    if (this.isLogEnabledFor(\"migration\")) {\n      return;\n    }\n    this.writeLog(\"log\", {\n      type: \"migration\",\n      message\n    }, queryRunner);\n  }\n  /**\n   * Perform logging using given logger, or by default to the console.\n   * Log has its own level and message.\n   */\n  log(level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (!this.isLogEnabledFor(\"log\")) {\n          return;\n        }\n        this.writeLog(\"log\", {\n          type: \"log\",\n          message\n        }, queryRunner);\n        break;\n      case \"info\":\n        if (!this.isLogEnabledFor(\"info\")) {\n          return;\n        }\n        this.writeLog(\"info\", {\n          type: \"info\",\n          prefix: \"info\",\n          message\n        }, queryRunner);\n        break;\n      case \"warn\":\n        if (!this.isLogEnabledFor(\"warn\")) {\n          return;\n        }\n        this.writeLog(\"warn\", {\n          type: \"warn\",\n          message\n        }, queryRunner);\n        break;\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Check is logging for level or message type is enabled.\n   */\n  isLogEnabledFor(type) {\n    switch (type) {\n      case \"query\":\n        return this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1;\n      case \"error\":\n      case \"query-error\":\n        return this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1;\n      case \"query-slow\":\n        return true;\n      case \"schema\":\n      case \"schema-build\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1;\n      case \"migration\":\n        return true;\n      case \"log\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1;\n      case \"info\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1;\n      case \"warn\":\n        return this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1;\n      default:\n        return false;\n    }\n  }\n  /**\n   * Prepare and format log messages\n   */\n  prepareLogMessages(logMessage, options) {\n    options = {\n      ...{\n        addColonToPrefix: true,\n        appendParameterAsComment: true,\n        highlightSql: true\n      },\n      ...options\n    };\n    const messages = Array.isArray(logMessage) ? logMessage : [logMessage];\n    for (let message of messages) {\n      if (typeof message !== \"object\") {\n        message = {\n          message\n        };\n      }\n      if (message.format === \"sql\") {\n        let sql = String(message.message);\n        if (options.appendParameterAsComment && message.parameters && message.parameters.length) {\n          sql += ` -- PARAMETERS: ${this.stringifyParams(message.parameters)}`;\n        }\n        if (options.highlightSql) {\n          sql = PlatformTools.highlightSql(sql);\n        }\n        message.message = sql;\n      }\n      if (options.addColonToPrefix && message.prefix) {\n        message.prefix += \":\";\n      }\n    }\n    return messages;\n  }\n  /**\n   * Converts parameters to a string.\n   * Sometimes parameters can have circular objects and therefor we are handle this case too.\n   */\n  stringifyParams(parameters) {\n    try {\n      return JSON.stringify(parameters);\n    } catch (error) {\n      // most probably circular objects in parameters\n      return parameters;\n    }\n  }\n}","map":{"version":3,"names":["PlatformTools","AbstractLogger","constructor","options","logQuery","query","parameters","queryRunner","isLogEnabledFor","writeLog","type","prefix","message","format","logQueryError","error","logQuerySlow","time","additionalInfo","logSchemaBuild","logMigration","log","level","Array","isArray","indexOf","prepareLogMessages","logMessage","addColonToPrefix","appendParameterAsComment","highlightSql","messages","sql","String","length","stringifyParams","JSON","stringify"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/logger/AbstractLogger.js"],"sourcesContent":["import { PlatformTools } from \"../platform/PlatformTools\";\nexport class AbstractLogger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query, parameters, queryRunner) {\n        if (!this.isLogEnabledFor(\"query\")) {\n            return;\n        }\n        this.writeLog(\"query\", {\n            type: \"query\",\n            prefix: \"query\",\n            message: query,\n            format: \"sql\",\n            parameters,\n        }, queryRunner);\n    }\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error, query, parameters, queryRunner) {\n        if (!this.isLogEnabledFor(\"query-error\")) {\n            return;\n        }\n        this.writeLog(\"warn\", [\n            {\n                type: \"query-error\",\n                prefix: \"query failed\",\n                message: query,\n                format: \"sql\",\n                parameters,\n            },\n            {\n                type: \"query-error\",\n                prefix: \"error\",\n                message: error,\n            },\n        ], queryRunner);\n    }\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time, query, parameters, queryRunner) {\n        if (!this.isLogEnabledFor(\"query-slow\")) {\n            return;\n        }\n        this.writeLog(\"warn\", [\n            {\n                type: \"query-slow\",\n                prefix: \"query is slow\",\n                message: query,\n                format: \"sql\",\n                parameters,\n                additionalInfo: {\n                    time,\n                },\n            },\n            {\n                type: \"query-slow\",\n                prefix: \"execution time\",\n                message: time,\n            },\n        ], queryRunner);\n    }\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message, queryRunner) {\n        if (!this.isLogEnabledFor(\"schema-build\")) {\n            return;\n        }\n        this.writeLog(\"schema\", {\n            type: \"schema-build\",\n            message,\n        }, queryRunner);\n    }\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message, queryRunner) {\n        if (this.isLogEnabledFor(\"migration\")) {\n            return;\n        }\n        this.writeLog(\"log\", {\n            type: \"migration\",\n            message,\n        }, queryRunner);\n    }\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level, message, queryRunner) {\n        switch (level) {\n            case \"log\":\n                if (!this.isLogEnabledFor(\"log\")) {\n                    return;\n                }\n                this.writeLog(\"log\", {\n                    type: \"log\",\n                    message,\n                }, queryRunner);\n                break;\n            case \"info\":\n                if (!this.isLogEnabledFor(\"info\")) {\n                    return;\n                }\n                this.writeLog(\"info\", {\n                    type: \"info\",\n                    prefix: \"info\",\n                    message,\n                }, queryRunner);\n                break;\n            case \"warn\":\n                if (!this.isLogEnabledFor(\"warn\")) {\n                    return;\n                }\n                this.writeLog(\"warn\", {\n                    type: \"warn\",\n                    message,\n                }, queryRunner);\n                break;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Check is logging for level or message type is enabled.\n     */\n    isLogEnabledFor(type) {\n        switch (type) {\n            case \"query\":\n                return (this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"query\") !== -1));\n            case \"error\":\n            case \"query-error\":\n                return (this.options === \"all\" ||\n                    this.options === true ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"error\") !== -1));\n            case \"query-slow\":\n                return true;\n            case \"schema\":\n            case \"schema-build\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"schema\") !== -1));\n            case \"migration\":\n                return true;\n            case \"log\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1));\n            case \"info\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1));\n            case \"warn\":\n                return (this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1));\n            default:\n                return false;\n        }\n    }\n    /**\n     * Prepare and format log messages\n     */\n    prepareLogMessages(logMessage, options) {\n        options = {\n            ...{\n                addColonToPrefix: true,\n                appendParameterAsComment: true,\n                highlightSql: true,\n            },\n            ...options,\n        };\n        const messages = Array.isArray(logMessage) ? logMessage : [logMessage];\n        for (let message of messages) {\n            if (typeof message !== \"object\") {\n                message = {\n                    message,\n                };\n            }\n            if (message.format === \"sql\") {\n                let sql = String(message.message);\n                if (options.appendParameterAsComment &&\n                    message.parameters &&\n                    message.parameters.length) {\n                    sql += ` -- PARAMETERS: ${this.stringifyParams(message.parameters)}`;\n                }\n                if (options.highlightSql) {\n                    sql = PlatformTools.highlightSql(sql);\n                }\n                message.message = sql;\n            }\n            if (options.addColonToPrefix && message.prefix) {\n                message.prefix += \":\";\n            }\n        }\n        return messages;\n    }\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    stringifyParams(parameters) {\n        try {\n            return JSON.stringify(parameters);\n        }\n        catch (error) {\n            // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n}\n\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,2BAA2B;AACzD,OAAO,MAAMC,cAAc,CAAC;EACxB;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,QAAQA,CAACC,KAAK,EAAEC,UAAU,EAAEC,WAAW,EAAE;IACrC,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,OAAO,CAAC,EAAE;MAChC;IACJ;IACA,IAAI,CAACC,QAAQ,CAAC,OAAO,EAAE;MACnBC,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAEP,KAAK;MACdQ,MAAM,EAAE,KAAK;MACbP;IACJ,CAAC,EAAEC,WAAW,CAAC;EACnB;EACA;AACJ;AACA;EACIO,aAAaA,CAACC,KAAK,EAAEV,KAAK,EAAEC,UAAU,EAAEC,WAAW,EAAE;IACjD,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,aAAa,CAAC,EAAE;MACtC;IACJ;IACA,IAAI,CAACC,QAAQ,CAAC,MAAM,EAAE,CAClB;MACIC,IAAI,EAAE,aAAa;MACnBC,MAAM,EAAE,cAAc;MACtBC,OAAO,EAAEP,KAAK;MACdQ,MAAM,EAAE,KAAK;MACbP;IACJ,CAAC,EACD;MACII,IAAI,EAAE,aAAa;MACnBC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAEG;IACb,CAAC,CACJ,EAAER,WAAW,CAAC;EACnB;EACA;AACJ;AACA;EACIS,YAAYA,CAACC,IAAI,EAAEZ,KAAK,EAAEC,UAAU,EAAEC,WAAW,EAAE;IAC/C,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,YAAY,CAAC,EAAE;MACrC;IACJ;IACA,IAAI,CAACC,QAAQ,CAAC,MAAM,EAAE,CAClB;MACIC,IAAI,EAAE,YAAY;MAClBC,MAAM,EAAE,eAAe;MACvBC,OAAO,EAAEP,KAAK;MACdQ,MAAM,EAAE,KAAK;MACbP,UAAU;MACVY,cAAc,EAAE;QACZD;MACJ;IACJ,CAAC,EACD;MACIP,IAAI,EAAE,YAAY;MAClBC,MAAM,EAAE,gBAAgB;MACxBC,OAAO,EAAEK;IACb,CAAC,CACJ,EAAEV,WAAW,CAAC;EACnB;EACA;AACJ;AACA;EACIY,cAAcA,CAACP,OAAO,EAAEL,WAAW,EAAE;IACjC,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,cAAc,CAAC,EAAE;MACvC;IACJ;IACA,IAAI,CAACC,QAAQ,CAAC,QAAQ,EAAE;MACpBC,IAAI,EAAE,cAAc;MACpBE;IACJ,CAAC,EAAEL,WAAW,CAAC;EACnB;EACA;AACJ;AACA;EACIa,YAAYA,CAACR,OAAO,EAAEL,WAAW,EAAE;IAC/B,IAAI,IAAI,CAACC,eAAe,CAAC,WAAW,CAAC,EAAE;MACnC;IACJ;IACA,IAAI,CAACC,QAAQ,CAAC,KAAK,EAAE;MACjBC,IAAI,EAAE,WAAW;MACjBE;IACJ,CAAC,EAAEL,WAAW,CAAC;EACnB;EACA;AACJ;AACA;AACA;EACIc,GAAGA,CAACC,KAAK,EAAEV,OAAO,EAAEL,WAAW,EAAE;IAC7B,QAAQe,KAAK;MACT,KAAK,KAAK;QACN,IAAI,CAAC,IAAI,CAACd,eAAe,CAAC,KAAK,CAAC,EAAE;UAC9B;QACJ;QACA,IAAI,CAACC,QAAQ,CAAC,KAAK,EAAE;UACjBC,IAAI,EAAE,KAAK;UACXE;QACJ,CAAC,EAAEL,WAAW,CAAC;QACf;MACJ,KAAK,MAAM;QACP,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,MAAM,CAAC,EAAE;UAC/B;QACJ;QACA,IAAI,CAACC,QAAQ,CAAC,MAAM,EAAE;UAClBC,IAAI,EAAE,MAAM;UACZC,MAAM,EAAE,MAAM;UACdC;QACJ,CAAC,EAAEL,WAAW,CAAC;QACf;MACJ,KAAK,MAAM;QACP,IAAI,CAAC,IAAI,CAACC,eAAe,CAAC,MAAM,CAAC,EAAE;UAC/B;QACJ;QACA,IAAI,CAACC,QAAQ,CAAC,MAAM,EAAE;UAClBC,IAAI,EAAE,MAAM;UACZE;QACJ,CAAC,EAAEL,WAAW,CAAC;QACf;IACR;EACJ;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,eAAeA,CAACE,IAAI,EAAE;IAClB,QAAQA,IAAI;MACR,KAAK,OAAO;QACR,OAAQ,IAAI,CAACP,OAAO,KAAK,KAAK,IAC1B,IAAI,CAACA,OAAO,KAAK,IAAI,IACpBoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,OAAO,CAAC,IACxB,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE;MACjD,KAAK,OAAO;MACZ,KAAK,aAAa;QACd,OAAQ,IAAI,CAACtB,OAAO,KAAK,KAAK,IAC1B,IAAI,CAACA,OAAO,KAAK,IAAI,IACpBoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,OAAO,CAAC,IACxB,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE;MACjD,KAAK,YAAY;QACb,OAAO,IAAI;MACf,KAAK,QAAQ;MACb,KAAK,cAAc;QACf,OAAQ,IAAI,CAACtB,OAAO,KAAK,KAAK,IACzBoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,OAAO,CAAC,IACxB,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAE;MAClD,KAAK,WAAW;QACZ,OAAO,IAAI;MACf,KAAK,KAAK;QACN,OAAQ,IAAI,CAACtB,OAAO,KAAK,KAAK,IACzBoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,OAAO,CAAC,IACxB,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAE;MAC/C,KAAK,MAAM;QACP,OAAQ,IAAI,CAACtB,OAAO,KAAK,KAAK,IACzBoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,OAAO,CAAC,IACxB,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE;MAChD,KAAK,MAAM;QACP,OAAQ,IAAI,CAACtB,OAAO,KAAK,KAAK,IACzBoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,OAAO,CAAC,IACxB,IAAI,CAACA,OAAO,CAACsB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE;MAChD;QACI,OAAO,KAAK;IACpB;EACJ;EACA;AACJ;AACA;EACIC,kBAAkBA,CAACC,UAAU,EAAExB,OAAO,EAAE;IACpCA,OAAO,GAAG;MACN,GAAG;QACCyB,gBAAgB,EAAE,IAAI;QACtBC,wBAAwB,EAAE,IAAI;QAC9BC,YAAY,EAAE;MAClB,CAAC;MACD,GAAG3B;IACP,CAAC;IACD,MAAM4B,QAAQ,GAAGR,KAAK,CAACC,OAAO,CAACG,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;IACtE,KAAK,IAAIf,OAAO,IAAImB,QAAQ,EAAE;MAC1B,IAAI,OAAOnB,OAAO,KAAK,QAAQ,EAAE;QAC7BA,OAAO,GAAG;UACNA;QACJ,CAAC;MACL;MACA,IAAIA,OAAO,CAACC,MAAM,KAAK,KAAK,EAAE;QAC1B,IAAImB,GAAG,GAAGC,MAAM,CAACrB,OAAO,CAACA,OAAO,CAAC;QACjC,IAAIT,OAAO,CAAC0B,wBAAwB,IAChCjB,OAAO,CAACN,UAAU,IAClBM,OAAO,CAACN,UAAU,CAAC4B,MAAM,EAAE;UAC3BF,GAAG,IAAK,mBAAkB,IAAI,CAACG,eAAe,CAACvB,OAAO,CAACN,UAAU,CAAE,EAAC;QACxE;QACA,IAAIH,OAAO,CAAC2B,YAAY,EAAE;UACtBE,GAAG,GAAGhC,aAAa,CAAC8B,YAAY,CAACE,GAAG,CAAC;QACzC;QACApB,OAAO,CAACA,OAAO,GAAGoB,GAAG;MACzB;MACA,IAAI7B,OAAO,CAACyB,gBAAgB,IAAIhB,OAAO,CAACD,MAAM,EAAE;QAC5CC,OAAO,CAACD,MAAM,IAAI,GAAG;MACzB;IACJ;IACA,OAAOoB,QAAQ;EACnB;EACA;AACJ;AACA;AACA;EACII,eAAeA,CAAC7B,UAAU,EAAE;IACxB,IAAI;MACA,OAAO8B,IAAI,CAACC,SAAS,CAAC/B,UAAU,CAAC;IACrC,CAAC,CACD,OAAOS,KAAK,EAAE;MACV;MACA,OAAOT,UAAU;IACrB;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}