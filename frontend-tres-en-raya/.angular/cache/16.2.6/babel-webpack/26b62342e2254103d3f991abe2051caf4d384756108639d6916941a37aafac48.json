{"ast":null,"code":"import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\";\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy {\n  constructor() {\n    this.nestedSetColumnNames = {\n      left: \"nsleft\",\n      right: \"nsright\"\n    };\n    this.materializedPathColumnName = \"mpath\";\n  }\n  getTableName(tableOrName) {\n    if (typeof tableOrName !== \"string\") {\n      tableOrName = tableOrName.name;\n    }\n    return tableOrName.split(\".\").pop();\n  }\n  /**\n   * Normalizes table name.\n   *\n   * @param targetName Name of the target entity that can be used to generate a table name.\n   * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n   */\n  tableName(targetName, userSpecifiedName) {\n    return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n  }\n  /**\n   * Creates a table name for a junction table of a closure table.\n   *\n   * @param originalClosureTableName Name of the closure table which owns this junction table.\n   */\n  closureJunctionTableName(originalClosureTableName) {\n    return originalClosureTableName + \"_closure\";\n  }\n  columnName(propertyName, customName, embeddedPrefixes) {\n    const name = customName || propertyName;\n    if (embeddedPrefixes.length) return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n    return name;\n  }\n  relationName(propertyName) {\n    return propertyName;\n  }\n  primaryKeyName(tableOrName, columnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n  uniqueConstraintName(tableOrName, columnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n  relationConstraintName(tableOrName, columnNames, where) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    if (where) key += `_${where}`;\n    return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n  }\n  defaultConstraintName(tableOrName, columnName) {\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${columnName}`;\n    return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n  foreignKeyName(tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n  indexName(tableOrName, columnNames, where) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    if (where) key += `_${where}`;\n    return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n  }\n  checkConstraintName(tableOrName, expression, isEnum) {\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${expression}`;\n    const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n    return isEnum ? `${name}_ENUM` : name;\n  }\n  exclusionConstraintName(tableOrName, expression) {\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${expression}`;\n    return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n  }\n  joinColumnName(relationName, referencedColumnName) {\n    return camelCase(relationName + \"_\" + referencedColumnName);\n  }\n  joinTableName(firstTableName, secondTableName, firstPropertyName, secondPropertyName) {\n    return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n  }\n  joinTableColumnDuplicationPrefix(columnName, index) {\n    return columnName + \"_\" + index;\n  }\n  joinTableColumnName(tableName, propertyName, columnName) {\n    return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n  }\n  joinTableInverseColumnName(tableName, propertyName, columnName) {\n    return this.joinTableColumnName(tableName, propertyName, columnName);\n  }\n  /**\n   * Adds globally set prefix to the table name.\n   * This method is executed no matter if prefix was set or not.\n   * Table name is either user's given table name, either name generated from entity target.\n   * Note that table name comes here already normalized by #tableName method.\n   */\n  prefixTableName(prefix, tableName) {\n    return prefix + tableName;\n  }\n  eagerJoinRelationAlias(alias, propertyPath) {\n    return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n  }\n}","map":{"version":3,"names":["RandomGenerator","camelCase","snakeCase","titleCase","DefaultNamingStrategy","constructor","nestedSetColumnNames","left","right","materializedPathColumnName","getTableName","tableOrName","name","split","pop","tableName","targetName","userSpecifiedName","closureJunctionTableName","originalClosureTableName","columnName","propertyName","customName","embeddedPrefixes","length","join","relationName","primaryKeyName","columnNames","clonedColumnNames","sort","replacedTableName","replace","key","sha1","substr","uniqueConstraintName","relationConstraintName","where","defaultConstraintName","foreignKeyName","_referencedTablePath","_referencedColumnNames","indexName","checkConstraintName","expression","isEnum","exclusionConstraintName","joinColumnName","referencedColumnName","joinTableName","firstTableName","secondTableName","firstPropertyName","secondPropertyName","joinTableColumnDuplicationPrefix","index","joinTableColumnName","joinTableInverseColumnName","prefixTableName","prefix","eagerJoinRelationAlias","alias","propertyPath"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js"],"sourcesContent":["import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\";\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy {\n    constructor() {\n        this.nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" };\n        this.materializedPathColumnName = \"mpath\";\n    }\n    getTableName(tableOrName) {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name;\n        }\n        return tableOrName.split(\".\").pop();\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName, userSpecifiedName) {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    }\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName) {\n        return originalClosureTableName + \"_closure\";\n    }\n    columnName(propertyName, customName, embeddedPrefixes) {\n        const name = customName || propertyName;\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n        return name;\n    }\n    relationName(propertyName) {\n        return propertyName;\n    }\n    primaryKeyName(tableOrName, columnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    uniqueConstraintName(tableOrName, columnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    relationConstraintName(tableOrName, columnNames, where) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n    defaultConstraintName(tableOrName, columnName) {\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${columnName}`;\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    foreignKeyName(tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n    indexName(tableOrName, columnNames, where) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n    checkConstraintName(tableOrName, expression, isEnum) {\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n        return isEnum ? `${name}_ENUM` : name;\n    }\n    exclusionConstraintName(tableOrName, expression) {\n        const tableName = this.getTableName(tableOrName);\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n    joinColumnName(relationName, referencedColumnName) {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    }\n    joinTableName(firstTableName, secondTableName, firstPropertyName, secondPropertyName) {\n        return snakeCase(firstTableName +\n            \"_\" +\n            firstPropertyName.replace(/\\./gi, \"_\") +\n            \"_\" +\n            secondTableName);\n    }\n    joinTableColumnDuplicationPrefix(columnName, index) {\n        return columnName + \"_\" + index;\n    }\n    joinTableColumnName(tableName, propertyName, columnName) {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    }\n    joinTableInverseColumnName(tableName, propertyName, columnName) {\n        return this.joinTableColumnName(tableName, propertyName, columnName);\n    }\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix, tableName) {\n        return prefix + tableName;\n    }\n    eagerJoinRelationAlias(alias, propertyPath) {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}