{"ast":null,"code":"import { OrmUtils } from \"../util/OrmUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"Subject\");\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    this.identifier = undefined;\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    this.entityWithFulfilledIds = undefined;\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    this.databaseEntityLoaded = false;\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    this.changeMaps = [];\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    this.canBeInserted = false;\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    this.canBeUpdated = false;\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    this.mustBeRemoved = false;\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    this.canBeSoftRemoved = false;\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    this.canBeRecovered = false;\n    /**\n     * Relations updated by the change maps.\n     */\n    this.updatedRelationMaps = [];\n    /**\n     * List of updated columns\n     */\n    this.diffColumns = [];\n    /**\n     * List of updated relations\n     */\n    this.diffRelations = [];\n    this.metadata = options.metadata;\n    this.entity = options.entity;\n    this.parentSubject = options.parentSubject;\n    if (options.canBeInserted !== undefined) this.canBeInserted = options.canBeInserted;\n    if (options.canBeUpdated !== undefined) this.canBeUpdated = options.canBeUpdated;\n    if (options.mustBeRemoved !== undefined) this.mustBeRemoved = options.mustBeRemoved;\n    if (options.canBeSoftRemoved !== undefined) this.canBeSoftRemoved = options.canBeSoftRemoved;\n    if (options.canBeRecovered !== undefined) this.canBeRecovered = options.canBeRecovered;\n    if (options.identifier !== undefined) this.identifier = options.identifier;\n    if (options.changeMaps !== undefined) this.changeMaps.push(...options.changeMaps);\n    this.recompute();\n  }\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n  /**\n   * Checks if this subject must be inserted into the database.\n   * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n   * and if it does not have database entity set.\n   */\n  get mustBeInserted() {\n    return this.canBeInserted && !this.databaseEntity;\n  }\n  /**\n   * Checks if this subject must be updated into the database.\n   * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n   * and if it does have differentiated columns or relations.\n   */\n  get mustBeUpdated() {\n    return this.canBeUpdated && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity) &&\n    // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n    this.changeMaps.length > 0;\n  }\n  /**\n   * Checks if this subject must be soft-removed into the database.\n   * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n   * and if it does have differentiated columns or relations.\n   */\n  get mustBeSoftRemoved() {\n    return this.canBeSoftRemoved && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity);\n  }\n  /**\n   * Checks if this subject must be recovered into the database.\n   * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n   * and if it does have differentiated columns or relations.\n   */\n  get mustBeRecovered() {\n    return this.canBeRecovered && this.identifier && (this.databaseEntityLoaded === false || this.databaseEntityLoaded && this.databaseEntity);\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates a value set needs to be inserted / updated in the database.\n   * Value set is based on the entity and change maps of the subject.\n   * Important note: this method pops data from this subject's change maps.\n   */\n  createValueSetAndPopChangeMap() {\n    const changeMapsWithoutValues = [];\n    const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n      let value = changeMap.value;\n      if (InstanceChecker.isSubject(value)) {\n        // referenced columns can refer on values both which were just inserted and which were present in the model\n        // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n        // so, here we check if we have a value set then we simply use it as value to get our reference column values\n        // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n        value = value.insertedValueSet ? value.insertedValueSet : value.entity;\n      }\n      // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n      let valueMap;\n      if (this.metadata.isJunction && changeMap.column) {\n        valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));\n      } else if (changeMap.column) {\n        valueMap = changeMap.column.createValueMap(value);\n      } else if (changeMap.relation) {\n        // value can be a related object, for example: post.question = { id: 1 }\n        // or value can be a null or direct relation id, e.g. post.question = 1\n        // if its a direction relation id then we just set it to the valueMap,\n        // however if its an object then we need to extract its relation id map and set it to the valueMap\n        if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n          // get relation id, e.g. referenced column name and its value,\n          // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n          const relationId = changeMap.relation.getRelationIdMap(value);\n          // but relation id can be empty, for example in the case when you insert a new post with category\n          // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n          // this means we need to insert post without question id and update post's questionId once question be inserted\n          // that's why we create a new changeMap operation for future updation of the post entity\n          if (relationId === undefined) {\n            changeMapsWithoutValues.push(changeMap);\n            this.canBeUpdated = true;\n            return updateMap;\n          }\n          valueMap = changeMap.relation.createValueMap(relationId);\n          this.updatedRelationMaps.push({\n            relation: changeMap.relation,\n            value: relationId\n          });\n        } else {\n          // value can be \"null\" or direct relation id here\n          valueMap = changeMap.relation.createValueMap(value);\n          this.updatedRelationMaps.push({\n            relation: changeMap.relation,\n            value: value\n          });\n        }\n      }\n      OrmUtils.mergeDeep(updateMap, valueMap);\n      return updateMap;\n    }, {});\n    this.changeMaps = changeMapsWithoutValues;\n    return changeSet;\n  }\n  /**\n   * Recomputes entityWithFulfilledIds and identifier when entity changes.\n   */\n  recompute() {\n    if (this.entity) {\n      this.entityWithFulfilledIds = Object.assign({}, this.entity);\n      if (this.parentSubject) {\n        this.metadata.primaryColumns.forEach(primaryColumn => {\n          if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === this.parentSubject.metadata) {\n            const value = primaryColumn.referencedColumn.getEntityValue(this.parentSubject.entity);\n            primaryColumn.setEntityValue(this.entityWithFulfilledIds, value);\n          }\n        });\n      }\n      this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n    } else if (this.databaseEntity) {\n      this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n    }\n  }\n}","map":{"version":3,"names":["OrmUtils","ObjectUtils","InstanceChecker","Subject","constructor","options","Symbol","for","identifier","undefined","entityWithFulfilledIds","databaseEntityLoaded","changeMaps","canBeInserted","canBeUpdated","mustBeRemoved","canBeSoftRemoved","canBeRecovered","updatedRelationMaps","diffColumns","diffRelations","metadata","entity","parentSubject","push","recompute","mustBeInserted","databaseEntity","mustBeUpdated","length","mustBeSoftRemoved","mustBeRecovered","createValueSetAndPopChangeMap","changeMapsWithoutValues","changeSet","reduce","updateMap","changeMap","value","isSubject","insertedValueSet","valueMap","isJunction","column","createValueMap","referencedColumn","getEntityValue","relation","isObject","Buffer","isBuffer","relationId","getRelationIdMap","mergeDeep","Object","assign","primaryColumns","forEach","primaryColumn","relationMetadata","inverseEntityMetadata","setEntityValue","getEntityIdMap"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/persistence/Subject.js"],"sourcesContent":["import { OrmUtils } from \"../util/OrmUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(options) {\n        this[\"@instanceof\"] = Symbol.for(\"Subject\");\n        /**\n         * Subject identifier.\n         * This identifier is not limited to table entity primary columns.\n         * This can be entity id or ids as well as some unique entity properties, like name or title.\n         * Insert / Update / Remove operation will be executed by a given identifier.\n         */\n        this.identifier = undefined;\n        /**\n         * Copy of entity but with relational ids fulfilled.\n         */\n        this.entityWithFulfilledIds = undefined;\n        /**\n         * Indicates if database entity was loaded.\n         * No matter if it was found or not, it indicates the fact of loading.\n         */\n        this.databaseEntityLoaded = false;\n        /**\n         * Changes needs to be applied in the database for the given subject.\n         */\n        this.changeMaps = [];\n        /**\n         * Indicates if this subject can be inserted into the database.\n         * This means that this subject either is newly persisted, either can be inserted by cascades.\n         */\n        this.canBeInserted = false;\n        /**\n         * Indicates if this subject can be updated in the database.\n         * This means that this subject either was persisted, either can be updated by cascades.\n         */\n        this.canBeUpdated = false;\n        /**\n         * Indicates if this subject MUST be removed from the database.\n         * This means that this subject either was removed, either was removed by cascades.\n         */\n        this.mustBeRemoved = false;\n        /**\n         * Indicates if this subject can be soft-removed from the database.\n         * This means that this subject either was soft-removed, either was soft-removed by cascades.\n         */\n        this.canBeSoftRemoved = false;\n        /**\n         * Indicates if this subject can be recovered from the database.\n         * This means that this subject either was recovered, either was recovered by cascades.\n         */\n        this.canBeRecovered = false;\n        /**\n         * Relations updated by the change maps.\n         */\n        this.updatedRelationMaps = [];\n        /**\n         * List of updated columns\n         */\n        this.diffColumns = [];\n        /**\n         * List of updated relations\n         */\n        this.diffRelations = [];\n        this.metadata = options.metadata;\n        this.entity = options.entity;\n        this.parentSubject = options.parentSubject;\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted;\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated;\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved;\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved;\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered;\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier;\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps);\n        this.recompute();\n    }\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity;\n    }\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            this.changeMaps.length > 0);\n    }\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)));\n    }\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)));\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap() {\n        const changeMapsWithoutValues = [];\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value;\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity;\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n            let valueMap;\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));\n            }\n            else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value);\n            }\n            else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId = changeMap.relation.getRelationIdMap(value);\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap);\n                        this.canBeUpdated = true;\n                        return updateMap;\n                    }\n                    valueMap = changeMap.relation.createValueMap(relationId);\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    });\n                }\n                else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation.createValueMap(value);\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    });\n                }\n            }\n            OrmUtils.mergeDeep(updateMap, valueMap);\n            return updateMap;\n        }, {});\n        this.changeMaps = changeMapsWithoutValues;\n        return changeSet;\n    }\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute() {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity);\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject.metadata) {\n                        const value = primaryColumn.referencedColumn.getEntityValue(this.parentSubject.entity);\n                        primaryColumn.setEntityValue(this.entityWithFulfilledIds, value);\n                    }\n                });\n            }\n            this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n        }\n        else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}