{"ast":null,"code":"/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Array of columns of this foreign key.\n     */\n    this.columns = [];\n    /**\n     * Array of referenced columns.\n     */\n    this.referencedColumns = [];\n    /**\n     * Gets array of column names.\n     */\n    this.columnNames = [];\n    /**\n     * Gets array of referenced column names.\n     */\n    this.referencedColumnNames = [];\n    this.entityMetadata = options.entityMetadata;\n    this.referencedEntityMetadata = options.referencedEntityMetadata;\n    this.columns = options.columns;\n    this.referencedColumns = options.referencedColumns;\n    this.onDelete = options.onDelete || \"NO ACTION\";\n    this.onUpdate = options.onUpdate || \"NO ACTION\";\n    this.deferrable = options.deferrable;\n    this.givenName = options.name;\n    if (options.namingStrategy) this.build(options.namingStrategy);\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Builds some depend foreign key properties.\n   * Must be called after all entity metadatas and their columns are built.\n   */\n  build(namingStrategy) {\n    this.columnNames = this.columns.map(column => column.databaseName);\n    this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n    this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n    this.name = this.givenName ? this.givenName : namingStrategy.foreignKeyName(this.entityMetadata.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\n  }\n}","map":{"version":3,"names":["ForeignKeyMetadata","constructor","options","columns","referencedColumns","columnNames","referencedColumnNames","entityMetadata","referencedEntityMetadata","onDelete","onUpdate","deferrable","givenName","name","namingStrategy","build","map","column","databaseName","referencedTablePath","tablePath","foreignKeyName","tableName"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js"],"sourcesContent":["/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Array of columns of this foreign key.\n         */\n        this.columns = [];\n        /**\n         * Array of referenced columns.\n         */\n        this.referencedColumns = [];\n        /**\n         * Gets array of column names.\n         */\n        this.columnNames = [];\n        /**\n         * Gets array of referenced column names.\n         */\n        this.referencedColumnNames = [];\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete || \"NO ACTION\";\n        this.onUpdate = options.onUpdate || \"NO ACTION\";\n        this.deferrable = options.deferrable;\n        this.givenName = options.name;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy) {\n        this.columnNames = this.columns.map((column) => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map((column) => column.databaseName);\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.foreignKeyName(this.entityMetadata.tableName, this.columnNames, this.referencedEntityMetadata.tableName, this.referencedColumnNames);\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,CAAC;EAC5B;EACA;EACA;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB;AACR;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB;AACR;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,EAAE;IAC/B,IAAI,CAACC,cAAc,GAAGL,OAAO,CAACK,cAAc;IAC5C,IAAI,CAACC,wBAAwB,GAAGN,OAAO,CAACM,wBAAwB;IAChE,IAAI,CAACL,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC9B,IAAI,CAACC,iBAAiB,GAAGF,OAAO,CAACE,iBAAiB;IAClD,IAAI,CAACK,QAAQ,GAAGP,OAAO,CAACO,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAACC,QAAQ,GAAGR,OAAO,CAACQ,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAACC,UAAU,GAAGT,OAAO,CAACS,UAAU;IACpC,IAAI,CAACC,SAAS,GAAGV,OAAO,CAACW,IAAI;IAC7B,IAAIX,OAAO,CAACY,cAAc,EACtB,IAAI,CAACC,KAAK,CAACb,OAAO,CAACY,cAAc,CAAC;EAC1C;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAACD,cAAc,EAAE;IAClB,IAAI,CAACT,WAAW,GAAG,IAAI,CAACF,OAAO,CAACa,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,YAAY,CAAC;IACpE,IAAI,CAACZ,qBAAqB,GAAG,IAAI,CAACF,iBAAiB,CAACY,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,YAAY,CAAC;IACxF,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACX,wBAAwB,CAACY,SAAS;IAClE,IAAI,CAACP,IAAI,GAAG,IAAI,CAACD,SAAS,GACpB,IAAI,CAACA,SAAS,GACdE,cAAc,CAACO,cAAc,CAAC,IAAI,CAACd,cAAc,CAACe,SAAS,EAAE,IAAI,CAACjB,WAAW,EAAE,IAAI,CAACG,wBAAwB,CAACc,SAAS,EAAE,IAAI,CAAChB,qBAAqB,CAAC;EAC7J;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}