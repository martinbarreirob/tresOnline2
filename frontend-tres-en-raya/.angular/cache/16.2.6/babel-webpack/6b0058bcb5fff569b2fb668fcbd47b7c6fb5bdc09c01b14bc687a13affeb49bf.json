{"ast":null,"code":"/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n  /**\n   * Gets global variable where global stuff can be stored.\n   */\n  static getGlobalVariable() {\n    if (typeof window !== \"undefined\") {\n      return window;\n    } else {\n      // NativeScript uses global, not window\n      return global;\n    }\n  }\n  /**\n   * Loads (\"require\"-s) given file or package.\n   * This operation only supports on node platform\n   */\n  static load(name) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n    return \"\";\n  }\n  /**\n   * Normalizes given path. Does \"path.normalize\".\n   */\n  static pathNormalize(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Gets file extension. Does \"path.extname\".\n   */\n  static pathExtname(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Resolved given path. Does \"path.resolve\".\n   */\n  static pathResolve(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Synchronously checks if file exist. Does \"fs.existsSync\".\n   */\n  static fileExist(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n    return false;\n  }\n  static dotenv(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n  }\n  /**\n   * Gets environment variable.\n   */\n  static getEnvVariable(name) {\n    // if (this.type === \"browser\")\n    //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n    return undefined;\n  }\n  static readFileSync(filename) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n    return null;\n  }\n  static appendFileSync(filename, data) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n  }\n  static writeFile(path, data) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n    return Promise.reject(null);\n  }\n  /**\n   * Highlights sql string to be print in the console.\n   */\n  static highlightSql(sql) {\n    return sql;\n  }\n  /**\n   * Highlights json string to be print in the console.\n   */\n  static highlightJson(json) {\n    return json;\n  }\n  /**\n   * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n   */\n  static logInfo(prefix, info) {\n    console.info(prefix + \" \", info);\n  }\n  static logError(prefix, error) {\n    console.error(prefix + \" \", error);\n  }\n  static logWarn(prefix, warning) {\n    console.warn(prefix + \" \", warning);\n  }\n  static log(message) {\n    console.log(message);\n  }\n  static warn(message) {\n    return message;\n  }\n}\n/**\n * Type of the currently running platform.\n */\nPlatformTools.type = \"browser\";\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\nexport class Readable {}\nexport class Writable {}\nif (typeof window !== \"undefined\" && typeof require !== \"undefined\") {\n  window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n  global.Buffer = require(\"buffer/\").Buffer;\n}","map":{"version":3,"names":["PlatformTools","getGlobalVariable","window","global","load","name","type","Error","pathNormalize","pathStr","pathExtname","pathResolve","fileExist","dotenv","getEnvVariable","undefined","readFileSync","filename","appendFileSync","data","writeFile","path","Promise","reject","highlightSql","sql","highlightJson","json","logInfo","prefix","info","console","logError","error","logWarn","warning","warn","log","message","EventEmitter","Readable","Writable","require","Buffer"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/platform/BrowserPlatformTools.js"],"sourcesContent":["/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable() {\n        if (typeof window !== \"undefined\") {\n            return window;\n        }\n        else {\n            // NativeScript uses global, not window\n            return global;\n        }\n    }\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n        return \"\";\n    }\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n        return \"\";\n    }\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n        return \"\";\n    }\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n        return \"\";\n    }\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n        return false;\n    }\n    static dotenv(pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name) {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n    static readFileSync(filename) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n    static appendFileSync(filename, data) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n    static writeFile(path, data) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql) {\n        return sql;\n    }\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json) {\n        return json;\n    }\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix, info) {\n        console.info(prefix + \" \", info);\n    }\n    static logError(prefix, error) {\n        console.error(prefix + \" \", error);\n    }\n    static logWarn(prefix, warning) {\n        console.warn(prefix + \" \", warning);\n    }\n    static log(message) {\n        console.log(message);\n    }\n    static warn(message) {\n        return message;\n    }\n}\n/**\n * Type of the currently running platform.\n */\nPlatformTools.type = \"browser\";\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {\n}\nexport class Readable {\n}\nexport class Writable {\n}\nif (typeof window !== \"undefined\" && typeof require !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}