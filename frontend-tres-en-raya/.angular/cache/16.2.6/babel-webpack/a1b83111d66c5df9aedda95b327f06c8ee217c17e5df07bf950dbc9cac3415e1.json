{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { MissingDeleteDateColumnError } from \"../error/MissingDeleteDateColumnError\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SoftDeleteQueryBuilder extends QueryBuilder {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connectionOrQueryBuilder, queryRunner) {\n    super(connectionOrQueryBuilder, queryRunner);\n    this[\"@instanceof\"] = Symbol.for(\"SoftDeleteQueryBuilder\");\n    this.expressionMap.aliasNamePrefixingEnabled = false;\n  }\n  // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Gets generated SQL query without parameters being replaced.\n   */\n  getQuery() {\n    let sql = this.createUpdateExpression();\n    sql += this.createCteExpression();\n    sql += this.createOrderByExpression();\n    sql += this.createLimitExpression();\n    return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n  }\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n  execute() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const queryRunner = _this.obtainQueryRunner();\n      let transactionStartedByUs = false;\n      try {\n        // start transaction if it was enabled\n        if (_this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n          yield queryRunner.startTransaction();\n          transactionStartedByUs = true;\n        }\n        // call before soft remove and recover methods in listeners and subscribers\n        if (_this.expressionMap.callListeners === true && _this.expressionMap.mainAlias.hasMetadata) {\n          if (_this.expressionMap.queryType === \"soft-delete\") yield queryRunner.broadcaster.broadcast(\"BeforeSoftRemove\", _this.expressionMap.mainAlias.metadata);else if (_this.expressionMap.queryType === \"restore\") yield queryRunner.broadcaster.broadcast(\"BeforeRecover\", _this.expressionMap.mainAlias.metadata);\n        }\n        // if update entity mode is enabled we may need extra columns for the returning statement\n        const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, _this.expressionMap);\n        if (_this.expressionMap.updateEntity === true && _this.expressionMap.mainAlias.hasMetadata && _this.expressionMap.whereEntities.length > 0) {\n          _this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getSoftDeletionReturningColumns();\n        }\n        // execute update query\n        const [sql, parameters] = _this.getQueryAndParameters();\n        const queryResult = yield queryRunner.query(sql, parameters, true);\n        const updateResult = UpdateResult.from(queryResult);\n        // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n        if (_this.expressionMap.updateEntity === true && _this.expressionMap.mainAlias.hasMetadata && _this.expressionMap.whereEntities.length > 0) {\n          yield returningResultsEntityUpdator.update(updateResult, _this.expressionMap.whereEntities);\n        }\n        // call after soft remove and recover methods in listeners and subscribers\n        if (_this.expressionMap.callListeners === true && _this.expressionMap.mainAlias.hasMetadata) {\n          if (_this.expressionMap.queryType === \"soft-delete\") yield queryRunner.broadcaster.broadcast(\"AfterSoftRemove\", _this.expressionMap.mainAlias.metadata);else if (_this.expressionMap.queryType === \"restore\") yield queryRunner.broadcaster.broadcast(\"AfterRecover\", _this.expressionMap.mainAlias.metadata);\n        }\n        // close transaction if we started it\n        if (transactionStartedByUs) yield queryRunner.commitTransaction();\n        return updateResult;\n      } catch (error) {\n        // rollback transaction if we started it\n        if (transactionStartedByUs) {\n          try {\n            yield queryRunner.rollbackTransaction();\n          } catch (rollbackError) {}\n        }\n        throw error;\n      } finally {\n        if (queryRunner !== _this.queryRunner) {\n          // means we created our own query runner\n          yield queryRunner.release();\n        }\n      }\n    })();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n   * Also sets a main string alias of the selection data.\n   */\n  from(entityTarget, aliasName) {\n    entityTarget = InstanceChecker.isEntitySchema(entityTarget) ? entityTarget.options.name : entityTarget;\n    const mainAlias = this.createFromAlias(entityTarget, aliasName);\n    this.expressionMap.setMainAlias(mainAlias);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   * Additionally you can add parameters used in where expression.\n   */\n  where(where, parameters) {\n    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n    const condition = this.getWhereCondition(where);\n    if (condition) this.expressionMap.wheres = [{\n      type: \"simple\",\n      condition: condition\n    }];\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new AND WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n  andWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"and\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new OR WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n  orWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"or\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n  whereInIds(ids) {\n    return this.where(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n  andWhereInIds(ids) {\n    return this.andWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new OR WHERE with conditions for the given ids.\n   */\n  orWhereInIds(ids) {\n    return this.orWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  output(output) {\n    return this.returning(output);\n  }\n  /**\n   * Optional returning/output clause.\n   */\n  returning(returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported(\"update\")) {\n      throw new ReturningStatementNotSupportedError();\n    }\n    this.expressionMap.returning = returning;\n    return this;\n  }\n  /**\n   * Sets ORDER BY condition in the query builder.\n   * If you had previously ORDER BY expression defined,\n   * calling this function will override previously set ORDER BY conditions.\n   */\n  orderBy(sort, order = \"ASC\", nulls) {\n    if (sort) {\n      if (typeof sort === \"object\") {\n        this.expressionMap.orderBys = sort;\n      } else {\n        if (nulls) {\n          this.expressionMap.orderBys = {\n            [sort]: {\n              order,\n              nulls\n            }\n          };\n        } else {\n          this.expressionMap.orderBys = {\n            [sort]: order\n          };\n        }\n      }\n    } else {\n      this.expressionMap.orderBys = {};\n    }\n    return this;\n  }\n  /**\n   * Adds ORDER BY condition in the query builder.\n   */\n  addOrderBy(sort, order = \"ASC\", nulls) {\n    if (nulls) {\n      this.expressionMap.orderBys[sort] = {\n        order,\n        nulls\n      };\n    } else {\n      this.expressionMap.orderBys[sort] = order;\n    }\n    return this;\n  }\n  /**\n   * Sets LIMIT - maximum number of rows to be selected.\n   */\n  limit(limit) {\n    this.expressionMap.limit = limit;\n    return this;\n  }\n  /**\n   * Indicates if entity must be updated after update operation.\n   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n   * Enabled by default.\n   */\n  whereEntity(entity) {\n    if (!this.expressionMap.mainAlias.hasMetadata) throw new TypeORMError(`.whereEntity method can only be used on queries which update real entity table.`);\n    this.expressionMap.wheres = [];\n    const entities = Array.isArray(entity) ? entity : [entity];\n    entities.forEach(entity => {\n      const entityIdMap = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n      if (!entityIdMap) throw new TypeORMError(`Provided entity does not have ids set, cannot perform operation.`);\n      this.orWhereInIds(entityIdMap);\n    });\n    this.expressionMap.whereEntities = entities;\n    return this;\n  }\n  /**\n   * Indicates if entity must be updated after update operation.\n   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n   * Enabled by default.\n   */\n  updateEntity(enabled) {\n    this.expressionMap.updateEntity = enabled;\n    return this;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates UPDATE express used to perform insert query.\n   */\n  createUpdateExpression() {\n    const metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;\n    if (!metadata) throw new TypeORMError(`Cannot get entity metadata for the given alias \"${this.expressionMap.mainAlias}\"`);\n    if (!metadata.deleteDateColumn) {\n      throw new MissingDeleteDateColumnError(metadata);\n    }\n    // prepare columns and values to be updated\n    const updateColumnAndValues = [];\n    switch (this.expressionMap.queryType) {\n      case \"soft-delete\":\n        updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\");\n        break;\n      case \"restore\":\n        updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = NULL\");\n        break;\n      default:\n        throw new TypeORMError(`The queryType must be \"soft-delete\" or \"restore\"`);\n    }\n    if (metadata.versionColumn) updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n    if (metadata.updateDateColumn) updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n    if (updateColumnAndValues.length <= 0) {\n      throw new UpdateValuesMissingError();\n    }\n    // get a table name and all column database names\n    const whereExpression = this.createWhereExpression();\n    const returningExpression = this.createReturningExpression(\"update\");\n    if (returningExpression === \"\") {\n      return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n    }\n\n    if (this.connection.driver.options.type === \"mssql\") {\n      return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n    }\n    return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n  }\n  /**\n   * Creates \"ORDER BY\" part of SQL query.\n   */\n  createOrderByExpression() {\n    const orderBys = this.expressionMap.orderBys;\n    if (Object.keys(orderBys).length > 0) return \" ORDER BY \" + Object.keys(orderBys).map(columnName => {\n      if (typeof orderBys[columnName] === \"string\") {\n        return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n      } else {\n        return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName].order + \" \" + orderBys[columnName].nulls;\n      }\n    }).join(\", \");\n    return \"\";\n  }\n  /**\n   * Creates \"LIMIT\" parts of SQL query.\n   */\n  createLimitExpression() {\n    let limit = this.expressionMap.limit;\n    if (limit) {\n      if (DriverUtils.isMySQLFamily(this.connection.driver)) {\n        return \" LIMIT \" + limit;\n      } else {\n        throw new LimitOnUpdateNotSupportedError();\n      }\n    }\n    return \"\";\n  }\n}","map":{"version":3,"names":["QueryBuilder","UpdateResult","ReturningStatementNotSupportedError","ReturningResultsEntityUpdator","LimitOnUpdateNotSupportedError","MissingDeleteDateColumnError","UpdateValuesMissingError","TypeORMError","DriverUtils","InstanceChecker","SoftDeleteQueryBuilder","constructor","connectionOrQueryBuilder","queryRunner","Symbol","for","expressionMap","aliasNamePrefixingEnabled","getQuery","sql","createUpdateExpression","createCteExpression","createOrderByExpression","createLimitExpression","replacePropertyNamesForTheWholeQuery","trim","execute","_this","_asyncToGenerator","obtainQueryRunner","transactionStartedByUs","useTransaction","isTransactionActive","startTransaction","callListeners","mainAlias","hasMetadata","queryType","broadcaster","broadcast","metadata","returningResultsEntityUpdator","updateEntity","whereEntities","length","extraReturningColumns","getSoftDeletionReturningColumns","parameters","getQueryAndParameters","queryResult","query","updateResult","from","update","commitTransaction","error","rollbackTransaction","rollbackError","release","entityTarget","aliasName","isEntitySchema","options","name","createFromAlias","setMainAlias","where","wheres","condition","getWhereCondition","type","setParameters","andWhere","push","orWhere","whereInIds","ids","getWhereInIdsCondition","andWhereInIds","orWhereInIds","output","returning","connection","driver","isReturningSqlSupported","orderBy","sort","order","nulls","orderBys","addOrderBy","limit","whereEntity","entity","entities","Array","isArray","forEach","entityIdMap","getEntityIdMap","enabled","undefined","deleteDateColumn","updateColumnAndValues","escape","databaseName","versionColumn","updateDateColumn","whereExpression","createWhereExpression","returningExpression","createReturningExpression","getTableName","getMainTableName","join","Object","keys","map","columnName","replacePropertyNames","isMySQLFamily"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js"],"sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { MissingDeleteDateColumnError } from \"../error/MissingDeleteDateColumnError\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SoftDeleteQueryBuilder extends QueryBuilder {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connectionOrQueryBuilder, queryRunner) {\n        super(connectionOrQueryBuilder, queryRunner);\n        this[\"@instanceof\"] = Symbol.for(\"SoftDeleteQueryBuilder\");\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery() {\n        let sql = this.createUpdateExpression();\n        sql += this.createCteExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim());\n    }\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute() {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs = false;\n        try {\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n            // call before soft remove and recover methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                if (this.expressionMap.queryType === \"soft-delete\")\n                    await queryRunner.broadcaster.broadcast(\"BeforeSoftRemove\", this.expressionMap.mainAlias.metadata);\n                else if (this.expressionMap.queryType === \"restore\")\n                    await queryRunner.broadcaster.broadcast(\"BeforeRecover\", this.expressionMap.mainAlias.metadata);\n            }\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns =\n                    returningResultsEntityUpdator.getSoftDeletionReturningColumns();\n            }\n            // execute update query\n            const [sql, parameters] = this.getQueryAndParameters();\n            const queryResult = await queryRunner.query(sql, parameters, true);\n            const updateResult = UpdateResult.from(queryResult);\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n            // call after soft remove and recover methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias.hasMetadata) {\n                if (this.expressionMap.queryType === \"soft-delete\")\n                    await queryRunner.broadcaster.broadcast(\"AfterSoftRemove\", this.expressionMap.mainAlias.metadata);\n                else if (this.expressionMap.queryType === \"restore\")\n                    await queryRunner.broadcaster.broadcast(\"AfterRecover\", this.expressionMap.mainAlias.metadata);\n            }\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n            return updateResult;\n        }\n        catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                }\n                catch (rollbackError) { }\n            }\n            throw error;\n        }\n        finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from(entityTarget, aliasName) {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    }\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where);\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where, parameters) {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids) {\n        return this.where(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids) {\n        return this.andWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids) {\n        return this.orWhere(this.getWhereInIdsCondition(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    output(output) {\n        return this.returning(output);\n    }\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"update\")) {\n            throw new ReturningStatementNotSupportedError();\n        }\n        this.expressionMap.returning = returning;\n        return this;\n    }\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort, order = \"ASC\", nulls) {\n        if (sort) {\n            if (typeof sort === \"object\") {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = {\n                        [sort]: { order, nulls },\n                    };\n                }\n                else {\n                    this.expressionMap.orderBys = { [sort]: order };\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort, order = \"ASC\", nulls) {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit) {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity) {\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            throw new TypeORMError(`.whereEntity method can only be used on queries which update real entity table.`);\n        this.expressionMap.wheres = [];\n        const entities = Array.isArray(entity) ? entity : [entity];\n        entities.forEach((entity) => {\n            const entityIdMap = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new TypeORMError(`Provided entity does not have ids set, cannot perform operation.`);\n            this.orWhereInIds(entityIdMap);\n        });\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    createUpdateExpression() {\n        const metadata = this.expressionMap.mainAlias.hasMetadata\n            ? this.expressionMap.mainAlias.metadata\n            : undefined;\n        if (!metadata)\n            throw new TypeORMError(`Cannot get entity metadata for the given alias \"${this.expressionMap.mainAlias}\"`);\n        if (!metadata.deleteDateColumn) {\n            throw new MissingDeleteDateColumnError(metadata);\n        }\n        // prepare columns and values to be updated\n        const updateColumnAndValues = [];\n        switch (this.expressionMap.queryType) {\n            case \"soft-delete\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) +\n                    \" = CURRENT_TIMESTAMP\");\n                break;\n            case \"restore\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) +\n                    \" = NULL\");\n                break;\n            default:\n                throw new TypeORMError(`The queryType must be \"soft-delete\" or \"restore\"`);\n        }\n        if (metadata.versionColumn)\n            updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) +\n                \" = \" +\n                this.escape(metadata.versionColumn.databaseName) +\n                \" + 1\");\n        if (metadata.updateDateColumn)\n            updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) +\n                \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression(\"update\");\n        if (returningExpression === \"\") {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n        }\n        return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n    }\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return (\" ORDER BY \" +\n                Object.keys(orderBys)\n                    .map((columnName) => {\n                    if (typeof orderBys[columnName] === \"string\") {\n                        return (this.replacePropertyNames(columnName) +\n                            \" \" +\n                            orderBys[columnName]);\n                    }\n                    else {\n                        return (this.replacePropertyNames(columnName) +\n                            \" \" +\n                            orderBys[columnName].order +\n                            \" \" +\n                            orderBys[columnName].nulls);\n                    }\n                })\n                    .join(\", \"));\n        return \"\";\n    }\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    createLimitExpression() {\n        let limit = this.expressionMap.limit;\n        if (limit) {\n            if (DriverUtils.isMySQLFamily(this.connection.driver)) {\n                return \" LIMIT \" + limit;\n            }\n            else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n        return \"\";\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}