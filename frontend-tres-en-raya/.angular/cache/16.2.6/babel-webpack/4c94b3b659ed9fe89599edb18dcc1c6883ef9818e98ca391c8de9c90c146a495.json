{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/practicas/Downloads/angular/tresOnline/frontend-tres-en-raya/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TypeORMError } from \"../../error\";\nexport class SqljsDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    // If autoSave is enabled by user, location or autoSaveCallback have to be set\n    // because either autoSave saves to location or calls autoSaveCallback.\n    if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\n      throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n    }\n    // load sql.js package\n    this.loadDependencies();\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Performs connection to the database.\n   */\n  connect() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.databaseConnection = yield _this.createDatabaseConnection();\n    })();\n  }\n  /**\n   * Closes connection with database.\n   */\n  disconnect() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.queryRunner = undefined;\n      _this2.databaseConnection.close();\n    })();\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new SqljsQueryRunner(this);\n    return this.queryRunner;\n  }\n  /**\n   * Loads a database from a given file (Node.js), local storage key (browser) or array.\n   * This will delete the current database!\n   */\n  load(fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists = true) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof fileNameOrLocalStorageOrData === \"string\") {\n        // content has to be loaded\n        if (PlatformTools.type === \"node\") {\n          // Node.js\n          // fileNameOrLocalStorageOrData should be a path to the file\n          if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n            const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n            return _this3.createDatabaseConnectionWithImport(database);\n          } else if (checkIfFileOrLocalStorageExists) {\n            throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n          } else {\n            // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n            // Therefore open a database without importing an existing file.\n            // File will be written on first write operation.\n            return _this3.createDatabaseConnectionWithImport();\n          }\n        } else {\n          // browser\n          // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n          let localStorageContent = null;\n          if (_this3.options.useLocalForage) {\n            if (window.localforage) {\n              localStorageContent = yield window.localforage.getItem(fileNameOrLocalStorageOrData);\n            } else {\n              throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n            }\n          } else {\n            localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n          }\n          if (localStorageContent != null) {\n            // localStorage value exists.\n            return _this3.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n          } else if (checkIfFileOrLocalStorageExists) {\n            throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n          } else {\n            // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n            // Therefore open a database without importing anything.\n            // localStorage value will be written on first write operation.\n            return _this3.createDatabaseConnectionWithImport();\n          }\n        }\n      } else {\n        return _this3.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n      }\n    })();\n  }\n  /**\n   * Saved the current database to the given file (Node.js), local storage key (browser) or\n   * indexedDB key (browser with enabled useLocalForage option).\n   * If no location path is given, the location path in the options (if specified) will be used.\n   */\n  save(location) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!location && !_this4.options.location) {\n        throw new TypeORMError(`No location is set, specify a location parameter or add the location option to your configuration`);\n      }\n      let path = \"\";\n      if (location) {\n        path = location;\n      } else if (_this4.options.location) {\n        path = _this4.options.location;\n      }\n      if (PlatformTools.type === \"node\") {\n        try {\n          const content = Buffer.from(_this4.databaseConnection.export());\n          yield PlatformTools.writeFile(path, content);\n        } catch (e) {\n          throw new TypeORMError(`Could not save database, error: ${e}`);\n        }\n      } else {\n        const database = _this4.databaseConnection.export();\n        // convert Uint8Array to number array to improve local-storage storage\n        const databaseArray = [].slice.call(database);\n        if (_this4.options.useLocalForage) {\n          if (window.localforage) {\n            yield window.localforage.setItem(path, JSON.stringify(databaseArray));\n          } else {\n            throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n          }\n        } else {\n          PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n        }\n      }\n    })();\n  }\n  /**\n   * This gets called by the QueryRunner when a change to the database is made.\n   * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n   * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n   * or indexedDB (browser with enabled useLocalForage option).\n   * Don't auto-save when in transaction as the call to export will end the current transaction\n   */\n  autoSave() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      if (_this5.options.autoSave && !((_a = _this5.queryRunner) === null || _a === void 0 ? void 0 : _a.isTransactionActive)) {\n        if (_this5.options.autoSaveCallback) {\n          yield _this5.options.autoSaveCallback(_this5.export());\n        } else {\n          yield _this5.save();\n        }\n      }\n    })();\n  }\n  /**\n   * Returns the current database as Uint8Array.\n   */\n  export() {\n    return this.databaseConnection.export();\n  }\n  /**\n   * Creates generated map of values generated or returned by database after INSERT query.\n   */\n  createGeneratedMap(metadata, insertResult) {\n    const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n      // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n      if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n        const query = \"SELECT last_insert_rowid()\";\n        try {\n          let result = this.databaseConnection.exec(query);\n          this.connection.logger.logQuery(query);\n          return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n        } catch (e) {\n          this.connection.logger.logQueryError(e, query, []);\n        }\n      }\n      return map;\n    }, {});\n    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n  }\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Creates connection with the database.\n   * If the location option is set, the database is loaded first.\n   */\n  createDatabaseConnection() {\n    if (this.options.location) {\n      return this.load(this.options.location, false);\n    }\n    return this.createDatabaseConnectionWithImport(this.options.database);\n  }\n  /**\n   * Creates connection with an optional database.\n   * If database is specified it is loaded, otherwise a new empty database is created.\n   */\n  createDatabaseConnectionWithImport(database) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // sql.js < 1.0 exposes an object with a `Database` method.\n      const isLegacyVersion = typeof _this6.sqlite.Database === \"function\";\n      const sqlite = isLegacyVersion ? _this6.sqlite : yield _this6.sqlite(_this6.options.sqlJsConfig);\n      if (database && database.length > 0) {\n        _this6.databaseConnection = new sqlite.Database(database);\n      } else {\n        _this6.databaseConnection = new sqlite.Database();\n      }\n      _this6.databaseConnection.exec(`PRAGMA foreign_keys = ON`);\n      return _this6.databaseConnection;\n    })();\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n  loadDependencies() {\n    if (PlatformTools.type === \"browser\") {\n      const sqlite = this.options.driver || window.SQL;\n      this.sqlite = sqlite;\n    } else {\n      try {\n        const sqlite = this.options.driver || PlatformTools.load(\"sql.js\");\n        this.sqlite = sqlite;\n      } catch (e) {\n        throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n      }\n    }\n  }\n}","map":{"version":3,"names":["AbstractSqliteDriver","SqljsQueryRunner","DriverPackageNotInstalledError","DriverOptionNotSetError","PlatformTools","OrmUtils","TypeORMError","SqljsDriver","constructor","connection","options","autoSave","location","autoSaveCallback","loadDependencies","connect","_this","_asyncToGenerator","databaseConnection","createDatabaseConnection","disconnect","_this2","queryRunner","undefined","close","createQueryRunner","mode","load","fileNameOrLocalStorageOrData","checkIfFileOrLocalStorageExists","_this3","type","fileExist","database","readFileSync","createDatabaseConnectionWithImport","localStorageContent","useLocalForage","window","localforage","getItem","getGlobalVariable","localStorage","JSON","parse","save","_this4","path","content","Buffer","from","export","writeFile","e","databaseArray","slice","call","setItem","stringify","_this5","_a","isTransactionActive","createGeneratedMap","metadata","insertResult","generatedMap","generatedColumns","reduce","map","generatedColumn","isPrimary","generationStrategy","query","result","exec","logger","logQuery","mergeDeep","createValueMap","values","logQueryError","Object","keys","length","_this6","isLegacyVersion","sqlite","Database","sqlJsConfig","driver","SQL"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TypeORMError } from \"../../error\";\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(connection) {\n        super(connection);\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (this.options.autoSave &&\n            !this.options.location &&\n            !this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n        }\n        // load sql.js package\n        this.loadDependencies();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    async connect() {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n    /**\n     * Closes connection with database.\n     */\n    async disconnect() {\n        this.queryRunner = undefined;\n        this.databaseConnection.close();\n    }\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode) {\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n        return this.queryRunner;\n    }\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists = true) {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                    return this.createDatabaseConnectionWithImport(database);\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n            else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null;\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n                    }\n                    else {\n                        throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n                    }\n                }\n                else {\n                    localStorageContent =\n                        PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                }\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new TypeORMError(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n        }\n        else {\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n        }\n    }\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location) {\n        if (!location && !this.options.location) {\n            throw new TypeORMError(`No location is set, specify a location parameter or add the location option to your configuration`);\n        }\n        let path = \"\";\n        if (location) {\n            path = location;\n        }\n        else if (this.options.location) {\n            path = this.options.location;\n        }\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export());\n                await PlatformTools.writeFile(path, content);\n            }\n            catch (e) {\n                throw new TypeORMError(`Could not save database, error: ${e}`);\n            }\n        }\n        else {\n            const database = this.databaseConnection.export();\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database);\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(path, JSON.stringify(databaseArray));\n                }\n                else {\n                    throw new TypeORMError(`localforage is not defined - please import localforage.js into your site`);\n                }\n            }\n            else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            }\n        }\n    }\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     * Don't auto-save when in transaction as the call to export will end the current transaction\n     */\n    async autoSave() {\n        var _a;\n        if (this.options.autoSave && !((_a = this.queryRunner) === null || _a === void 0 ? void 0 : _a.isTransactionActive)) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export());\n            }\n            else {\n                await this.save();\n            }\n        }\n    }\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export() {\n        return this.databaseConnection.export();\n    }\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata, insertResult) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary &&\n                generatedColumn.generationStrategy === \"increment\") {\n                const query = \"SELECT last_insert_rowid()\";\n                try {\n                    let result = this.databaseConnection.exec(query);\n                    this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n            return map;\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    createDatabaseConnection() {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    }\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    async createDatabaseConnectionWithImport(database) {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n        const sqlite = isLegacyVersion\n            ? this.sqlite\n            : await this.sqlite(this.options.sqlJsConfig);\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database);\n        }\n        else {\n            this.databaseConnection = new sqlite.Database();\n        }\n        this.databaseConnection.exec(`PRAGMA foreign_keys = ON`);\n        return this.databaseConnection;\n    }\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    loadDependencies() {\n        if (PlatformTools.type === \"browser\") {\n            const sqlite = this.options.driver || window.SQL;\n            this.sqlite = sqlite;\n        }\n        else {\n            try {\n                const sqlite = this.options.driver || PlatformTools.load(\"sql.js\");\n                this.sqlite = sqlite;\n            }\n            catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}