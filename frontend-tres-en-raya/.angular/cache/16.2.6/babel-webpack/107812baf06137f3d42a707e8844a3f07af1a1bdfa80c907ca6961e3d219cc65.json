{"ast":null,"code":"import { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\";\nimport { CircularRelationsError } from \"../error/CircularRelationsError\";\nimport { DepGraph } from \"../util/DepGraph\";\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\";\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\";\nimport { InitializedRelationError } from \"../error/InitializedRelationError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Validates all given entity metadatas.\n   */\n  validateMany(entityMetadatas, driver) {\n    entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas, driver));\n    this.validateDependencies(entityMetadatas);\n    this.validateEagerRelations(entityMetadatas);\n  }\n  /**\n   * Validates given entity metadata.\n   */\n  validate(entityMetadata, allEntityMetadatas, driver) {\n    // check if table metadata has an id\n    if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction) throw new MissingPrimaryColumnError(entityMetadata);\n    // if entity has multiple primary keys and uses custom constraint name,\n    // then all primary keys should have the same constraint name\n    if (entityMetadata.primaryColumns.length > 1) {\n      const areConstraintNamesEqual = entityMetadata.primaryColumns.every((columnMetadata, i, columnMetadatas) => columnMetadata.primaryKeyConstraintName === columnMetadatas[0].primaryKeyConstraintName);\n      if (!areConstraintNamesEqual) {\n        throw new TypeORMError(`Entity ${entityMetadata.name} has multiple primary columns with different constraint names. Constraint names should be the equal.`);\n      }\n    }\n    // validate if table is using inheritance it has a discriminator\n    // also validate if discriminator values are not empty and not repeated\n    if (entityMetadata.inheritancePattern === \"STI\" || entityMetadata.tableType === \"entity-child\") {\n      if (!entityMetadata.discriminatorColumn) throw new TypeORMError(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);\n      if (typeof entityMetadata.discriminatorValue === \"undefined\") throw new TypeORMError(`Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`);\n      const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n        return metadata !== entityMetadata && (metadata.inheritancePattern === \"STI\" || metadata.tableType === \"entity-child\") && metadata.tableName === entityMetadata.tableName && metadata.discriminatorValue === entityMetadata.discriminatorValue && metadata.inheritanceTree.some(parent => entityMetadata.inheritanceTree.indexOf(parent) !== -1);\n      });\n      if (sameDiscriminatorValueEntityMetadata) throw new TypeORMError(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`);\n    }\n    entityMetadata.relationCounts.forEach(relationCount => {\n      if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne) throw new TypeORMError(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n    });\n    if (!(driver.options.type === \"mongodb\")) {\n      entityMetadata.columns.filter(column => !column.isVirtualProperty).forEach(column => {\n        const normalizedColumn = driver.normalizeType(column);\n        if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1) throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n        if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1) throw new TypeORMError(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);\n        if (column.type === \"enum\" && !column.enum && !column.enumName) throw new TypeORMError(`Column \"${column.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as enum, but missing \"enum\" or \"enumName\" properties.`);\n      });\n    }\n    if (DriverUtils.isMySQLFamily(driver) || driver.options.type === \"aurora-mysql\") {\n      const generatedColumns = entityMetadata.columns.filter(column => column.isGenerated && column.generationStrategy !== \"uuid\");\n      if (generatedColumns.length > 1) throw new TypeORMError(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);\n    }\n    // for mysql we are able to not define a default selected database, instead all entities can have their database\n    // defined in their decorators. To make everything work either all entities must have database define and we\n    // can live without database set in the connection options, either database in the connection options must be set\n    if (DriverUtils.isMySQLFamily(driver)) {\n      const metadatasWithDatabase = allEntityMetadatas.filter(metadata => metadata.database);\n      if (metadatasWithDatabase.length === 0 && !driver.database) throw new NoConnectionOptionError(\"database\");\n    }\n    if (driver.options.type === \"mssql\") {\n      const charsetColumns = entityMetadata.columns.filter(column => column.charset);\n      if (charsetColumns.length > 1) throw new TypeORMError(`Character set specifying is not supported in Sql Server`);\n    }\n    // Postgres supports only STORED generated columns.\n    if (driver.options.type === \"postgres\") {\n      const virtualColumn = entityMetadata.columns.find(column => column.asExpression && (!column.generatedType || column.generatedType === \"VIRTUAL\"));\n      if (virtualColumn) throw new TypeORMError(`Column \"${virtualColumn.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as VIRTUAL, but Postgres supports only STORED generated columns.`);\n    }\n    // check if relations are all without initialized properties\n    const entityInstance = entityMetadata.create(undefined, {\n      fromDeserializer: true\n    });\n    entityMetadata.relations.forEach(relation => {\n      if (relation.isManyToMany || relation.isOneToMany) {\n        // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n        if (relation.persistenceEnabled === false) return;\n        // get entity relation value and check if its an array\n        const relationInitializedValue = relation.getEntityValue(entityInstance);\n        if (Array.isArray(relationInitializedValue)) throw new InitializedRelationError(relation);\n      }\n    });\n    // validate relations\n    entityMetadata.relations.forEach(relation => {\n      // check OnDeleteTypes\n      if (driver.supportedOnDeleteTypes && relation.onDelete && !driver.supportedOnDeleteTypes.includes(relation.onDelete)) {\n        throw new TypeORMError(`OnDeleteType \"${relation.onDelete}\" is not supported for ${driver.options.type}!`);\n      }\n      // check OnUpdateTypes\n      if (driver.supportedOnUpdateTypes && relation.onUpdate && !driver.supportedOnUpdateTypes.includes(relation.onUpdate)) {\n        throw new TypeORMError(`OnUpdateType \"${relation.onUpdate}\" is not valid for ${driver.options.type}!`);\n      }\n      // check join tables:\n      // using JoinTable is possible only on one side of the many-to-many relation\n      // todo(dima): fix\n      // if (relation.joinTable) {\n      //     if (!relation.isManyToMany)\n      //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n      //     // if there is inverse side of the relation, then check if it does not have join table too\n      //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n      //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n      // }\n      // check join columns:\n      // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n      // first check if relation is one-to-one or many-to-one\n      // todo(dima): fix\n      /*if (relation.joinColumn) {\n           // join column can be applied only on one-to-one and many-to-one relations\n          if (!relation.isOneToOne && !relation.isManyToOne)\n              throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n           // if there is inverse side of the relation, then check if it does not have join table too\n          if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n              throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n           // check if join column really has referenced column\n          if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n              throw new TypeORMError(`Join column does not have referenced column set`);\n       }\n       // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n      // or its one-side relation without JoinColumn we should give an error\n      if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n          throw new MissingJoinColumnError(entityMetadata, relation);*/\n      // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n      // or its one-side relation without JoinTable we should give an error\n      // todo(dima): fix it\n      // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n      //     throw new MissingJoinTableError(entityMetadata, relation);\n      // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n      // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n      // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n      // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n      // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n      // todo: check if there are multiple columns on the same column applied.\n      // todo: check column type if is missing in relational databases (throw new TypeORMError(`Column type of ${type} cannot be determined.`);)\n      // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n      // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n      // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n      // todo: check if entity with duplicate names, some decorators exist\n    });\n    // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n    entityMetadata.relations.forEach(relation => {\n      const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;\n      if (isCircularCascadeRemove) throw new TypeORMError(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` + `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n    }); // todo: maybe better just deny removal from one to one relation without join column?\n    entityMetadata.eagerRelations.forEach(relation => {});\n  }\n  /**\n   * Validates dependencies of the entity metadatas.\n   */\n  validateDependencies(entityMetadatas) {\n    const graph = new DepGraph();\n    entityMetadatas.forEach(entityMetadata => {\n      graph.addNode(entityMetadata.name);\n    });\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.relationsWithJoinColumns.filter(relation => !relation.isNullable).forEach(relation => {\n        graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n      });\n    });\n    try {\n      graph.overallOrder();\n    } catch (err) {\n      throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n    }\n  }\n  /**\n   * Validates eager relations to prevent circular dependency in them.\n   */\n  validateEagerRelations(entityMetadatas) {\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.eagerRelations.forEach(relation => {\n        if (relation.inverseRelation && relation.inverseRelation.isEager) throw new TypeORMError(`Circular eager relations are disallowed. ` + `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` + `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` + ` Remove \"eager: true\" from one side of the relation.`);\n      });\n    });\n  }\n}","map":{"version":3,"names":["MissingPrimaryColumnError","CircularRelationsError","DepGraph","DataTypeNotSupportedError","NoConnectionOptionError","InitializedRelationError","TypeORMError","DriverUtils","EntityMetadataValidator","validateMany","entityMetadatas","driver","forEach","entityMetadata","validate","validateDependencies","validateEagerRelations","allEntityMetadatas","primaryColumns","length","isJunction","areConstraintNamesEqual","every","columnMetadata","i","columnMetadatas","primaryKeyConstraintName","name","inheritancePattern","tableType","discriminatorColumn","discriminatorValue","sameDiscriminatorValueEntityMetadata","find","metadata","tableName","inheritanceTree","some","parent","indexOf","relationCounts","relationCount","relation","isManyToOne","isOneToOne","options","type","columns","filter","column","isVirtualProperty","normalizedColumn","normalizeType","supportedDataTypes","withLengthColumnTypes","propertyName","enum","enumName","isMySQLFamily","generatedColumns","isGenerated","generationStrategy","metadatasWithDatabase","database","charsetColumns","charset","virtualColumn","asExpression","generatedType","entityInstance","create","undefined","fromDeserializer","relations","isManyToMany","isOneToMany","persistenceEnabled","relationInitializedValue","getEntityValue","Array","isArray","supportedOnDeleteTypes","onDelete","includes","supportedOnUpdateTypes","onUpdate","isCircularCascadeRemove","isCascadeRemove","inverseRelation","eagerRelations","graph","addNode","relationsWithJoinColumns","isNullable","addDependency","inverseEntityMetadata","overallOrder","err","toString","replace","isEager","targetName","propertyPath"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata-builder/EntityMetadataValidator.js"],"sourcesContent":["import { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\";\nimport { CircularRelationsError } from \"../error/CircularRelationsError\";\nimport { DepGraph } from \"../util/DepGraph\";\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\";\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\";\nimport { InitializedRelationError } from \"../error/InitializedRelationError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas, driver) {\n        entityMetadatas.forEach((entityMetadata) => this.validate(entityMetadata, entityMetadatas, driver));\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    }\n    /**\n     * Validates given entity metadata.\n     */\n    validate(entityMetadata, allEntityMetadatas, driver) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n        // if entity has multiple primary keys and uses custom constraint name,\n        // then all primary keys should have the same constraint name\n        if (entityMetadata.primaryColumns.length > 1) {\n            const areConstraintNamesEqual = entityMetadata.primaryColumns.every((columnMetadata, i, columnMetadatas) => columnMetadata.primaryKeyConstraintName ===\n                columnMetadatas[0].primaryKeyConstraintName);\n            if (!areConstraintNamesEqual) {\n                throw new TypeORMError(`Entity ${entityMetadata.name} has multiple primary columns with different constraint names. Constraint names should be the equal.`);\n            }\n        }\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\" ||\n            entityMetadata.tableType === \"entity-child\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new TypeORMError(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);\n            if (typeof entityMetadata.discriminatorValue === \"undefined\")\n                throw new TypeORMError(`Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`);\n            const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find((metadata) => {\n                return (metadata !== entityMetadata &&\n                    (metadata.inheritancePattern === \"STI\" ||\n                        metadata.tableType === \"entity-child\") &&\n                    metadata.tableName === entityMetadata.tableName &&\n                    metadata.discriminatorValue ===\n                        entityMetadata.discriminatorValue &&\n                    metadata.inheritanceTree.some((parent) => entityMetadata.inheritanceTree.indexOf(parent) !== -1));\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new TypeORMError(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`);\n        }\n        entityMetadata.relationCounts.forEach((relationCount) => {\n            if (relationCount.relation.isManyToOne ||\n                relationCount.relation.isOneToOne)\n                throw new TypeORMError(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n        });\n        if (!(driver.options.type === \"mongodb\")) {\n            entityMetadata.columns\n                .filter((column) => !column.isVirtualProperty)\n                .forEach((column) => {\n                const normalizedColumn = driver.normalizeType(column);\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) ===\n                    -1)\n                    throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length &&\n                    driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new TypeORMError(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);\n                if (column.type === \"enum\" &&\n                    !column.enum &&\n                    !column.enumName)\n                    throw new TypeORMError(`Column \"${column.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as enum, but missing \"enum\" or \"enumName\" properties.`);\n            });\n        }\n        if (DriverUtils.isMySQLFamily(driver) ||\n            driver.options.type === \"aurora-mysql\") {\n            const generatedColumns = entityMetadata.columns.filter((column) => column.isGenerated && column.generationStrategy !== \"uuid\");\n            if (generatedColumns.length > 1)\n                throw new TypeORMError(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);\n        }\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (DriverUtils.isMySQLFamily(driver)) {\n            const metadatasWithDatabase = allEntityMetadatas.filter((metadata) => metadata.database);\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\");\n        }\n        if (driver.options.type === \"mssql\") {\n            const charsetColumns = entityMetadata.columns.filter((column) => column.charset);\n            if (charsetColumns.length > 1)\n                throw new TypeORMError(`Character set specifying is not supported in Sql Server`);\n        }\n        // Postgres supports only STORED generated columns.\n        if (driver.options.type === \"postgres\") {\n            const virtualColumn = entityMetadata.columns.find((column) => column.asExpression &&\n                (!column.generatedType ||\n                    column.generatedType === \"VIRTUAL\"));\n            if (virtualColumn)\n                throw new TypeORMError(`Column \"${virtualColumn.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as VIRTUAL, but Postgres supports only STORED generated columns.`);\n        }\n        // check if relations are all without initialized properties\n        const entityInstance = entityMetadata.create(undefined, {\n            fromDeserializer: true,\n        });\n        entityMetadata.relations.forEach((relation) => {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n                // get entity relation value and check if its an array\n                const relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (Array.isArray(relationInitializedValue))\n                    throw new InitializedRelationError(relation);\n            }\n        });\n        // validate relations\n        entityMetadata.relations.forEach((relation) => {\n            // check OnDeleteTypes\n            if (driver.supportedOnDeleteTypes &&\n                relation.onDelete &&\n                !driver.supportedOnDeleteTypes.includes(relation.onDelete)) {\n                throw new TypeORMError(`OnDeleteType \"${relation.onDelete}\" is not supported for ${driver.options.type}!`);\n            }\n            // check OnUpdateTypes\n            if (driver.supportedOnUpdateTypes &&\n                relation.onUpdate &&\n                !driver.supportedOnUpdateTypes.includes(relation.onUpdate)) {\n                throw new TypeORMError(`OnUpdateType \"${relation.onUpdate}\" is not valid for ${driver.options.type}!`);\n            }\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new TypeORMError(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new TypeORMError(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        });\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach((relation) => {\n            const isCircularCascadeRemove = relation.isCascadeRemove &&\n                relation.inverseRelation &&\n                relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new TypeORMError(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` +\n                    `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n        entityMetadata.eagerRelations.forEach((relation) => { });\n    }\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    validateDependencies(entityMetadatas) {\n        const graph = new DepGraph();\n        entityMetadatas.forEach((entityMetadata) => {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns\n                .filter((relation) => !relation.isNullable)\n                .forEach((relation) => {\n                graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n            });\n        });\n        try {\n            graph.overallOrder();\n        }\n        catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    }\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    validateEagerRelations(entityMetadatas) {\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.eagerRelations.forEach((relation) => {\n                if (relation.inverseRelation &&\n                    relation.inverseRelation.isEager)\n                    throw new TypeORMError(`Circular eager relations are disallowed. ` +\n                        `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` +\n                        `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` +\n                        ` Remove \"eager: true\" from one side of the relation.`);\n            });\n        });\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}