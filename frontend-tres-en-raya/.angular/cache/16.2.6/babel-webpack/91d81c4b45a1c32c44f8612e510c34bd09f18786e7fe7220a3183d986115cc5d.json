{"ast":null,"code":"import { DataSource } from \"../data-source/DataSource\";\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\";\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\";\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\nexport class ConnectionManager {\n  constructor() {\n    /**\n     * Internal lookup to quickly get from a connection name to the Connection object.\n     */\n    this.connectionMap = new Map();\n  }\n  /**\n   * List of connections registered in this connection manager.\n   */\n  get connections() {\n    return Array.from(this.connectionMap.values());\n  }\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n  /**\n   * Checks if connection with the given name exist in the manager.\n   */\n  has(name) {\n    return this.connectionMap.has(name);\n  }\n  /**\n   * Gets registered connection with the given name.\n   * If connection name is not given then it will get a default connection.\n   * Throws error if connection with the given name was not found.\n   */\n  get(name = \"default\") {\n    const connection = this.connectionMap.get(name);\n    if (!connection) throw new ConnectionNotFoundError(name);\n    return connection;\n  }\n  /**\n   * Creates a new connection based on the given connection options and registers it in the manager.\n   * Connection won't be established, you'll need to manually call connect method to establish connection.\n   */\n  create(options) {\n    // check if such connection is already registered\n    const existConnection = this.connectionMap.get(options.name || \"default\");\n    if (existConnection) {\n      // if connection is registered and its not closed then throw an error\n      if (existConnection.isInitialized) throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n    }\n    // create a new connection\n    const connection = new DataSource(options);\n    this.connectionMap.set(connection.name, connection);\n    return connection;\n  }\n}","map":{"version":3,"names":["DataSource","ConnectionNotFoundError","AlreadyHasActiveConnectionError","ConnectionManager","constructor","connectionMap","Map","connections","Array","from","values","has","name","get","connection","create","options","existConnection","isInitialized","set"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/connection/ConnectionManager.js"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\";\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\";\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\";\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\nexport class ConnectionManager {\n    constructor() {\n        /**\n         * Internal lookup to quickly get from a connection name to the Connection object.\n         */\n        this.connectionMap = new Map();\n    }\n    /**\n     * List of connections registered in this connection manager.\n     */\n    get connections() {\n        return Array.from(this.connectionMap.values());\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name) {\n        return this.connectionMap.has(name);\n    }\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name = \"default\") {\n        const connection = this.connectionMap.get(name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n        return connection;\n    }\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options) {\n        // check if such connection is already registered\n        const existConnection = this.connectionMap.get(options.name || \"default\");\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isInitialized)\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n        }\n        // create a new connection\n        const connection = new DataSource(options);\n        this.connectionMap.set(connection.name, connection);\n        return connection;\n    }\n}\n\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,2BAA2B;AACtD,SAASC,uBAAuB,QAAQ,kCAAkC;AAC1E,SAASC,+BAA+B,QAAQ,0CAA0C;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;EAClC;EACA;AACJ;AACA;EACI,IAAIC,WAAWA,CAAA,EAAG;IACd,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACJ,aAAa,CAACK,MAAM,CAAC,CAAC,CAAC;EAClD;EACA;EACA;EACA;EACA;AACJ;AACA;EACIC,GAAGA,CAACC,IAAI,EAAE;IACN,OAAO,IAAI,CAACP,aAAa,CAACM,GAAG,CAACC,IAAI,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;EACIC,GAAGA,CAACD,IAAI,GAAG,SAAS,EAAE;IAClB,MAAME,UAAU,GAAG,IAAI,CAACT,aAAa,CAACQ,GAAG,CAACD,IAAI,CAAC;IAC/C,IAAI,CAACE,UAAU,EACX,MAAM,IAAIb,uBAAuB,CAACW,IAAI,CAAC;IAC3C,OAAOE,UAAU;EACrB;EACA;AACJ;AACA;AACA;EACIC,MAAMA,CAACC,OAAO,EAAE;IACZ;IACA,MAAMC,eAAe,GAAG,IAAI,CAACZ,aAAa,CAACQ,GAAG,CAACG,OAAO,CAACJ,IAAI,IAAI,SAAS,CAAC;IACzE,IAAIK,eAAe,EAAE;MACjB;MACA,IAAIA,eAAe,CAACC,aAAa,EAC7B,MAAM,IAAIhB,+BAA+B,CAACc,OAAO,CAACJ,IAAI,IAAI,SAAS,CAAC;IAC5E;IACA;IACA,MAAME,UAAU,GAAG,IAAId,UAAU,CAACgB,OAAO,CAAC;IAC1C,IAAI,CAACX,aAAa,CAACc,GAAG,CAACL,UAAU,CAACF,IAAI,EAAEE,UAAU,CAAC;IACnD,OAAOA,UAAU;EACrB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}