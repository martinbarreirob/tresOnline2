{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./socket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./logging/logging.component\";\nimport * as i4 from \"./game/game.component\";\nfunction AppComponent_app_logging_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-logging\", 1);\n    i0.ɵɵlistener(\"nameEntered\", function AppComponent_app_logging_0_Template_app_logging_nameEntered_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.setNameEntered());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AppComponent {\n  constructor(socketService) {\n    this.socketService = socketService;\n    this.title = 'frontend-tres-en-raya';\n    this.isRegistered = false;\n  }\n  ngOnInit() {\n    // Escuchar movimientos de otros jugadores\n    this.socketService.listenForMoves().subscribe(moveData => {\n      console.log('Movimiento recibido:', moveData);\n      // Aquí puedes actualizar tu tablero o realizar cualquier otra acción necesaria\n    });\n  }\n\n  setNameEntered() {\n    this.isRegistered = true;\n  }\n  // Suponiendo que tienes una función para manejar el movimiento del jugador\n  handlePlayerMove(moveData) {\n    // Aquí puedes manejar el movimiento en tu frontend\n    // ...\n    // Luego, emites el movimiento al servidor\n    this.socketService.emitMove(moveData);\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.SocketService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"nameEntered\", 4, \"ngIf\"], [3, \"nameEntered\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AppComponent_app_logging_0_Template, 1, 0, \"app-logging\", 0);\n        i0.ɵɵelement(1, \"app-game\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.isNameEntered);\n      }\n    },\n    dependencies: [i2.NgIf, i3.LoggingComponent, i4.GameComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","AppComponent_app_logging_0_Template_app_logging_nameEntered_0_listener","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","setNameEntered","ɵɵelementEnd","AppComponent","constructor","socketService","title","isRegistered","ngOnInit","listenForMoves","subscribe","moveData","console","log","handlePlayerMove","emitMove","_","ɵɵdirectiveInject","i1","SocketService","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵtemplate","AppComponent_app_logging_0_Template","ɵɵelement","ɵɵproperty","isNameEntered"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\app.component.ts","C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { SocketService } from './socket.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'frontend-tres-en-raya';\n  isRegistered = false;\n\n  constructor(private socketService: SocketService) {}\n\n  ngOnInit(): void {\n    // Escuchar movimientos de otros jugadores\n    this.socketService.listenForMoves().subscribe((moveData: string) => {\n      console.log('Movimiento recibido:', moveData);\n      // Aquí puedes actualizar tu tablero o realizar cualquier otra acción necesaria\n    });\n  }\n\n  setNameEntered() {\n    this.isRegistered = true;\n  }\n\n  // Suponiendo que tienes una función para manejar el movimiento del jugador\n  handlePlayerMove(moveData: string): void {\n    // Aquí puedes manejar el movimiento en tu frontend\n    // ...\n\n    // Luego, emites el movimiento al servidor\n    this.socketService.emitMove(moveData);\n  }\n}\n","<app-logging *ngIf=\"!isNameEntered\" (nameEntered)=\"setNameEntered()\"></app-logging>\n<app-game></app-game>\n"],"mappings":";;;;;;;;ICAAA,EAAA,CAAAC,cAAA,qBAAqE;IAAjCD,EAAA,CAAAE,UAAA,yBAAAC,uEAAA;MAAAH,EAAA,CAAAI,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAN,EAAA,CAAAO,aAAA;MAAA,OAAeP,EAAA,CAAAQ,WAAA,CAAAF,MAAA,CAAAG,cAAA,EAAgB;IAAA,EAAC;IAACT,EAAA,CAAAU,YAAA,EAAc;;;ADQnF,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAHjC,KAAAC,KAAK,GAAG,uBAAuB;IAC/B,KAAAC,YAAY,GAAG,KAAK;EAE+B;EAEnDC,QAAQA,CAAA;IACN;IACA,IAAI,CAACH,aAAa,CAACI,cAAc,EAAE,CAACC,SAAS,CAAEC,QAAgB,IAAI;MACjEC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,QAAQ,CAAC;MAC7C;IACF,CAAC,CAAC;EACJ;;EAEAV,cAAcA,CAAA;IACZ,IAAI,CAACM,YAAY,GAAG,IAAI;EAC1B;EAEA;EACAO,gBAAgBA,CAACH,QAAgB;IAC/B;IACA;IAEA;IACA,IAAI,CAACN,aAAa,CAACU,QAAQ,CAACJ,QAAQ,CAAC;EACvC;EAAC,QAAAK,CAAA,G;qBAzBUb,YAAY,EAAAX,EAAA,CAAAyB,iBAAA,CAAAC,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAZjB,YAAY;IAAAkB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRzBnC,EAAA,CAAAqC,UAAA,IAAAC,mCAAA,yBAAmF;QACnFtC,EAAA,CAAAuC,SAAA,eAAqB;;;QADPvC,EAAA,CAAAwC,UAAA,UAAAJ,GAAA,CAAAK,aAAA,CAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}