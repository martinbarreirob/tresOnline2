{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Columns inside this embed.\n     */\n    this.columns = [];\n    /**\n     * Relations inside this embed.\n     */\n    this.relations = [];\n    /**\n     * Entity listeners inside this embed.\n     */\n    this.listeners = [];\n    /**\n     * Indices applied to the embed columns.\n     */\n    this.indices = [];\n    /**\n     * Uniques applied to the embed columns.\n     */\n    this.uniques = [];\n    /**\n     * Relation ids inside this embed.\n     */\n    this.relationIds = [];\n    /**\n     * Relation counts inside this embed.\n     */\n    this.relationCounts = [];\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n    this.embeddeds = [];\n    /**\n     * Indicates if the entity should be instantiated using the constructor\n     * or via allocating a new object via `Object.create()`.\n     */\n    this.isAlwaysUsingConstructor = true;\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n    this.isArray = false;\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n    this.parentPropertyNames = [];\n    /**\n     * Returns array of prefixes of current embed and all its parent embeds.\n     */\n    this.parentPrefixes = [];\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    this.embeddedMetadataTree = [];\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    this.columnsFromTree = [];\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    this.relationsFromTree = [];\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    this.listenersFromTree = [];\n    /**\n     * Indices of this embed and all indices from its child embeds.\n     */\n    this.indicesFromTree = [];\n    /**\n     * Uniques of this embed and all uniques from its child embeds.\n     */\n    this.uniquesFromTree = [];\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n    this.relationIdsFromTree = [];\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n    this.relationCountsFromTree = [];\n    this.entityMetadata = options.entityMetadata;\n    this.type = options.args.type();\n    this.propertyName = options.args.propertyName;\n    this.customPrefix = options.args.prefix;\n    this.isArray = options.args.isArray;\n  }\n  // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n  /**\n   * Creates a new embedded object.\n   */\n  create(options) {\n    if (!(typeof this.type === \"function\")) {\n      return {};\n    }\n    if ((options === null || options === void 0 ? void 0 : options.fromDeserializer) || !this.isAlwaysUsingConstructor) {\n      return Object.create(this.type.prototype);\n    } else {\n      return new this.type();\n    }\n  }\n  // ---------------------------------------------------------------------\n  // Builder Methods\n  // ---------------------------------------------------------------------\n  build(connection) {\n    this.embeddeds.forEach(embedded => embedded.build(connection));\n    this.prefix = this.buildPrefix(connection);\n    this.parentPropertyNames = this.buildParentPropertyNames();\n    this.parentPrefixes = this.buildParentPrefixes();\n    this.propertyPath = this.parentPropertyNames.join(\".\");\n    this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n    this.columnsFromTree = this.buildColumnsFromTree();\n    this.relationsFromTree = this.buildRelationsFromTree();\n    this.listenersFromTree = this.buildListenersFromTree();\n    this.indicesFromTree = this.buildIndicesFromTree();\n    this.uniquesFromTree = this.buildUniquesFromTree();\n    this.relationIdsFromTree = this.buildRelationIdsFromTree();\n    this.relationCountsFromTree = this.buildRelationCountsFromTree();\n    if (connection.options.entitySkipConstructor) {\n      this.isAlwaysUsingConstructor = !connection.options.entitySkipConstructor;\n    }\n    return this;\n  }\n  // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n  buildPartialPrefix() {\n    // if prefix option was not set or explicitly set to true - default prefix\n    if (this.customPrefix === undefined || this.customPrefix === true) {\n      return [this.propertyName];\n    }\n    // if prefix option was set to empty string or explicity set to false - disable prefix\n    if (this.customPrefix === \"\" || this.customPrefix === false) {\n      return [];\n    }\n    // use custom prefix\n    if (typeof this.customPrefix === \"string\") {\n      return [this.customPrefix];\n    }\n    throw new TypeORMError(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);\n  }\n  buildPrefix(connection) {\n    if (connection.driver.options.type === \"mongodb\") return this.propertyName;\n    let prefixes = [];\n    if (this.parentEmbeddedMetadata) prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n    prefixes.push(...this.buildPartialPrefix());\n    return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n  }\n\n  buildParentPropertyNames() {\n    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n  }\n  buildParentPrefixes() {\n    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();\n  }\n  buildEmbeddedMetadataTree() {\n    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n  }\n  buildColumnsFromTree() {\n    return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n  }\n  buildRelationsFromTree() {\n    return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n  }\n  buildListenersFromTree() {\n    return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\n  }\n  buildIndicesFromTree() {\n    return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\n  }\n  buildUniquesFromTree() {\n    return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);\n  }\n  buildRelationIdsFromTree() {\n    return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\n  }\n  buildRelationCountsFromTree() {\n    return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\n  }\n}","map":{"version":3,"names":["TypeORMError","EmbeddedMetadata","constructor","options","columns","relations","listeners","indices","uniques","relationIds","relationCounts","embeddeds","isAlwaysUsingConstructor","isArray","parentPropertyNames","parentPrefixes","embeddedMetadataTree","columnsFromTree","relationsFromTree","listenersFromTree","indicesFromTree","uniquesFromTree","relationIdsFromTree","relationCountsFromTree","entityMetadata","type","args","propertyName","customPrefix","prefix","create","fromDeserializer","Object","prototype","build","connection","forEach","embedded","buildPrefix","buildParentPropertyNames","buildParentPrefixes","propertyPath","join","buildEmbeddedMetadataTree","buildColumnsFromTree","buildRelationsFromTree","buildListenersFromTree","buildIndicesFromTree","buildUniquesFromTree","buildRelationIdsFromTree","buildRelationCountsFromTree","entitySkipConstructor","buildPartialPrefix","undefined","targetName","driver","prefixes","parentEmbeddedMetadata","push","concat","reduce"],"sources":["C:/Users/practicas/Downloads/angular/tresOnline/node_modules/typeorm/browser/metadata/EmbeddedMetadata.js"],"sourcesContent":["import { TypeORMError } from \"../error\";\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    constructor(options) {\n        /**\n         * Columns inside this embed.\n         */\n        this.columns = [];\n        /**\n         * Relations inside this embed.\n         */\n        this.relations = [];\n        /**\n         * Entity listeners inside this embed.\n         */\n        this.listeners = [];\n        /**\n         * Indices applied to the embed columns.\n         */\n        this.indices = [];\n        /**\n         * Uniques applied to the embed columns.\n         */\n        this.uniques = [];\n        /**\n         * Relation ids inside this embed.\n         */\n        this.relationIds = [];\n        /**\n         * Relation counts inside this embed.\n         */\n        this.relationCounts = [];\n        /**\n         * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n         */\n        this.embeddeds = [];\n        /**\n         * Indicates if the entity should be instantiated using the constructor\n         * or via allocating a new object via `Object.create()`.\n         */\n        this.isAlwaysUsingConstructor = true;\n        /**\n         * Indicates if this embedded is in array mode.\n         *\n         * This option works only in mongodb.\n         */\n        this.isArray = false;\n        /**\n         * Returns array of property names of current embed and all its parent embeds.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * we need to get value of \"id\" column from the post real entity object.\n         * this method will return [\"data\", \"information\", \"counters\"]\n         */\n        this.parentPropertyNames = [];\n        /**\n         * Returns array of prefixes of current embed and all its parent embeds.\n         */\n        this.parentPrefixes = [];\n        /**\n         * Returns embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.embeddedMetadataTree = [];\n        /**\n         * Embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.columnsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.relationsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.listenersFromTree = [];\n        /**\n         * Indices of this embed and all indices from its child embeds.\n         */\n        this.indicesFromTree = [];\n        /**\n         * Uniques of this embed and all uniques from its child embeds.\n         */\n        this.uniquesFromTree = [];\n        /**\n         * Relation ids of this embed and all relation ids from its child embeds.\n         */\n        this.relationIdsFromTree = [];\n        /**\n         * Relation counts of this embed and all relation counts from its child embeds.\n         */\n        this.relationCountsFromTree = [];\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates a new embedded object.\n     */\n    create(options) {\n        if (!(typeof this.type === \"function\")) {\n            return {};\n        }\n        if ((options === null || options === void 0 ? void 0 : options.fromDeserializer) || !this.isAlwaysUsingConstructor) {\n            return Object.create(this.type.prototype);\n        }\n        else {\n            return new this.type();\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    build(connection) {\n        this.embeddeds.forEach((embedded) => embedded.build(connection));\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.uniquesFromTree = this.buildUniquesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        if (connection.options.entitySkipConstructor) {\n            this.isAlwaysUsingConstructor =\n                !connection.options.entitySkipConstructor;\n        }\n        return this;\n    }\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    buildPartialPrefix() {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName];\n        }\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return [];\n        }\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix];\n        }\n        throw new TypeORMError(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);\n    }\n    buildPrefix(connection) {\n        if (connection.driver.options.type === \"mongodb\")\n            return this.propertyName;\n        let prefixes = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n        prefixes.push(...this.buildPartialPrefix());\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    }\n    buildParentPropertyNames() {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                .buildParentPropertyNames()\n                .concat(this.propertyName)\n            : [this.propertyName];\n    }\n    buildParentPrefixes() {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                .buildParentPrefixes()\n                .concat(this.buildPartialPrefix())\n            : this.buildPartialPrefix();\n    }\n    buildEmbeddedMetadataTree() {\n        return this.parentEmbeddedMetadata\n            ? this.parentEmbeddedMetadata\n                .buildEmbeddedMetadataTree()\n                .concat(this)\n            : [this];\n    }\n    buildColumnsFromTree() {\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n    }\n    buildRelationsFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n    }\n    buildListenersFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\n    }\n    buildIndicesFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\n    }\n    buildUniquesFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);\n    }\n    buildRelationIdsFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\n    }\n    buildRelationCountsFromTree() {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}