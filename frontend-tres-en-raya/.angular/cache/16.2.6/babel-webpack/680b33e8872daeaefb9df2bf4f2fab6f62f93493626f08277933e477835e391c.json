{"ast":null,"code":"import * as io from 'socket.io-client';\nimport { Observable } from 'rxjs'; // No olvides importar Observable\nimport * as i0 from \"@angular/core\";\nexport class SocketService {\n  constructor() {\n    this.socket = io.connect('http://localhost:3000'); // Asume que tu servidor backend corre en el puerto 3000\n    this.socket.on('nuevo-usuario', message => {\n      console.log(message);\n    });\n  }\n  // Método para emitir eventos\n  emit(eventName, data) {\n    this.socket.emit(eventName, data);\n  }\n  emitMove(payload) {\n    this.socket.emit('movimiento-jugador', payload);\n  }\n  emitJoinGame(payload) {\n    this.socket.emit('join-game', payload);\n  }\n  listenForMoves() {\n    return new Observable(observer => {\n      this.socket.on('movimiento-jugador', data => {\n        observer.next(data);\n      });\n    });\n  }\n  // Esta función se suscribe al evento \"player-joined\"\n  onPlayerJoined() {\n    return new Observable(observer => {\n      this.socket.on('player-joined', data => {\n        observer.next(data);\n      });\n    });\n  }\n  static #_ = this.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["io","Observable","SocketService","constructor","socket","connect","on","message","console","log","emit","eventName","data","emitMove","payload","emitJoinGame","listenForMoves","observer","next","onPlayerJoined","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\practicas\\Downloads\\angular\\tresOnline\\frontend-tres-en-raya\\src\\app\\socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as io from 'socket.io-client';\r\nimport { Observable } from 'rxjs';  // No olvides importar Observable\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SocketService {\r\n  private socket: any;\r\n\r\n  constructor() {\r\n    this.socket = io.connect('http://localhost:3000'); // Asume que tu servidor backend corre en el puerto 3000\r\n\r\n    this.socket.on('nuevo-usuario', (message: string) => {\r\n      console.log(message);\r\n    });\r\n  }\r\n\r\n    // Método para emitir eventos\r\n    emit(eventName: string, data: any) {\r\n      this.socket.emit(eventName, data);\r\n    }\r\n\r\n  emitMove(payload: any): void {\r\n    this.socket.emit('movimiento-jugador', payload);\r\n  }\r\n\r\n  emitJoinGame(payload: any): void {\r\n    this.socket.emit('join-game', payload);\r\n  }\r\n\r\n  listenForMoves(): Observable<any> {\r\n    return new Observable((observer) => {\r\n      this.socket.on('movimiento-jugador', (data: any) => {\r\n        observer.next(data);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Esta función se suscribe al evento \"player-joined\"\r\n  onPlayerJoined(): Observable<any> {\r\n    return new Observable(observer => {\r\n      this.socket.on('player-joined', (data: any) => {\r\n        observer.next(data);\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,OAAO,KAAKA,EAAE,MAAM,kBAAkB;AACtC,SAASC,UAAU,QAAQ,MAAM,CAAC,CAAE;;AAKpC,OAAM,MAAOC,aAAa;EAGxBC,YAAA;IACE,IAAI,CAACC,MAAM,GAAGJ,EAAE,CAACK,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAEnD,IAAI,CAACD,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGC,OAAe,IAAI;MAClDC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACtB,CAAC,CAAC;EACJ;EAEE;EACAG,IAAIA,CAACC,SAAiB,EAAEC,IAAS;IAC/B,IAAI,CAACR,MAAM,CAACM,IAAI,CAACC,SAAS,EAAEC,IAAI,CAAC;EACnC;EAEFC,QAAQA,CAACC,OAAY;IACnB,IAAI,CAACV,MAAM,CAACM,IAAI,CAAC,oBAAoB,EAAEI,OAAO,CAAC;EACjD;EAEAC,YAAYA,CAACD,OAAY;IACvB,IAAI,CAACV,MAAM,CAACM,IAAI,CAAC,WAAW,EAAEI,OAAO,CAAC;EACxC;EAEAE,cAAcA,CAAA;IACZ,OAAO,IAAIf,UAAU,CAAEgB,QAAQ,IAAI;MACjC,IAAI,CAACb,MAAM,CAACE,EAAE,CAAC,oBAAoB,EAAGM,IAAS,IAAI;QACjDK,QAAQ,CAACC,IAAI,CAACN,IAAI,CAAC;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACAO,cAAcA,CAAA;IACZ,OAAO,IAAIlB,UAAU,CAACgB,QAAQ,IAAG;MAC/B,IAAI,CAACb,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGM,IAAS,IAAI;QAC5CK,QAAQ,CAACC,IAAI,CAACN,IAAI,CAAC;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAAC,QAAAQ,CAAA,G;qBAvCUlB,aAAa;EAAA;EAAA,QAAAmB,EAAA,G;WAAbnB,aAAa;IAAAoB,OAAA,EAAbpB,aAAa,CAAAqB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}